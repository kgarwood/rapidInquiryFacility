package org.sahsu.rif.services.graphics;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.List;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Base64.Encoder;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.Iterator;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.Month;

import org.sahsu.rif.generic.util.RIFLogger;
import org.sahsu.rif.generic.system.RIFServiceException;
import org.sahsu.rif.services.datastorage.common.BaseSQLManager;
import org.apache.commons.collections.IteratorUtils;

import org.sahsu.rif.generic.datastorage.SelectQueryFormatter;
import org.sahsu.rif.generic.datastorage.SQLQueryUtility;
import org.sahsu.rif.generic.datastorage.ms.MSSQLSelectQueryFormatter;
import org.sahsu.rif.services.system.RIFServiceError;
import org.sahsu.rif.services.system.RIFServiceMessages;
import org.sahsu.rif.services.system.RIFServiceStartupOptions;

import org.json.JSONObject;
import org.json.JSONArray;
import org.json.JSONException;

import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.io.WKTReader;
import com.vividsolutions.jts.io.ParseException;

import org.geotools.feature.FeatureCollection;
import org.geotools.geometry.jts.JTS;
import org.geotools.geometry.jts.JTSFactoryFinder;
import org.geotools.geometry.jts.ReferencedEnvelope;
import org.geotools.geojson.geom.GeometryJSON;
import org.geotools.geojson.feature.FeatureJSON;
import org.geotools.referencing.crs.DefaultGeographicCRS;

import org.geotools.map.FeatureLayer;
import org.geotools.map.Layer;
import org.geotools.map.MapContent;
import org.geotools.map.MapViewport;
import org.geotools.styling.SLD;
import org.geotools.styling.Style;
import org.geotools.renderer.lite.StreamingRenderer;
import org.geotools.renderer.label.LabelCacheImpl;
import org.geotools.renderer.GTRenderer;

import org.geotools.geometry.GeneralEnvelope;
import org.geotools.coverage.grid.GridCoverage2D;
import org.geotools.coverage.grid.GridCoverageFactory;
import org.geotools.coverage.processing.CoverageProcessor;
import org.opengis.parameter.ParameterValueGroup;
 
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;

import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.image.RenderedImage;
import java.awt.geom.AffineTransform;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import java.io.FileOutputStream;

import java.io.IOException;
import java.io.FileNotFoundException;

public class RIFTiles {

	private static final RIFLogger rifLogger = RIFLogger.getLogger();
	private static String lineSeparator = System.getProperty("line.separator");
	private static String EXTRACT_DIRECTORY;
	 
	private static BaseSQLManager baseSQLManager = null;
	
	public RIFTiles(final RIFServiceStartupOptions options) {
		try {
			EXTRACT_DIRECTORY = options.getExtractDirectory();
			if (baseSQLManager == null) {
				baseSQLManager = new BaseSQLManager(options);
			}			
		}
		catch(Exception exception) {
			rifLogger.warning(this.getClass(), 
				"Error in RIFTiles() constructor");
			throw new NullPointerException();
		}
	}

	/*
	 * Function:	geoJson2png()
	 * Description: Convert geoJSON to transparent PNG tile, cropped to BBOX
					https://gis.stackexchange.com/questions/245875/convert-geojson-to-png
	 * Returns:		PNG coded in base64
	 */
	public String geoJson2png(
		final JSONObject tileGeoJson, 
		final JSONArray bboxJson, 
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y) throws IOException, JSONException, RIFServiceException {
		
		String result = null;		
		try {
			FeatureJSON featureJSON = new FeatureJSON();
			InputStream is = new ByteArrayInputStream(tileGeoJson.toString().getBytes());
			ByteArrayOutputStream os = new ByteArrayOutputStream();

			// Convert GeoJSON toFeatureCollection 	
			FeatureCollection features = featureJSON.readFeatureCollection(is);
			
			// Style 
			MapContent mapContent = new MapContent();
			mapContent.setTitle(geoLevel + "/" + zoomlevel + "/" + x + "/" + y + ".png");
		
			int w = 256;
			int h = 256;
			// bboxJson is: [minX, minY, maxX, maxY] 
			ReferencedEnvelope bounds = new ReferencedEnvelope(
					bboxJson.getDouble(0) /* xMin: West */,
					bboxJson.getDouble(2) /* xMax: East */,
					bboxJson.getDouble(1) /* yMin: South */,
					bboxJson.getDouble(3) /* yMax: North */,
					DefaultGeographicCRS.WGS84
				);	

			MapViewport mapViewport = mapContent.getViewport();
	//		mapViewport.setMatchingAspectRatio(true);
			mapViewport.setScreenArea(new Rectangle(Math.round(w), Math.round(h)));
			mapViewport.setBounds(bounds);
			mapContent.setViewport(mapViewport);
			
			Style style = SLD.createSimpleStyle(features.getSchema());
			Layer layer = new FeatureLayer(features, style);
			mapContent.addLayer(layer);
			
			BufferedImage bufferedImage = new BufferedImage(w, h, 
				BufferedImage.TYPE_INT_ARGB); // Allow transparency [will work for PNG as well!]
			Graphics2D g2d = bufferedImage.createGraphics();
			
			Rectangle outputArea = new Rectangle(0, 0, w, h);
			GTRenderer renderer = new StreamingRenderer();
			LabelCacheImpl labelCache = new LabelCacheImpl();
			Map<Object, Object> hints = renderer.getRendererHints();
			if (hints == null) {
				hints = new HashMap<>();
			}
			hints.put(StreamingRenderer.LABEL_CACHE_KEY, labelCache);
			renderer.setRendererHints(hints);
			renderer.setMapContent(mapContent);
			renderer.paint(g2d, outputArea, bounds); 
			
			ImageIO.write(bufferedImage, "png", os);

			cacheTile(null /* tileGeoJson */, os, geography.toLowerCase(), zoomlevel, geoLevel.toLowerCase(), x, y, "png");
			result=Base64.getEncoder().encodeToString(os.toByteArray());
			
			mapContent.dispose();
			g2d.dispose();
		}
		catch (Exception exception) {
			try {
				cacheTile(tileGeoJson, null /* pngTileStream */, geography.toLowerCase(), zoomlevel, geoLevel.toLowerCase(), x, y, "json");
			}
			catch (Exception cacheException) {
				rifLogger.error(getClass(), "Failed to cache failing GeoJSON for geography: " + geography +
					"; geoLevel: " + geoLevel +
					"; zoomlevel: " + zoomlevel +
					"; x: " + x +
					"; y: " + y + " [Ignored]", cacheException);
			}
			throw new RIFServiceException(
				RIFServiceError.TILE_GENERATE_GEOTOOLS_ERROR,
				"Tile generation error: " + exception.getMessage() + lineSeparator +
				"GeoJSON: " + tileGeoJson.toString(2).substring(1, 600), exception);
		}
		
		return result;
	}
	
	// Add bounding box as geoJSON feature so we can see the boundary of the tile
	private JSONObject createGeoJsonBboxFeature(
		final JSONArray bboxJson,
		final JSONObject properties) {
		JSONObject geoJsonFeature = new JSONObject();
		
		properties.put("gid", 0);
		properties.put("name", "BBOX");
		properties.put("area_id", "BBOX");
		
		geoJsonFeature.put("type", "Feature");
		geoJsonFeature.put("properties", properties);
		
		JSONObject geometry = new JSONObject();
		geometry.put("type", "MultiPolygon");
		
		// bboxJson is: [minX, minY, maxX, maxY] 
		// coordinates are(SW, NW, NE, SE, SW): [[[[minX, minY],[minX, maxY],[maxX, maxY],[maxX, minY],[minX, minY]]]]
		
		JSONArray sw = new JSONArray(); // [minX, minY]
		sw.put(bboxJson.getDouble(0));
		sw.put(bboxJson.getDouble(1));
		JSONArray nw = new JSONArray(); // [minX, maxY]
		nw.put(bboxJson.getDouble(0));
		nw.put(bboxJson.getDouble(3));
		JSONArray ne = new JSONArray(); // [maxX, maxY]
		ne.put(bboxJson.getDouble(2));
		ne.put(bboxJson.getDouble(3));
		JSONArray se = new JSONArray(); // [maxX, minY]
		se.put(bboxJson.getDouble(2));
		se.put(bboxJson.getDouble(1));
		
		JSONArray coordinates = new JSONArray();
		JSONArray coordinates2 = new JSONArray();
		JSONArray coordinates3 = new JSONArray();
		coordinates.put(sw);
		coordinates.put(nw);
		coordinates.put(ne);
		coordinates.put(se);
		coordinates.put(sw);
		coordinates2.put(coordinates);
		coordinates3.put(coordinates2);
		geometry.put("coordinates", coordinates3);
		
		geoJsonFeature.put("geometry", geometry);
		
		rifLogger.info(getClass(), "Processed bbox: " + bboxJson.toString() + " into feature: " + geoJsonFeature.toString(2));
		return geoJsonFeature;
	}
					
	/*
	 * Function: 		topoJson2geoJson()
	 * Description: 	Convert TopoJSON to GeoJSON
	 * 					[Store result in <myTileTable>.optimised_geojson is the column exists and is NOT NULL] - Maybe
	 *					As there is no Java way of converting TopoJSON to GeoJSON like topojson.feature(topology, object)
	 *					https://github.com/topojson/topojson-client/blob/master/README.md#feature
	 *					Various Java libraries are immature, unmaintained and undocumented.
	 *					GDAL can convert, but again it is not documented, especially GDAL Java.
	 *
	 *					The choosen method here is to populate <myTileTable>.optimised_geojson by parsing the area_ids from
	 *					the topoJSON properties and then fetching the GeoJSON from <myGeometryTable>.
	 *
	 *					This will eventually be done by the tileMaker.
	 *	 
	 * Returns:			GeoJSON as JSONObject
	 */
	 	public JSONObject topoJson2geoJson( // Called from: ResultsQueryManager.java; needs to determine minZoomlevel and maxZoomlevel
		final Connection connection,
		final JSONObject tileTopoJson, 
		final JSONArray bboxJson, 
		final String myTileTable, 
		final String myGeometryTable, 
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y,
		final boolean addBoundingBoxToTile)
			throws SQLException, JSONException, RIFServiceException
	{
	
		PreparedStatement statement2 = null;
		ResultSet resultSet2 = null;
		
		SelectQueryFormatter generateTilesForGeoLevelQueryFormatter2
				= new MSSQLSelectQueryFormatter();	
				
		//Get the min and max zoomlevel in the geometry table
		/*
		SELECT MIN(zoomlevel) AS min_zoomlevel, MAX(zoomlevel) AS max_zoomlevel
		  FROM rif_data.geometry_ews2011, rif_data.geometry_ews2011
		 WHERE rif_data.geometry_ews2011.geolevel_id = rif40.rif40_geolevels.geolevel_id
		   AND rif40.rif40_geolevels.geolevel_name = 'COA2011';
		  */
		
		generateTilesForGeoLevelQueryFormatter2.addSelectField("MIN(zoomlevel) AS min_zoomlevel");
		generateTilesForGeoLevelQueryFormatter2.addSelectField("MAX(zoomlevel) AS max_zoomlevel");
		generateTilesForGeoLevelQueryFormatter2.addFromTable("rif_data." + myGeometryTable.toLowerCase());
		generateTilesForGeoLevelQueryFormatter2.addFromTable("rif40.rif40_geolevels");
		generateTilesForGeoLevelQueryFormatter2.addWhereJoinCondition("rif_data." + myGeometryTable, 
			"geolevel_id", "rif40.rif40_geolevels", "geolevel_id");
		generateTilesForGeoLevelQueryFormatter2.addWhereParameter(
			baseSQLManager.applySchemaPrefixIfNeeded("rif40_geolevels"),
			"geolevel_name");
		
		baseSQLManager.logSQLQuery(
				"topoJson2geoJson",
				generateTilesForGeoLevelQueryFormatter2,
				geoLevel);	

		statement2 = connection.prepareStatement(generateTilesForGeoLevelQueryFormatter2.generateQuery());
		statement2.setString(1, geoLevel);
		
		resultSet2 = statement2.executeQuery();
		resultSet2.next();
		int minZoomlevel=resultSet2.getInt(1);	
		int maxZoomlevel=resultSet2.getInt(2);	
		
		JSONObject geoJSON;
		
		try {
			geoJSON = topoJson2geoJson(connection, 
					tileTopoJson, bboxJson, myTileTable, myGeometryTable, 
					geography, zoomlevel, geoLevel, x, y, addBoundingBoxToTile,
					minZoomlevel, maxZoomlevel);
		}	
		finally {
			//Cleanup database resources
			connection.commit();	
			SQLQueryUtility.close(statement2);
			SQLQueryUtility.close(resultSet2);		
		}	
		
		return geoJSON;
	}
	
	public JSONObject topoJson2geoJson(
		final Connection connection,
		final JSONObject tileTopoJson, 
		final JSONArray bboxJson, 
		final String myTileTable, 
		final String myGeometryTable, 
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y,
		final boolean addBoundingBoxToTile,
		final int minZoomlevel,
		final int maxZoomlevel)
			throws SQLException, JSONException, RIFServiceException
	{
		/*
		{
			"transform": {
				"scale": [1.2645986036803175E-4, 1.964578552911635E-4],
				"translate": [-6.151058640054187, 53.198324512334224]
			},
			"objects": {
				"collection": {
					"type": "GeometryCollection",
					"bbox": [-8.649433731630149, 49.87112937372648, 1.7627739932037385, 60.84572000540925],
					"geometries": [{
							"type": "GeometryCollection",
							"properties": {
								"gid": 1,
								"area_id": "UK",
								"name": "United_Kingdom",
								"geographic_centroid": {
									"type": "Point",
									"coordinates": [-4.03309, 55.8001]
								},
								"x": 0,
								"y": 0,
								"SCNTRY2011": "UK",
								"zoomlevel": 0
							},
							"id": 1,
							"geometries": [{
									"type": "Polygon",
									"arcs": [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]
								}, ...
							]
						}
					],
						...
				}
			},
			"bbox": [-6.151058640054187, 53.198324512334224, -4.886586496234238, 55.16270660739057],
			"type": "Topology",
			"arcs": [[[95, 7301], [3, -10], [38, -13], [5, -6], [2, -9], [5, -10], [10, -7], [13, -4], [19, -3], [15, -6], [21, -5], [6, -2], [5, -11], [-4, -8], [33, 11], [26, 3], [13, 4], [16, 1], [24, -3], [10, -4], [14, -3], [6, -2], [10, -7], [41, -6], [66, -6], [23, -2], [22, 1], [25, -2], [12, -2], [9, -6], [14, -3], [23, 0], [39, -6], [11, 0], [8, -3], [18, 1], [12, -14], [7, 0], [1, 7], [6, 0], [14, -6], [11, -3], [15, -2], [11, 2], [23, -8], [1, -3], [-6, -4], [-1, -8], [-5, -6], [-10, -6], [-3, -5], [7, -7], [13, -3], [-4, -5], [-19, -5], [-24, -3], [-29, 5], [-9, -1], [-22, 4], [-13, 6], [-21, 1], [-11, -1], [-18, 1], [-7, 1], [-11, -2], [-14, 1], [-11, 1], [-3, 4], [4, 4], [-3, 4], [-13, -2], [-12, -3], [-18, -2], [-7, -4], [-17, -5], [-7, 1], [-1, -9], [-3, -7], [20, -17], [-12, -3], [-15, -7], [185, -85], [30, -8], [32, -6], [53, -8], [42, -4], [90, -9], [19, -1], [26, 1], [35, 4], [18, 4], [122, 31], [18, 5], [58, 14], [-4, -8], [-5, -4], [20, -11], [11, -7], [23, -12], [56, -32], [15, -9], [77, -44], [20, -11], [30, -17], [9, -6], [64, -36], [41, -51], [8, -9], [20, 5], [38, 6], [29, 2], [34, -3], [93, -4], [52, 1], [12, 0], [-6, 10], [-3, 12], [3, 4], [8, 1], [28, -8], [17, 2], [3, 20], [-5, 9], [3, 23], [-13, 13], [0, 4], [28, 29], [9, 5], [22, 8], [110, 28], [55, 15], [21, 5], [41, 6], [22, 2], [12, 0], [25, -2], [18, 2], [43, 16], [32, 14], [18, 11], [16, 5], [29, 11], [26, 14], [13, 9], [7, 3], [45, 6], [25, 2], [15, 3], [44, 17], [18, 2], [72, 2], [52, 2], [16, -19], [8, -5], [27, -9], [13, -7], [52, -35], [17, -11], [4, -7], [-5, -10], [4, -34], [8, -5], [67, -13], [53, -8], [26, -4], [30, -3], [32, -9], [2, -1], [35, -4], [22, -5], [8, -1], [319, 5], [-4, 21], [0, 16], [197, 4], [-8, 72], [7, 2], [46, 2], [11, 4], [8, 5], [0, 7], [-10, 12], [3, 7], [13, 3], [1, 6], [-29, 13], [20, 8], [11, 9], [15, 6], [15, 4], [25, 3], [55, 11], [15, 4], [17, 10], [16, 3], [11, 6], [25, 4], [25, 8], [-2, -4], [-6, -3], [-13, -12], [16, -14], [9, -2], [15, -9], [1, -5], [17, -3], [4, -6], [-2, -4], [-12, -9], [4, -9], [0, -10], [-2, -13], [-14, -4], [-1, -9], [18, -4], [11, -10], [10, -5], [9, -10], [-1, -7], [-11, -4], [-6, -4], [9, -10], [11, -3], [21, -9], [1, -5], [16, -6], [7, -1], [13, 0], [8, -2], [3, -6], [8, -5], [-1, -13], [-4, -8], [11, -12], [2, -15], [7, -2], [38, -1], [22, -4], [9, -5], [26, -6], [9, -13], [4, -4], [16, -5], [10, -6], [22, -4], [5, 0], [39, -7], [12, 0], [13, 2], [14, 0], [3, -2], [2, -10], [7, -8], [-1, -6], [-9, -16], [3, -20], [83, 2], [82, 29], [59, 34], [42, 8], [190, 12], [189, 27], [83, 18], [126, 10], [194, -12], [152, -21], [256, 4], [147, 19], [84, 10], [154, -38], [47, -31], [170, 3], [125, 27], [82, 25], [14, 64], [-47, 31], [-48, 39], [-5, 40], [78, 57], [-7, 56], [-68, 31], [-69, 39], [-73, 70], [40, 25], [56, 65], [144, 42], [-4, 32], [-113, 46], [-4, 32], [106, 10], [-74, 78], [-132, 22], [-52, 71], [-55, 95], [90, 137], [369, 135], [11, 88], [-10, 79], [76, 74], [122, 58], [12, 72], [12, 80], [-73, 63], [-33, 95], [59, 41], [-142, 101], [-29, 56], [102, 49], [-29, 56], [-127, -19], [-113, 46], [-31, 72], [140, 82], [80, 49], [36, 57], [14, 64], [80, 49], [148, 27], [200, -45], [282, -11], [107, 10], [62, 25], [16, 2], [-4, 7], [-8, 5], [-14, 5], [5, 6], [16, 2], [23, 7], [-1, 4], [-6, 2], [-11, 10], [13, 7], [2, 8], [5, 5], [-1, 8], [18, 2], [19, -4], [11, 2], [5, 4], [24, 3], [25, 0], [20, 9], [3, 4], [11, 2], [35, 4], [10, 1], [8, -5], [13, 1], [60, -5], [23, -3], [20, 7], [9, 2], [18, 1], [8, 3], [15, 1], [4, 4], [-3, 3], [-9, 4], [24, 2], [7, 3], [14, 12], [-11, 10], [7, 9], [-26, 4], [-18, 1], [-23, 7], [-13, 2], [-13, 7], [-13, 4], [-9, 1], [-19, 0], [-23, 4], [-14, 0], [-7, 4], [1, 7], [9, 11], [-18, 11], [-12, 4], [-4, 4], [-18, 4], [-21, 2], [-9, 6], [-27, 7], [-9, 1], [-31, -3], [-37, -1], [-22, 3], [1, 6], [-6, 6], [0, 19], [4, 14], [3, 4], [10, 20], [5, 5], [12, 3], [-6, 3], [-25, 4], [-22, 0], [-15, 2], [-17, 4], [-17, 0], [-36, 8], [-1, 4], [11, 3], [21, 12], [28, 6], [10, 4], [6, 9], [-10, 10], [-28, 8], [-7, 1], [-6, 5], [-1, 7], [-7, 6], [1, 12], [-42, 13], [-15, 6], [0, 3], [-8, 6], [-8, 2], [-28, -2], [-20, -4], [-13, 1], [-8, 4], [-3, 9], [-15, 4], [-21, -5], [-12, 1], [-10, 8], [-11, 3], [-21, 1], [-16, 3], [-23, -1], [-12, 0], [-17, 3], [-28, 1], [-28, 6], [-5, 6], [-18, 0], [-1, 7], [-24, 3], [-15, -2], [-9, -6], [-19, -3], [-13, 4], [-19, -1], [-11, -9], [1, -4], [-6, -5], [-13, 1], [-4, 3], [-25, 1], [-21, -2], [-17, 0], [-21, 8], [-25, 5], [-19, 5], [-17, 0], [-21, -4], [-31, -2], [-14, -4], [-12, -5], [-12, 0], [-10, -1], [-20, 0], [-33, -9], [-32, 4], [-18, 0], [-4, 5], [-13, 5], [-9, 5], [-13, 14], [-3, 5], [-13, 1], [-17, 7], [-26, 3], [-7, 6], [-14, 3], [-12, 4], [0, 4], [-36, 6], [-23, 4], [-23, 0], [-16, 2], [-4, 5], [-18, 7], [-16, 10], [-22, 7], [-21, 3], [-41, 1], [-17, -3], [-21, 1], [-35, -7], [-10, -1], [-15, 3], [-24, 0], [-24, -2], [-40, -12], [-26, -3], [-12, -6], [-19, -3], [-34, -1], [-30, -2], [-38, -6], [-10, -3], [-3, -6], [4, -6], [16, -9], [4, -4], [2, -8], [-3, -10], [-30, -14], [-3, -3], [-4, -8], [-8, -4], [-20, -6], [-11, -2], [-20, -8], [-9, -8], [-37, 0], [-5, -2], [-11, -6], [-2, -5], [5, -3], [16, -3], [1, -4], [-16, -5], [-13, -12], [-21, -7], [-8, -5], [1, -10], [7, -11], [-7, -9], [8, -11], [10, 2], [9, 1], [5, -3], [17, 0], [14, -2], [4, 0], [14, -7], [16, -3], [13, -2], [6, 3], [12, -3], [7, -4], [10, -11], [8, -5], [19, -5], [10, -9], [-6, -12], [2, -5], [-9, -5], [-10, 7], [-24, 7], [-27, -2], [-10, -2], [-12, 2], [-18, 8], [-17, -7], [-23, -6], [-5, 1], [-9, 11], [-16, 4], [-6, 5], [-20, 2], [-21, 8], [-15, 3], [-15, 1], [-16, 5], [-17, -1], [-14, -5], [-17, -2], [-21, 0], [-7, -12], [-17, -4], [-17, 0], [-3, -1], [8, -6], [-4, -3], [-19, -4], [-5, -4], [-29, -4], [-11, -9], [-57, -2], [-31, -3], [-39, -6], [-10, 6], [-14, 16], [-6, 4], [-30, 8], [-3, 9], [-7, 7], [-27, 7], [-6, 5], [-6, 8], [-10, 5], [-36, 11], [-8, 4], [-2, 4], [4, 10], [-40, 4], [-7, 5], [-7, 2], [-17, -2], [-11, 0], [-10, -2], [-2, -8], [0, -12], [-2, -3], [-23, -18], [-7, -3], [-25, -2], [-25, -6], [-23, -7], [-17, -6], [-8, 3], [-22, -1], [-13, 1], [-16, -4], [-3, -3], [-20, -3], [-1, -5], [-11, -2], [-10, -5], [-21, -4], [-30, 0], [-17, 2], [-13, 0], [-5, 1], [-1, 5], [-13, 6], [-9, 1], [-18, 0], [-16, -2], [-15, 0], [-14, -2], [-18, -4], [-32, -6], [-10, 1], [-20, 4], [-15, 2], [-29, 0], [-23, 4], [-26, 0], [-29, 2], [-8, -2], [-9, -6], [-27, -17], [-8, -6], [-23, -16], [-12, -9], [-7, -1], [-11, 3], [-10, 4], [-2, 3], [-10, 3], [-2, 6], [-17, 2], [-36, 0], [-21, 6], [-50, -2], [-11, -6], [-13, -2], [-13, 1], [-14, 2], [-8, 3], [-6, 11], [-13, 17], [-2, 9], [-11, 10], [-12, 6], [-14, 4], [-12, 5], [-35, 6], [-8, 10], [-7, 5], [-1, 6], [-21, 2], [-9, -3], [-5, -4], [5, -8], [-2, -5], [-30, -12], [-8, -1], [-17, 0], [-16, -3], [-2, -8], [-11, -7], [-26, -1], [-11, 0], [-17, -2], [-22, -6], [-31, 0], [-4, -13], [-6, -4], [-27, -14], [-34, 0], [-15, -6], [-17, -2], [-5, -9], [7, -12], [-2, -4], [-22, -2], [-15, -6], [6, -6], [-4, -4], [2, -4], [-3, -5], [-15, -9], [-4, -5], [-14, -5], [-17, -3], [-6, -2], [7, -6], [20, -10], [27, -9], [5, -6], [-11, -7], [-13, -11], [-13, -7], [-2, -4], [3, -11], [-6, -10], [3, -9], [14, -9], [3, -6], [-2, -4], [-11, -7], [-33, -15], [-31, -12], [-17, 1], [-14, -4], [-11, 0], [-6, -2], [-12, -11], [18, -14], [-17, -12], [-24, -4], [-37, -12], [-7, -2], [10, -10], [-8, -10], [-11, -9], [0, -5], [-14, -17], [-11, -5], [-17, -5], [0, -32], [12, -3], [-12, -8], [-14, -13], [-11, -4], [-6, -3], [-8, -2], [-9, -8], [-8, -3], [3, -2], [-11, -12], [-18, -2], [-29, -21], [-23, -11], [-23, -6], [-11, -10], [-14, -7], [-11, -2], [-7, -5], [-16, -10], [-12, -5], [-7, -10], [-13, -6], [-23, -3], [-5, -2], [-3, -6], [-11, -2], [-40, -5], [-21, 1], [-23, -5], [-18, 0], [-18, 2], [-37, -3], [-26, 0], [-9, 2], [-33, -1], [-21, 1], [-18, -2], [-30, -22], [-27, -5], [-27, -4], [-10, -6], [-3, -8], [-22, -3], [-8, -2], [-11, -5], [-3, -5], [-11, -4], [-33, -3], [-12, 5], [-35, 3], [-14, -1], [-12, 0], [-14, 2], [-18, 10], [-26, 7], [-8, 5], [-10, 1], [-26, -3], [-20, 2], [-22, 1], [-14, 2], [-8, -1], [-12, -4], [-14, -13], [-25, -9], [-30, -1], [-1, -2], [-13, -5], [-9, -8], [-14, -5], [-21, -2], [-10, 2], [-11, 4], [-21, -1], [-8, 2], [-11, 1], [-14, -6], [-25, -2], [-22, 1], [-16, 0], [-19, -7], [-21, 0], [-12, 7], [-14, 2], [-7, -3], [0, -7], [-6, -16], [4, -9], [-9, -5], [3, -8], [10, -5], [-9, -5], [-14, -3], [-5, -4], [5, -7], [-6, -4], [-26, -8], [-7, -6], [-12, -2], [-3, -2], [1, -15], [-17, -5], [1, -10], [6, -3], [-10, -2], [-2, -4], [1, -13], [4, -3], [-3, -13], [-5, -2], [-19, -2], [-6, -2], [-1, -4], [3, -7], [12, -5], [-3, -6], [-8, -7], [11, -8], [6, -1], [-6, -15], [-17, -3], [-19, 0], [-11, -3], [-11, -5], [-5, 0], [-23, 2], [-18, -4], [-14, -12], [2, -5], [-11, 0], [-11, -1], [-11, -5], [-16, -2], [-35, 6], [-8, -6], [-8, -2], [-3, -4], [-13, -3], [-11, 1], [-11, -6], [-2, -7], [-11, -3], [-8, -4], [-15, -1], [-15, 1], [-8, -5], [-9, -2], [-22, 2], [-28, -1], [-18, 4], [-34, 6], [-5, 2], [0, 10], [-6, 5], [-9, 2], [-25, 1], [-22, 0], [-22, 3], [-15, -4], [-17, -1], [-13, 2], [-7, 2], [-37, -2], [-5, -1], [-53, 3], [-5, 2], [-15, 0], [-20, -4], [-8, -6], [-16, -6], [-4, -4], [-13, -10], [-16, -10], [-18, -5], [-8, -1], [-11, -4], [-22, -2], [-26, 1], [-22, -7], [-8, -1], [-13, -4], [-18, -16], [-10, -4], [-5, -3], [-12, -5], [-19, -4], [-13, 3], [-14, -4], [-29, -3], [-25, -5], [-6, -4], [-11, -3], [-23, 1], [-29, -4], [-18, -1], [-27, 12], [-19, 3], [-30, -6], [-6, -4], [-17, -6], [-40, 5], [-46, 3], [-6, -2], [-4, -6], [-14, -5], [-17, -11], [-9, -1], [-23, -2], [-28, -4], [-13, 0], [-45, -7], [-72, -23], [-20, -7], [-10, -6], [-12, -3], [-8, -7], [-11, -4], [-17, -2], [-17, -6], [-9, -5], [-2, -7], [-18, -14], [-18, -6], [6, -11], [-15, -4], [-19, -1], [-29, -5], [-8, -8], [-16, -5], [-13, -6], [8, -5], [14, -4], [2, -2], [-15, -9], [-7, 0], [-10, -3], [0, -9], [3, -3], [-13, -5], [6, -8], [32, -3], [10, -6], [-13, -13], [2, -6], [-12, -8], [-5, -8], [-19, -7], [-1, -7], [-24, -4], [-22, -11], [-8, -1], [-28, -17], [-18, -10], [4, -5], [20, -7], [-23, -3], [-26, 4], [-18, -2], [-12, -9], [-13, -3], [-8, -4], [-10, -1], [-5, -5], [-13, -2], [-14, 0], [-25, -1], [-36, 2], [-18, -6], [-10, -2], [-12, -7], [-23, -4], [-2, -9], [0, -8], [-2, -7], [3, -10], [13, -6], [13, -3], [6, -10], [6, -5], [12, -5], [4, -4], [14, -3], [-4, -8], [0, -14], [9, -14], [-4, -4], [0, -10], [9, -7], [-5, -9], [4, -2], [21, -5], [7, -8], [8, -5], [12, -4], [27, 1], [13, -5], [6, -3], [16, -5], [30, 12], [10, 2], [13, -2], [31, 1], [30, -6], [5, 1], [29, 3], [30, -1], [15, -2], [21, -5], [4, -7], [25, -3], [25, -10], [24, -1], [18, 4], [17, 2], [38, -1], [11, 1], [21, 3], [20, 5], [22, 8], [10, 2], [17, 0], [27, -7], [12, -6], [23, -5], [20, -1], [-2, -9], [-4, -5], [1, -5], [5, -6], [17, -11], [1, -4], [-9, -10], [1, -2], [-7, -10], [-3, -9], [-8, -7], [-1, -4], [7, -4], [0, -11], [-8, -5], [3, -6], [7, -8], [-4, -12], [-5, -8], [6, -11], [1, -5], [-13, -7], [-2, -5], [2, -4], [-2, -9], [16, -1], [38, 3], [13, -1], [11, -3], [17, 1], [36, -3], [17, -5], [-2, -3], [7, -4], [6, -9], [8, -4], [17, -3], [14, 0], [17, -11], [0, -9], [-8, -4], [-8, -9], [3, -7], [7, -3], [-1, -7], [-7, -8], [2, -10], [6, -4], [9, -2], [28, -1], [8, -8], [-1, -5], [26, -2], [10, -1], [14, -9], [1, -4], [18, -9], [2, -10], [9, -12], [10, -5], [12, -4], [10, -4], [18, -16], [20, -6], [9, -4], [21, -7], [7, -7], [35, -6], [8, -9], [15, -4], [0, -8], [29, -21], [1, -9], [14, -10], [7, -11], [-9, -9], [3, -6], [-4, -5], [-31, -6], [-32, 1], [-8, 3], [-4, -1], [-6, -9], [-12, -6], [-10, -4], [-10, -5], [-2, -5], [-9, -8], [6, -6], [-9, -1], [-14, -7], [-2, -6], [5, -5], [-20, -8], [-3, -9], [-10, -7], [1, -9], [-11, -7], [0, -12], [-13, -3], [-13, -12], [-28, -15], [-6, -8], [-11, -3], [-3, -6], [-17, -10], [-13, -3], [-28, -5], [-33, -2], [-3, -5], [11, -11], [2, -8], [-4, -5], [3, -5], [22, -3], [10, -8], [27, 0], [-2, -10], [-9, -6], [-23, -10], [-1, -3], [5, -6], [2, -9], [-2, -8], [-6, -3], [-26, -9], [3, -5], [-8, -7], [-1, -8], [-10, -12], [-12, -2], [-10, -4], [-19, -2], [-13, -8], [-16, -5], [-7, -4], [-4, -8], [-31, -6], [-19, 2], [-8, -1], [-17, -6], [-49, -4], [-37, -5], [-35, -3], [-16, -6], [-28, -1], [-30, -4], [-12, 2], [-25, 1], [5, 10], [-1, 2], [-11, 1], [-5, 6], [-13, 2], [-44, -3], [-14, 1], [-4, 3], [-54, 0], [-4, 2], [-21, 4], [-14, 7], [-12, 0], [-20, 0], [-13, 1], [-10, 2], [-15, 0], [-4, 7], [2, 4], [-4, 3], [-13, 1], [-3, 2], [-28, 1], [-18, 3], [-2, 11], [1, 6], [-3, 4], [-15, 4], [-10, 5], [-9, 2], [1, 4], [-6, 5], [-10, 2], [-4, 7], [-13, 7], [-22, 1], [-17, 4], [-5, -7], [-3, -9], [1, -12], [-5, -11], [-8, -10], [-1, -6]], [[1191, 3498], [58, -11], [33, -5], [131, -18], [28, -3], [19, -1], [19, -3], [18, -4], [14, -7], [26, -8], [53, -7], [6, 4], [19, 6], [44, 10], [21, 8], [20, 6], [17, 10], [23, 6], [12, 5], [10, 6], [19, 6], [13, 0], [22, 4], [28, 8], [15, 7], [0, 2], [15, 6], [37, 8], [17, 2], [35, 4], [17, 3], [14, 5], [6, 9], [31, 13], [12, 6], [21, 9], [21, 6], [24, 5], [9, 6], [19, 3], [24, 2], [15, 3], [18, 7], [28, 10], [22, 5], [7, 3], [-5, 7], [2, 3], [8, 2], [5, 5], [24, 4], [48, 20], [10, 2], [17, 2], [30, 6], [19, 3], [35, 3], [18, 4], [27, 1], [25, 4], [18, 1], [18, 2], [46, 10], [8, 0], [16, -2], [21, -7], [23, 1], [19, -1], [33, -5], [12, -5], [1, -3], [7, -1], [1, 4], [13, 9], [13, 3], [24, 0], [22, -2], [26, 2], [46, 1], [14, 2], [21, 5], [15, 1], [27, 0], [19, -2], [10, 3], [17, 2], [9, 2], [6, 9], [11, 4], [14, 2], [9, 5], [13, 3], [43, 8], [30, 9], [13, 6], [10, 3], [9, 5], [11, 3], [5, 3], [0, 7], [3, 2], [1, 9], [11, 5], [6, 11], [11, 11], [-2, 7], [9, 10], [1, 10], [7, 9], [2, 5], [12, 12], [7, 6], [-3, 3], [-14, 7], [3, 3], [11, 4], [3, 6], [9, 8], [-4, 9], [10, 7], [3, 9], [-6, 8], [-13, 10], [-3, 15], [-4, 6], [-5, 16], [-4, 4], [0, 11], [-12, 11], [-2, 9], [-13, 12], [5, 5], [2, 5], [10, 8], [17, 6], [4, 5], [-4, 11], [4, 4], [20, 8], [21, 7], [7, 5], [16, 1], [16, 3], [11, -1], [20, 0], [13, -5], [31, 0], [21, -3], [22, 3], [39, 11], [9, 4], [6, 5], [13, 6], [9, 6], [9, 0], [4, -5], [-11, -8], [4, -11], [32, 0], [17, -4], [21, -1], [8, 0], [-2, 13], [9, 0], [12, -4], [7, 0], [8, 9], [12, 6], [7, 0], [0, -4], [6, 0], [17, 6], [26, 7], [13, 0], [15, 3], [29, 2], [20, 4], [4, 4], [51, 8], [22, 7], [9, -2], [26, 0], [20, -3], [19, -6], [10, 0], [14, 3], [47, 14], [31, 7], [21, 9], [7, 4], [6, 1], [3, -4], [-16, -13], [5, -4], [11, 3], [4, -2], [-1, -4], [9, -3], [14, -1], [25, 4], [8, -2], [-4, -4], [5, -4], [13, -2], [7, 1], [15, 6], [19, 3], [4, -3], [-11, -4], [-1, -2], [14, -2], [4, -3], [11, -3], [33, -5], [3, -5], [17, -5], [14, 1], [6, -2], [-3, -4], [12, -1], [30, -1], [4, -1], [-3, -15], [-5, -3], [-19, -6], [3, -14], [13, -6], [47, -8], [26, -1], [-19, 7], [-25, 5], [-16, 4], [2, 4], [5, 3], [2, 6], [11, 9], [13, 4], [2, 9], [9, 5], [-7, 10], [-19, 3], [15, 12], [-3, 5], [19, 13], [-1, 11], [-7, 6], [-26, 11], [-8, 0], [-15, 5], [-4, 8], [-10, 6], [-12, 1], [-13, 4], [-12, 7], [-2, 9], [5, 3], [-1, 6], [-18, 8], [-25, 6], [-1, 4], [-17, 12], [-11, 1], [-28, 17], [-13, 2], [-19, 8], [-10, 10], [-9, 4], [-7, 0], [-4, 31], [-4, 4], [-9, 65], [-27, 10], [-9, 59], [-74, 15], [-3, 0], [-63, 13], [-6, 1], [-29, 14], [-59, 29], [-88, 46], [-9, 4], [-82, 27], [15, 10], [9, 10], [7, 14], [29, 70], [19, 44], [-207, -4], [66, 36], [3, 3], [71, 38], [110, 3], [113, 1], [156, 4]], [[4039, 4871], [-2, 9], [30, 4], [-1, 19], [-35, 16], [-2, 13], [-8, 4], [2, -15], [-28, 10], [-27, 22], [0, 5], [6, 5], [-2, 4], [12, 16], [48, 25], [5, 3], [2, 6], [7, 8], [10, 8], [10, 10], [11, 4], [6, 0], [-31, 11], [15, 17], [-19, 13], [43, 20], [3, 20], [-21, 8], [8, 23], [-22, 28], [20, 41], [-6, 6], [-2, 6], [15, 34], [-15, 19], [56, 71], [-30, 13], [-9, 9], [-1, 16], [8, 17], [20, 5], [15, 5], [16, 4], [57, 12], [54, 9], [26, -6], [29, -3], [41, -5], [26, -3], [11, -6], [15, -5], [10, -1], [84, -7], [42, 1], [23, -3], [23, 2], [11, -3], [19, 2], [33, -1], [7, 1], [20, 9], [-1, 7], [-4, 7], [16, 1], [4, 5], [24, 11], [3, 8], [5, 6], [-5, 8], [-13, 6], [-3, 4], [-16, 35], [-34, 27], [-16, 3], [-12, 4], [-12, 11], [-2, 8], [26, 5], [11, 5], [49, 17], [14, 8], [14, 5], [13, 7], [26, 8], [49, 6], [13, 4], [6, 5], [13, -1], [14, 2], [14, 4], [6, 9], [24, -2], [9, 2], [7, 6], [31, 10], [7, 9], [5, 0], [15, -2], [11, 0], [34, 10], [8, -1], [0, -3], [25, 7], [9, 1], [38, 1], [34, 3], [12, 2], [28, 7], [11, 2], [28, 1], [21, 5], [18, 0], [19, 1], [17, 4], [57, 13], [11, -1], [29, 2], [12, -2], [12, -5], [29, -4], [19, -2], [11, -4], [97, -5], [6, 4], [19, 4], [11, 1], [30, 8], [13, -1], [18, -7], [15, -2], [16, 1], [79, 8], [33, -1], [7, 5], [10, 14], [14, 5], [33, 4], [60, 9], [21, -1], [21, 4], [36, 4], [36, 3], [36, 0], [11, 2], [12, 4], [29, 6], [25, 3], [31, 4], [-15, 17], [-8, 7], [6, 37], [26, 9], [115, 7], [24, 6], [38, 21], [39, 4], [60, 1], [19, 0], [11, -4], [12, 1], [7, 6], [20, 11], [-12, 11], [5, 6], [-6, 18], [4, 11], [0, 9], [-5, 10], [2, 10], [30, 4], [66, -9], [14, 1], [50, -1], [-1, 11], [30, 9], [42, 2], [16, -2], [21, -3], [21, -11], [19, -8], [23, -1], [25, -14], [21, -6], [10, -5], [8, -5], [14, -4], [47, -6], [47, 2], [146, 39], [-10, 37], [68, 6], [19, 2], [32, 6], [13, 12], [-32, 4], [-40, -3], [8, 15], [-10, 14], [7, 9], [-32, 11], [21, 15], [-5, 6], [-73, 11], [-14, 3], [-23, 5], [-16, 1], [-41, 9], [-55, 14], [-7, 9], [-13, 8], [-16, 3], [-36, -1], [-22, 1], [-4, 11], [7, 23], [-16, 5], [-46, 2], [-55, 11], [-13, 0], [-11, 2], [-15, 9], [-13, 10], [-28, 7], [-48, 15], [-10, 7], [23, 17], [9, -2], [13, -2], [27, -4], [11, -1], [27, -5], [21, -3], [29, -5], [26, -6], [33, -2], [8, -3], [23, -1], [24, 6], [16, 9], [15, 27], [84, 23], [5, 3], [33, 9], [11, 5], [6, 6], [18, 44], [14, 14], [-17, 12], [9, 11], [-21, 16], [0, 10], [-20, 49], [-9, 6], [-17, 7], [-4, 6], [0, 10], [4, 7], [1, 6], [-7, 3], [-43, 4], [-2, 22], [81, 13], [10, 14], [34, 10], [12, 13], [47, 0], [14, 8], [62, 3], [54, 86], [-10, 8], [-12, 13], [-2, 9], [24, 71], [-321, -36], [-2, -3], [9, -4], [10, -10], [0, -8], [-6, -8], [-9, -7], [-3, -10], [0, -13], [-5, -7], [-7, -4], [-9, -2], [-23, 1], [-15, -2], [-4, -8], [3, -3], [0, -8], [4, -3], [-4, -12], [3, -8], [11, -5], [-2, -6], [-13, -7], [3, -3], [-8, -3], [4, -4], [-7, -6], [-18, -5], [-3, -7], [-9, -2], [1, -10], [-4, -3], [3, -5], [-9, -2], [-5, -10], [-15, -7], [-10, -7], [-9, -1], [-3, -4], [-14, -3], [-6, -5], [4, -4], [-8, -7], [-21, -6], [5, -6], [-12, -18], [3, -4], [-11, -10], [-1, -3], [4, -11], [10, -3], [-2, -3], [14, -8], [-3, -7], [1, -12], [-9, -11], [-4, -3], [-16, -6], [-1, -5], [-20, -6], [-3, -4], [-15, -4], [-23, -9], [-8, -4], [-6, -1], [-16, -6], [-4, -5], [-10, -8], [-9, -4], [-15, -3], [-13, 0], [-20, -6], [-10, -1], [-18, 0], [-17, -1], [-13, 3], [-19, -1], [-31, 1], [-16, 3], [-35, -2], [-7, 2], [-9, -3], [-12, 0], [-8, -2], [-35, -1], [-6, 2], [-21, 1], [-8, -1], [-9, -3], [-12, 1], [-15, -2], [-19, -7], [-13, -2], [-20, -6], [0, -5], [-5, -5], [-10, -4], [-2, -3], [3, -5], [-7, -7], [-13, -6], [-1, -2], [-13, -5], [-1, -3], [-29, -12], [-11, -3], [-36, -6], [-32, -3], [-33, 3], [-16, 5], [-41, -2], [-30, 3], [-22, 6], [-16, 1], [-12, 4], [-10, 2], [-11, 0], [-6, 1], [-25, -1], [-24, 4], [-21, 7], [-28, 4], [-5, 4], [-9, 1], [-9, 4], [-30, 3], [-9, 2], [-7, 5], [-18, 2], [-17, 4], [-5, 3], [-12, 1], [-8, 4], [-7, 1], [-9, 5], [-16, 5], [-12, 0], [-21, 3], [-7, 2], [-12, -1], [-10, -2], [-46, -9], [-28, -3], [-13, 1], [-16, 3], [-15, 0], [-24, 4], [-17, -1], [-46, 2], [8, 6], [10, 3], [14, 8], [-41, 6], [-50, 6], [-79, 5], [-20, 4], [-18, 5], [-17, 7], [-36, 20], [-39, 16], [-23, 8], [-42, 16], [-11, 4], [-51, 19], [-18, 4], [-13, 1], [-21, 0], [-79, -1], [-22, 0], [-20, 1], [-43, 7], [-41, 10], [-13, 2], [-25, 2], [-145, 9], [-88, 5], [-26, -1], [-20, -1], [-25, -4], [-25, -10], [-23, -4], [-13, -3], [-26, -13], [-9, -9], [-6, -12], [-5, -6], [-16, -9], [-14, -3], [-27, -2], [-21, 3], [-89, 17], [-18, 5], [-40, 9], [-29, 3], [-35, 1], [-45, 0], [-31, 2], [-63, 14], [-53, 11], [-21, 7], [-55, 24], [-16, 5], [-13, 3], [-14, -12], [-7, -2], [-64, 1], [0, -4], [3, -18], [2, -2], [41, -26], [4, -10], [-151, -3], [-277, -6], [-6, 1], [-23, 5], [-42, 3], [-14, 5], [-41, 21], [-5, 3], [-10, 12], [-14, -1], [-23, -5], [-51, -10], [-35, -8], [-19, -6], [-47, -34], [14, -1], [54, -2], [25, 0], [37, 3], [13, -1], [5, -11], [10, -5], [18, -4], [15, -3], [49, -5], [20, -2], [20, -6], [28, -13], [11, -5], [16, -3], [18, -8], [-38, -9], [-112, -22], [-57, -9], [-22, 0], [-27, 2], [-81, 10], [-30, -1], [-70, -4], [-31, -4], [-15, -4], [-22, -1], [-72, 1], [-24, 1], [-69, 6], [-17, 1], [-25, 0], [-74, -5], [-21, -1], [-13, 1], [-25, 3], [-17, 1], [-31, 0], [-40, -3], [-73, -1], [-33, 0], [-15, 2], [-24, 4], [-9, -4], [-50, -19], [-70, -27], [13, -5], [-16, -7], [-39, -4], [-10, -4], [1, -8], [-7, -7], [1, -7], [-4, -3], [-15, -2], [-4, -14], [1, -12], [4, -10], [8, -5], [18, -9], [4, 1], [29, -2], [13, -38], [15, -30], [16, -24], [2, -16], [7, -8], [29, -29], [12, -9], [24, -14], [12, -6], [56, -29], [21, -12], [11, -12], [2, -11], [59, 2], [30, 9], [28, 0], [12, 1], [10, -3], [-1, -3], [-16, -1], [-6, -3], [-12, -13], [3, -5], [13, -3], [3, -4], [-1, -9], [12, -4], [16, 0], [3, 2], [-2, 9], [11, -1], [3, -5], [16, -6], [-1, -5], [24, -7], [6, -8], [47, -15], [9, -1], [12, 0], [12, -6], [-1, -9], [4, -3], [3, -12], [14, -5], [19, 0], [11, -5], [-181, -3], [3, -37], [5, -37], [3, -24], [3, -14], [5, -36], [4, -15], [-30, 12], [-30, 14], [-34, 16], [-40, 17], [-35, 16], [-19, 7], [-6, 4], [-17, -5], [-48, -17], [-165, -58], [-115, -39], [-59, -19], [-121, -38], [-24, -10], [-9, -7], [-10, -5], [-11, -4], [-54, -11], [-4, -2], [-9, -9], [1, -6], [12, -12], [5, -7], [1, -5], [-7, -7], [-8, -3], [-15, -3], [-37, -4], [-17, -2], [-43, -9], [-28, -15], [-4, -7], [15, -14], [17, -13], [6, -6], [11, -44], [8, -10], [13, -7], [19, -6], [12, -3], [16, -3], [26, -2], [16, -4], [7, -3], [5, -6], [1, -7], [-12, -5], [-12, -3], [-31, -4], [-54, -8], [-15, -2], [-28, 0], [-25, 3], [-97, 11], [-57, 6], [-11, 1], [-14, -2], [-35, -6], [-29, -8], [-14, -2], [-28, -13], [-8, -1], [-26, -2], [-8, 2], [-19, 9], [-16, 0], [-9, -5], [0, -15], [-6, -8], [-26, -9], [-31, -9], [-13, -6], [-6, -5], [-3, -6], [-1, -12], [-7, -8], [-10, -4], [-17, -5], [-12, -5], [-10, -11], [-11, -5], [-9, -2], [-27, -3], [-8, -7], [1, -3], [8, -7], [1, -3], [-7, -6], [-17, -4], [-11, -5], [-12, -18], [11, -9], [-3, -5], [5, -8], [6, -16], [-5, -7], [-13, -8], [-26, -4], [-9, -7], [-74, -17], [-15, -1], [-7, -7], [-6, -2], [-32, -6], [-32, 0], [-19, -6], [-40, -13], [-9, -2], [-7, -4], [-8, -2], [-20, -3], [-22, -13], [-14, -3], [-15, -2], [-18, -3], [-9, -4], [-24, -3], [-11, -7], [-19, -7], [-26, -14], [-9, -2], [-21, -1], [-29, -5], [-7, -3], [-11, -9], [-6, -9], [-17, -6], [-8, -6], [-24, -5], [-13, -5], [-6, -8], [-6, -3], [-50, -5], [-9, 1], [-19, 0], [-27, -3], [-11, -2], [-7, 0], [14, -2], [15, 4], [8, 0], [-6, -6], [-16, -6], [18, -6], [-5, -4], [-13, 1], [-17, 3], [-16, -2], [2, -4], [11, -4], [-11, 0], [-8, 3], [-16, 3], [-5, -4], [10, -12], [-4, -3], [6, -7], [-2, -9], [9, -5], [10, -3], [8, -4], [-7, -3], [-13, 1], [-9, -1], [13, -1], [21, -7], [19, -4], [5, 4], [37, -7], [-14, 0], [-3, -3], [-27, -7], [30, 0], [13, -4], [9, 2], [14, -3], [7, 1], [9, 5], [9, 0], [-5, -3], [-3, -9], [-12, -7], [3, -3], [-11, -6], [17, 3], [5, 4], [28, 1], [10, -2], [18, 3], [10, -8], [11, -13], [5, -8], [9, -8], [-1, -5], [15, -2], [2, -2], [-14, 1], [-24, 0], [-1, -2], [34, -5], [9, -7], [3, -9], [6, -1], [10, 3], [13, -4], [11, 9], [8, -13], [17, -8], [4, -12], [12, -8], [-1, -3], [-7, -3], [2, -4], [9, -9], [8, -3], [25, -2], [12, -6], [6, -8], [8, -3], [-2, 10], [21, -8], [11, -5], [5, 1], [-13, 13], [20, 3], [22, -1], [10, -2], [15, 0], [20, -3], [11, -1], [14, -4], [26, -11], [10, -6], [12, -13], [6, -11], [0, -4], [12, -7], [10, -15], [9, -12], [9, -5], [5, 1], [14, 7], [16, -3], [9, -6], [0, -10], [-11, -8], [-15, -7], [2, -3], [19, -2], [20, -4], [15, -9], [-7, -12], [-3, -18], [9, -3], [10, -9], [37, -18], [8, -6], [23, -25], [2, -4], [-18, -22], [-3, -12], [8, -19], [-3, -7], [-20, -21], [-16, -12], [-8, -13], [-8, -8], [-9, -5], [-8, -11], [-34, -23], [-4, -6], [0, -10], [-21, -17], [-19, -13], [-18, -9], [-13, -10], [-7, -4], [-9, -2], [-21, -2], [-50, -11], [-21, -4], [-23, -3], [-31, -1], [10, -7], [46, 1], [4, -8], [47, 0], [5, -16], [-30, -1], [35, -16], [53, 0], [20, -8], [19, -5], [17, -7], [11, -1], [27, -7], [19, 0], [37, -16], [30, -10], [15, -4], [8, 1], [13, 4], [-4, -6], [-9, -2], [-10, 2], [-10, -4], [-13, 3], [-1, -3], [15, -6], [9, -1], [22, -6], [5, -3], [15, -5], [6, -3], [15, -3], [36, -12], [24, -1], [12, -3], [18, -1], [22, 0], [26, 2], [28, 2], [18, 0], [8, 2], [14, 6], [24, 2], [3, -2], [-20, -1], [-4, -2], [-2, -4], [-13, -4], [2, -16], [-23, -1], [9, -86], [5, -33], [8, -51], [5, -54], [2, -17], [-104, -1], [-37, -1], [-10, 0], [-53, -2], [-16, -13], [-6, -10], [-15, -9], [-16, -13], [3, -13], [5, -35], [51, 1], [2, -19], [-50, -1], [-3, -38], [-21, -1], [20, -9], [11, -13], [10, -7], [32, -9], [12, -5], [10, -7], [15, -4], [29, -6], [16, -4], [12, -5], [13, -3], [91, -7], [24, -3], [12, -5], [7, -6], [3, -11], [-4, -9], [0, -6], [14, -10], [9, -6], [14, -4]], [[1191, 3498], [-4, -3], [-8, 1], [-20, -6], [-16, -8], [-13, -7], [-15, -6], [-18, -4], [-13, -5], [-10, -15], [-14, -7], [-14, -14], [-22, -3], [-18, -4], [-16, -5], [-45, -17], [-19, -10], [-6, -9], [-8, -5], [-17, -3], [-18, 0], [-17, -3], [-38, -3], [-9, -3], [-7, -9], [-13, -5], [-21, -2], [-14, 1], [-26, -7], [-22, -12], [-17, -7], [16, -3], [1, -5], [10, -4], [-3, -7], [18, -13], [6, -7], [3, -19], [-10, -3], [-23, -4], [-27, -1], [-35, -10], [-9, -8], [2, -6], [-23, 12], [1, -5], [-5, -7], [-12, -11], [-13, -1], [-6, -2], [-32, 4], [-10, -3], [-8, -8], [-16, -6], [-10, -12], [-2, -5], [6, -14], [-5, -7], [-18, -8], [-13, -4], [-23, -3], [-4, -2], [-12, -16], [-19, -7], [-22, -5], [10, -2], [18, 2], [17, -2], [9, -3], [8, -12], [-1, -9], [-21, -10], [-18, -13], [-17, -16], [-8, 0], [-16, 12], [-28, -13], [-11, -6], [-2, -3], [2, -9], [-11, -22], [10, -7], [-68, 15], [-10, 0], [-4, -9], [19, -7], [9, -8], [-8, -3], [-17, -3], [-10, -4], [3, -10], [10, -8], [-2, -4], [9, -4], [22, -5], [18, -8], [28, -9], [10, -7], [2, -4], [17, -14], [3, -13], [3, -11], [11, -13], [-1, -2], [-24, -23], [-1, -3], [1, -10], [-5, -5], [-18, -13], [-12, -4], [-23, -4], [2, -3], [1, -9], [-7, -3], [9, -5], [-1, -6], [5, -6], [13, -4], [1, -2], [-4, -7], [10, 1], [15, -13], [20, -7], [2, -2], [-13, -6], [0, -18], [-4, -7], [-13, -14], [-2, -11], [4, -6], [-3, -4], [7, -4], [2, -6], [6, -8], [14, -12], [25, -17], [16, -7], [12, -11], [13, -7], [4, -6], [13, -14], [-3, -9], [4, -7], [13, -5], [4, -4], [5, -9], [1, -16], [-22, -1], [-24, -4], [-11, -3], [-26, -6], [-19, -3], [-9, -2], [0, -5], [-7, -2], [-4, -5], [-21, -4], [-20, 1], [-21, -4], [-25, -2], [-14, -4], [-7, -5], [-20, -7], [1, -5], [-13, -6], [-10, -4], [-13, -8], [-10, -5], [-16, -6], [-3, -2], [4, -6], [-6, -10], [-6, -3], [-19, -3], [-14, -5], [-11, -7], [-28, -6], [-28, -2], [-13, -3], [12, -18], [-15, -15], [-1, -5], [-19, -13], [1, -3], [14, -4], [5, -4], [-1, -4], [-12, -4], [-14, -15], [-5, -9], [344, 8], [143, 3], [25, 1], [120, 1], [70, 1], [46, 1], [109, 3], [74, 2], [72, 0], [36, 1], [57, 1], [71, 1], [111, 3], [54, 2], [63, 1], [23, 0], [92, 2], [0, -5], [229, 5], [22, -29], [18, -17], [47, -44], [24, -22], [57, -51], [107, -100], [-67, -2], [-31, 0], [-23, -5], [-6, -5], [-19, -12], [-39, -17], [-11, -5], [-6, -6], [2, -27], [-29, -6], [-7, -3], [-2, -3], [-12, -7], [-16, -6], [0, -8], [9, -11], [0, -5], [-4, -9], [-18, -11], [-1, -9], [-6, -6], [-6, -2], [-39, -5], [-41, -11], [-18, -2], [-41, -12], [-15, -6], [-30, -9], [-48, -5], [-15, -3], [-9, -5], [-14, -11], [-4, -5], [-18, -27], [-3, -8], [7, -51], [-7, -24], [-1, -7], [-12, -11], [-13, -10], [-33, -18], [-10, -5], [-14, -10], [-17, -11], [-5, -6], [-1, -10], [5, -51], [5, -11], [8, -5], [2, -3], [-4, -9], [9, -3], [0, -4], [26, -1], [23, -3], [18, -8], [13, -5], [9, -1], [22, -7], [24, -5], [25, -14], [28, -9], [4, -8], [26, -7], [2, -3], [-5, -4], [8, -6], [-7, -9], [-5, -3], [2, -5], [7, -5], [-5, -7], [-3, -8], [5, -7], [8, -3], [20, 3], [13, 8], [7, 2], [21, 1], [8, 3], [1, 5], [-6, 8], [-1, 4], [4, 5], [18, 6], [15, 1], [1, 5], [7, 0], [6, -5], [11, -5], [8, 1], [0, 4], [8, 2], [9, -1], [41, -13], [0, 5], [14, -5], [14, -3], [14, 0], [55, 2], [28, 2], [6, -1], [25, 3], [8, 5], [18, 3], [34, 0], [14, -2], [25, -2], [28, 1], [13, 0], [54, -5], [19, -4], [40, -1], [23, 5], [21, 2], [107, 3], [10, 1], [16, -3], [8, -5], [28, 1], [4, -2], [8, -12], [8, -18], [2, -3], [46, -1], [44, 1], [0, 8], [123, 2], [0, -8], [4, -16], [2, -15], [54, 1], [12, -72], [15, -12], [4, -9], [3, -22], [3, -5], [38, -11], [38, 6], [37, 4], [29, -2], [45, 0], [31, -5], [36, -10], [24, -7], [24, -6], [18, -2], [21, -1], [42, 2], [34, -1], [55, 2], [44, 2], [19, 6], [26, 13], [29, 8], [22, 7], [20, 11], [15, 13], [10, 3], [11, 2], [23, 0], [22, 4], [33, 4], [24, 1], [18, 2], [21, 7], [24, 7], [8, 1], [45, -1], [18, 1], [40, 2], [24, 4], [22, 6], [19, 10], [9, 7], [2, 6], [-1, 8], [4, 5], [13, 6], [13, 4], [16, 7], [8, 5], [5, 7], [7, 3], [11, -7], [15, -7], [18, -6], [5, -6], [9, -3], [21, -6], [15, -7], [14, -1], [18, 2], [61, 21], [16, 5], [17, 4], [12, 0], [15, -1], [34, 0], [20, -2], [10, -2], [33, -5], [14, -5], [5, -8], [4, -14], [9, -19], [12, -7], [37, -14], [18, -10], [14, -11], [17, -10], [11, -10], [15, -5], [42, -15], [6, -3], [23, -15], [30, -13], [18, -7], [22, -4], [53, -5], [31, 2], [9, -57], [7, -62], [6, -38], [17, -157], [9, -94], [1, -10], [17, -123], [-15, -9], [-23, -9], [-21, -4], [-27, -2], [-20, 1], [-30, -1], [-85, -7], [-98, -13], [-23, -3], [-21, -5], [-7, -2], [-51, -22], [-22, -10], [-67, -36], [-12, -14], [-11, -9], [-25, -8], [-16, -15], [-11, -7], [-15, -4], [-42, -8], [-6, -3], [-7, -9], [-12, -18], [-2, -10], [10, -8], [1, -7], [-11, -10], [-3, -5], [-8, -33], [0, -5], [16, -14], [1, -10], [-5, -11], [-1, -12], [-6, -6], [-41, -26], [-11, -6], [-14, -4], [-13, -3], [-116, -30], [-24, -7], [-4, -8], [-4, -4], [19, -11], [10, -7], [22, -12], [54, -32], [15, -9], [74, -44], [19, -12], [99, -59], [38, -50], [8, -10], [20, 5], [37, 6], [28, 2], [33, -3], [90, -4], [50, 1], [12, -1], [-6, 10], [-3, 13], [4, 4], [7, 0], [27, -7], [17, 1], [3, 21], [-5, 8], [4, 23], [-13, 14], [0, 4], [27, 29], [9, 4], [22, 8], [107, 28], [53, 15], [21, 5], [40, 6], [21, 2], [11, 0], [25, -2], [17, 2], [42, 16], [32, 13], [16, 12], [17, 5], [27, 11], [26, 13], [12, 9], [8, 4], [43, 6], [25, 1], [14, 4], [43, 16], [17, 2], [70, 2], [51, 2], [-19, 13], [-18, 6], [-33, 6], [-11, 4], [-36, 14], [-25, 7], [-41, 10], [-20, 3], [-4, 7], [-16, 2], [10, 7], [-10, 6], [-19, 7], [-10, 10], [-7, 4], [-18, 6], [-10, 6], [-15, 5], [-31, 6], [2, 9], [15, 8], [19, 2], [6, 3], [16, 6], [28, 6], [17, 2], [2, 2], [19, 2], [14, 5], [2, 3], [22, 6], [1, 3], [17, 5], [25, 5], [4, 3], [37, 13], [11, 2], [25, 4], [17, 4], [46, 5], [13, 3], [26, 5], [28, 3], [30, 7], [26, 3], [12, 5], [33, 8], [20, 2], [23, 3], [19, 1], [22, 2], [21, 2], [42, 0], [40, 6], [23, 0], [22, 0], [8, 1], [15, 6], [14, 3], [23, 3], [4, 7], [12, 7], [4, 10], [11, 9], [5, 7], [11, 4], [8, 8], [9, 2], [20, 3], [18, 4], [38, 5], [28, 8], [24, 5], [24, 1], [37, 0], [21, -3], [22, -4], [111, 5], [72, 13], [46, 10], [83, 3], [115, 4], [188, 2], [91, 5], [80, -17], [30, 1], [58, 2], [196, 82], [120, 13], [121, 9], [69, 13], [37, 1], [33, -8], [95, 8], [22, 2], [29, 0], [93, 8], [78, -5], [18, 4], [9, 10], [50, 4], [75, 1], [117, 58], [59, -5], [68, 10], [41, 10], [76, 6], [176, -17], [158, 5], [49, 6], [64, 1], [228, -39], [41, 6], [-7, 5], [-7, 1], [-3, 4], [-9, 22], [5, 11], [7, 1], [1, 6], [-8, 0], [13, 5], [10, 0], [22, 6], [10, 6], [40, 11], [26, 5], [2, -3], [8, -2], [26, 1], [17, 2], [24, 0], [29, 0], [21, 3], [24, 2], [12, -1], [22, -3], [16, 1], [14, -3], [7, 1], [1, 7], [13, 6], [10, 8], [15, 4], [2, 6], [7, 1], [21, 1], [6, 5], [-3, 4], [0, 10], [32, -6], [15, 0], [4, 3], [1, 11], [5, 4], [-3, 4], [11, 4], [-1, 6], [11, 0], [0, 4], [12, 4], [5, 5], [6, 1], [0, 4], [6, 1], [5, 7], [9, 3], [-2, 2], [10, 7], [8, 3], [12, 11], [6, 0], [0, 4], [10, 3], [-3, 5], [8, 4], [-5, 3], [8, 3], [-3, 8], [6, 7], [7, 0], [-3, 5], [3, 4], [6, 3], [0, 8], [-4, 2], [3, 5], [8, 0], [0, 10], [7, 1], [3, 4], [-6, 4], [8, 2], [-4, 4], [9, 1], [8, 7], [-2, 5], [12, 3], [0, 5], [15, 2], [8, 3], [5, -2], [13, 5], [22, 2], [4, 6], [6, 2], [23, 14], [24, 6], [5, 4], [29, 11], [7, 1], [20, 7], [1, 3], [13, 2], [6, 2], [14, 1], [14, 3], [16, 6], [3, 4], [15, 9], [7, 1], [17, 11], [-1, 2], [8, 10], [7, 3], [3, 8], [4, 1], [2, 5], [-6, 7], [6, 1], [0, 4], [15, 9], [5, 0], [3, 12], [5, 0], [2, 6], [17, 5], [7, 9], [-7, 4], [13, 3], [6, 8], [15, 4], [5, 4], [8, 2], [8, 7], [-4, 4], [3, 5], [-2, 3], [9, 5], [4, 9], [8, 8], [-2, 4], [-12, 8], [1, 4], [-2, 5], [8, 3], [-7, 9], [-2, 7], [9, 7], [-3, 8], [14, 11], [10, 3], [9, 1], [3, 5], [5, 1], [3, 9], [-8, 5], [-11, 10], [-11, 2], [0, 4], [-11, 3], [-8, 6], [-9, 1], [-4, 6], [-8, 3], [0, 5], [-8, 2], [-2, 5], [-8, 5], [6, 5], [-12, 2], [1, 4], [8, 3], [-6, 8], [-7, 6], [-16, 5], [-5, 9], [-12, 9], [1, 9], [-4, 5], [-14, 6], [-12, 7], [-9, 10], [-11, 5], [-11, -2], [-10, 3], [-6, 6], [1, 6], [-14, 4], [-61, -1], [-19, -8], [-82, -5], [-92, 2], [-162, -14], [-62, -1], [-93, 10], [-132, -14], [-69, -20], [-254, -16], [-156, 21], [-173, -11], [-152, -14], [-61, -1], [-54, 22], [-62, 3], [-80, -9], [-20, -4], [-46, 42], [-39, 66], [-28, 67], [64, 71], [-51, 86], [-57, 46], [-5, 43], [97, 49], [28, 28], [-37, 50], [-45, 35], [-27, 58], [47, 36], [6, 32], [-13, 23], [-43, 19], [-12, 20], [-3, 23], [50, 9], [18, 20], [-22, 15], [-24, 27], [-15, 47], [-4, 31], [56, 52], [-16, 43], [-34, 27], [-3, 32], [7, 23], [17, 32], [-6, 51], [-15, 43], [-23, 23], [-34, 27], [-72, 18], [-12, -5], [-15, -4], [-29, -11], [-5, -4], [-21, -4], [-13, -4], [-16, -8], [-22, -20], [-5, -5], [-9, -4], [-9, -7], [-40, -25], [-33, -19], [-21, -12], [-20, -17], [-20, -19], [-13, -25], [-16, -15], [-15, -10], [-14, -7], [-93, 34], [-69, -18], [-38, -13], [-45, -5], [-74, -8], [19, -20], [-34, 9], [-87, 34], [-34, 45], [-52, 48], [0, 5], [-105, 119], [-178, 168], [104, 50], [143, 66], [1, -12], [203, 110], [-16, 5], [-89, 43], [-65, 35], [-56, 34], [-30, 21], [-19, 21], [-9, 24], [-3, 43], [-3, 32], [-1, 13], [3, 9], [6, 10], [4, 10], [90, -11], [4, -3], [33, -4], [-14, 5], [26, -3], [25, -2], [104, -5], [46, -2], [6, 12], [-35, 13], [-30, 9], [-3, -2], [-50, 4], [-29, 13], [-5, 19], [-10, 7], [-17, 6], [-49, 11], [-4, 3], [-2, 9], [2, 3], [-5, 7], [2, 2], [13, 6], [9, 12], [-3, 3], [-21, 6], [-5, 7], [-8, 5], [7, 14], [0, 8], [-2, 8], [-12, 31], [-1, 24], [-6, 15], [-20, 25], [-2, 8], [3, 20], [5, 6], [19, 31], [-1, 6], [-12, 21], [-7, 2], [-3, 5], [-1, 8], [-15, 14], [-10, 4], [-4, 4], [-4, 18], [1, 10], [-2, 3], [-19, 6], [-10, 5], [-35, 7], [-14, 7], [-25, 7], [-25, 8], [-20, 7], [-18, 11], [-17, 12], [-16, 8], [-16, 4], [-23, 2], [-15, 1], [-9, 3], [13, 12], [10, 17], [4, 12], [1, 18], [2, 6], [13, 10], [-11, 12], [6, 10], [-2, 17], [8, 7], [17, 13], [35, 16], [11, 7], [-2, 13], [10, 9], [9, 10], [1, 7], [-3, 8], [7, 11], [19, 15], [12, 9], [17, 8], [13, 10], [0, 5], [-3, 9], [-19, 18], [-19, 4], [-43, 5], [-32, 1], [-8, 4], [4, 7], [21, 28], [18, 23], [8, 3], [15, 3], [23, 8], [12, 10], [2, 14], [-11, 7], [0, 10], [-4, 7], [-5, 2], [-2, 9], [-4, 5], [9, 6], [18, 6], [8, 5], [6, 7], [5, 12], [-2, 10], [-13, 24], [0, 12], [5, 12], [11, 17], [28, 21], [2, 5], [-7, 8], [0, 4], [-7, 6], [-2, 5], [-15, 2], [-1, 4], [15, 12], [-3, 9], [-13, 7], [11, 14], [-2, 3], [10, 7], [13, 17], [6, 9], [8, 4], [2, 4], [9, 7], [1, 8], [4, 5], [11, 4], [17, 2], [-2, 3], [10, 5], [27, -8], [16, -4], [26, -3], [13, 0], [11, 2], [5, 3], [1, 6], [-13, 15], [-25, 11], [-42, 11], [1, 12], [-2, 31], [-16, 30], [-40, 28], [-52, 18], [-33, 9], [-9, 8], [-33, 46], [-27, 17], [-23, 6], [-14, 0], [-33, -1], [-15, 2], [-31, 12], [-10, 16], [-7, 23], [-2, 31], [-8, 15], [-35, 21], [-54, 13], [-54, 3], [-94, -2], [-106, -5], [-11, -2], [-19, 4], [-7, 6], [-6, 2], [-24, 2], [-20, 8], [-12, 0], [-25, -1], [-11, -3], [-33, -3], [-17, -5], [-18, -2], [-14, -6], [-10, -2], [-6, -4], [-22, -1], [-11, -3], [-17, -4], [-52, -6], [-15, -4], [-28, -4], [-14, -1], [-22, -7], [-13, 0], [-9, -4], [-18, -1], [-12, -5], [-17, -4], [-22, -4], [-35, -3], [-15, -2], [-6, -5], [-15, -2], [-11, -4], [-5, -6], [-4, -7], [-6, -3], [-19, -3], [-14, -6], [-13, -4], [-7, -3], [-24, -4], [-8, -6], [-44, -4], [-10, -4], [-30, -2], [-16, 0], [-11, -5], [-20, -1], [-23, -3], [-19, -1], [-31, -2], [-53, 1], [-22, -2], [-11, 1], [-27, 6], [67, -62], [59, -53], [61, -55], [-9, -1], [-11, 3], [-22, 8], [-40, 5], [-7, 0], [-3, 2], [-8, -8], [-8, -6], [2, -8], [12, -7], [3, -4], [-9, -11], [-20, -4], [-17, -5], [-32, -4], [-21, -4], [-25, -2], [-36, -3], [-34, -5], [-15, -1], [-47, -5], [-45, 1], [-25, 2], [-32, 0], [-40, 0], [-17, 1], [-50, -10], [-71, 0], [-5, 4], [-33, -3], [-15, 2], [-12, -2], [-178, -2], [-20, -2], [-28, -1], [-41, 0], [-84, -2], [-29, 0], [-27, 3], [-48, 2], [-17, -1], [-45, -6], [-29, 0]]]
		}				
							
		Null tile: {"type": "FeatureCollection","features":[]}					
		 */
		
		JSONArray geoJsonFeatures = new JSONArray();	 
		JSONArray geometries;
		
		JSONObject objects = tileTopoJson.optJSONObject("objects");
		if (objects != null) {
			JSONObject collection = objects.optJSONObject("collection");
			if (collection != null) {
				geometries = collection.optJSONArray("geometries");
				if (geometries != null) {
					
					GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory(null);
					GeometryJSON geoJSONWriter = new GeometryJSON();
					
					ArrayList<String> areaIdList = new ArrayList<String>();
					JSONObject bboxJsonProperties = null;
					HashMap<String, JSONObject> propertiesHash = new HashMap<String, JSONObject>();
					int processedCount=0;
					
					for (int i=0; i<geometries.length(); i++) {
						
						JSONObject jsonGeometry=geometries.getJSONObject(i);
						JSONObject properties=jsonGeometry.optJSONObject("properties");		
						if (i == 0) {
							bboxJsonProperties=jsonGeometry.optJSONObject("properties");
						}
						// Add bounding box as geoJSON feature so we can see the boundary of the tile	
					
						if (properties != null) {			
							String areaId = properties.getString("area_id");
							areaIdList.add(areaId);
							propertiesHash.put(areaId, properties);	
						}
						else {
							List<String> jsonGeometryList = IteratorUtils.toList(jsonGeometry.keys());
							String jsonGeometryText = String.join(", ", jsonGeometryList);
							throw new JSONException("TopoJSON Object[\"properties\"] not found; keys: " + jsonGeometryText);
						}

						if (i % 1000 == 0) { // Process in blocks of 1000
							processedCount+=processGeoJsonArrayList(connection, zoomlevel, geoLevel, myGeometryTable, 
								areaIdList, geoJsonFeatures, propertiesHash, geometryFactory, geoJSONWriter,
								minZoomlevel, maxZoomlevel);
							
							areaIdList.clear();
							propertiesHash.clear();
						}
						
					} // End of for loop
					
					processedCount+=processGeoJsonArrayList(connection, zoomlevel, geoLevel, myGeometryTable, areaIdList, 
						geoJsonFeatures, propertiesHash, geometryFactory, geoJSONWriter,
						minZoomlevel, maxZoomlevel);
					if (processedCount != geoJsonFeatures.length()) {
						throw new JSONException("Error processing GoeJSON features; expecting: " + geoJsonFeatures.length() + "; got: " + processedCount);
					}
					else if (processedCount != geometries.length()) {
						throw new JSONException("Error processing geometries; expecting: " + geometries.length() + "; got: " + processedCount);
					}
					else {
						rifLogger.info(getClass(), "Processed: " + geometries.length() + " geometries" +
							"; geoJsonFeatures: " + geoJsonFeatures.length() +
							"; areaIds: " + processedCount);
					}
					
					if (addBoundingBoxToTile && bboxJsonProperties != null) {
						geoJsonFeatures.put(createGeoJsonBboxFeature(bboxJson, bboxJsonProperties));
					}
						
				}
				else {
					throw new JSONException("TopoJSON Array[\"geometries\"] not found");
				}				
			}
			else {
				List<String> collectionList = IteratorUtils.toList(collection.keys());
				String collectionText = String.join(", ", collectionList);
				throw new JSONException("TopoJSON Object[\"objects\"] not found; keys: " + collectionText);
			}
		}
		else {
			List<String> tileTopoJsonList = IteratorUtils.toList(tileTopoJson.keys());
			String tileTopoJsonText = String.join(", ", tileTopoJsonList);
			throw new JSONException("TopoJSON Object[\"objects\"] not found; keys: " + tileTopoJsonText);
		}
		
		JSONObject tileGeoJson = new JSONObject();
		tileGeoJson.put("type", "FeatureCollection");
		tileGeoJson.put("features", cleanGeoJsonFeatures(geoJsonFeatures, geography, zoomlevel, geoLevel, x, y));
		
		if (addBoundingBoxToTile) {
			cacheTile(tileGeoJson, null /* pngTileStream */, geography.toLowerCase(), zoomlevel, geoLevel.toLowerCase(), x, y, "json");
		}
		return tileGeoJson;
	}
	
	/* 
	 * Function:	cleanGeoJsonFeatures()
	 * Description:	Clean array of GeoJSON features removing everything that is not a polygon: points and line strings, e.g.
	 * 				{
	 * 					"features": [{
	 * 							"geometry": {
	 * 								"geometries": [{
	 * 										"coordinates": [[[-5.7756, 56.4975], [-5.7746, 56.4976], [-5.7752, 56.4981], [-5.7756, 56.4975]]],
	 * 										"type": "Polygon"
	 * 									}, {
	 * 										"coordinates": [-5.8659, 56.3528],
	 * 										"type": "Point"
	 * 									}, {
	 * 										"coordinates": [[[-5.9823, 56.5626], [-5.982, 56.5621], [-5.9805, 56.5622], [-5.9814, 56.5627], [-5.9823, 56.5626]]],
	 * 										"type": "Polygon"
	 * 									}, {
	 *				...
	 *
	 * or:
	 *
	 * 						}, {
	 *							"geometry": {
	 *								"coordinates": [[[[-4.774, 56.5379], [-4.7733, 56.5376], [-4.773, 56.5378], [-4.774, 56.5379]]], [[[-4.7993, 56.5381], [-4.7987, 56.5377], [-4.7979, 56.5376], [-4.7984, 56.5381], [-4.7993, 56.5381]]], [[[-5.0237, 56.4068], [-5.0235, 56.4065], [-5.022, 56.4065], [-5.0214, 56.4067], [-5.0208, 56.4075], [-5.0213, 56.4076], [-5.0237, 56.4068]]], [[[-5.0252, 56.4062], [-5.0245, 56.4061], [-5.0242, 56.4063], [-5.0252, 56.4062]]], [[[-5.0307, 56.4014], [-5.0288, 56.4015], [-5.0284, 56.4018], [-5.0301, 56.402], [-5.0307, 56.4014]]], [[[-5.0653, 56.3821], [-5.0648, 56.3818], [-5.0632, 56.3823], [-5.063, 56.383], [-5.0637, 56.3835], [-5.0646, 56.3834], [-5.0643, 56.3827], [-5.0653, 56.3821]]], [[[-5.066, 56.3803], [-5.0656, 56.3799], [-5.0637, 56.3814], [-5.0654, 56.3812], [-5.0656, 56.3805], [-5.066, 56.3803]]], [[[-5.0814, 56.3706], [-5.0811, 56.3702], [-5.0804, 56.3703], [-5.08, 56.3705], [-5.0806, 56.3708], [-5.0814, 56.3706]]], [[[-5.0817, 56.3726], [-5.0807, 56.3725], [-5.0806, 56.3728], [-5.0817, 56.3726]]], [[[-5.0829, 56.3714], [-5.0823, 56.371], [-5.0798, 56.3712], [-5.0801, 56.3718], [-5.0821, 56.3718], [-5.0829, 56.3714]]], [[[-5.0832, 56.3735], [-5.0815, 56.3737], [-5.0805, 56.3733], [-5.0796, 56.3732], [-5.0789, 56.3728], [-5.0786, 56.372], [-5.0781, 56.3719], [-5.0783, 56.3728], [-5.078, 56.3736], [-5.0776, 56.3737], [-5.076, 56.3736], [-5.0741, 56.3742], [-5.0735, 56.3749], [-5.0735, 56.3753], [-5.0745, 56.3757], [-5.0765, 56.3757], [-5.077, 56.3757], [-5.0798, 56.3752], [-5.0808, 56.3747], [-5.0821, 56.3749], [-5.0828, 56.3747], [-5.0832, 56.3735]]], [[[-5.0855, 56.3708], [-5.0842, 56.3709], [-5.0834, 56.3713], [-5.0844, 56.3714], [-5.0855, 56.3708]]], [[[-5.0875, 56.377], [-5.0871, 56.3766], [-5.0857, 56.3769], [-5.0863, 56.3772], [-5.0875, 56.377]]], [[[-5.1215, 56.3524], [-5.1196, 56.3526], [-5.1194, 56.3531], [-5.1206, 56.3533], [-5.1215, 56.3524]]], [[[-5.1906, 56.3412], [-5.1898, 56.3403], [-5.1893, 56.3405], [-5.188, 56.3405], [-5.1882, 56.3412], [-5.19, 56.3411], [-5.1906, 56.3412]]], [[[-5.2685, 56.2566], [-5.2683, 56.2563], [-5.2669, 56.2567], [-5.2665, 56.2573], [-5.2671, 56.2572], [-5.2685, 56.2566]]], [[[-5.2729, 56.2543], [-5.2723, 56.254], [-5.2715, 56.2543], [-5.272, 56.2545], [-5.2729, 56.2543]]], [[[-5.2751, 56.2481], [-5.2734, 56.2477], [-5.2725, 56.2489], [-5.2729, 56.2492], [-5.2734, 56.2493], [-5.2747, 56.2489], [-5.2751, 56.2481]]], [[[-5.3199, 56.2203], [-5.3189, 56.2208], [-5.3181, 56.2208], [-5.3186, 56.2211], [-5.3179, 56.2213], [-5.3176, 56.2219], [-5.3167, 56.2222], [-5.3159, 56.2227], [-5.3165, 56.2227], [-5.3184, 56.2217], [-5.3199, 56.2206], [-5.3199, 56.2203]]], [[[-5.3667, 56.2703], [-5.3661, 56.2703], [-5.3661, 56.2707], [-5.3667, 56.2703]]], [[[-5.3762, 56.1445], [-5.3724, 56.1424], [-5.3717, 56.1419], [-5.3645, 56.1416], [-5.3626, 56.1401], [-5.3609, 56.1391], [-5.3551, 56.1387], [-5.3504, 56.1377], [-5.3475, 56.1353], [-5.3449, 56.134], [-5.3414, 56.131], [-5.3401, 56.1295], [-5.3401, 56.1281], [-5.3424, 56.1246], [-5.3469, 56.1175], [-5.3445, 56.116], [-5.3414, 56.1161], [-5.3364, 56.1187], [-5.3288, 56.1188], [-5.3267, 56.1149], [-5.3254, 56.1127], [-5.3188, 56.1146], [-5.3165, 56.115], [-5.3108, 56.1161], [-5.3118, 56.1194], [-5.3105, 56.1203], [-5.3102, 56.1213], [-5.3089, 56.1219], [-5.3051, 56.123], [-5.3035, 56.1253], [-5.2964, 56.1266], [-5.2957, 56.1276], [-5.2938, 56.129], [-5.2909, 56.131], [-5.2908, 56.1335], [-5.2896, 56.1374], [-5.2854, 56.1388], [-5.2828, 56.141], [-5.2804, 56.142], [-5.282, 56.1447], [-5.281, 56.1462], [-5.2861, 56.1489], [-5.2779, 56.1514], [-5.2725, 56.1551], [-5.2665, 56.1597], [-5.2614, 56.1628], [-5.2579, 56.1651], [-5.2567, 56.1673], [-5.2522, 56.1699], [-5.2439, 56.1739], [-5.2412, 56.1757], [-5.242, 56.1775], [-5.241, 56.1787], [-5.2425, 56.1797], [-5.2452, 56.1809], [-5.2472, 56.1816], [-5.2527, 56.1813], [-5.258, 56.1819], [-5.2637, 56.1787], [-5.2651, 56.1785], [-5.2667, 56.1799], [-5.2684, 56.1806], [-5.2687, 56.1814], [-5.2661, 56.1833], [-5.2647, 56.185], [-5.2644, 56.1876], [-5.2624, 56.1877], [-5.2615, 56.1868], [-5.2586, 56.1878], [-5.256, 56.1866], [-5.2518, 56.1889], [-5.2502, 56.1898], [-5.2435, 56.193], [-5.2378, 56.1973], [-5.2335, 56.1982], [-5.2273, 56.2015], [-5.2258, 56.2032], [-5.226, 56.2095], [-5.2209, 56.2152], [-5.217, 56.2179], [-5.218, 56.2185], [-5.2067, 56.2244], [-5.2021, 56.2282], [-5.1991, 56.2309], [-5.1997, 56.2321], [-5.1993, 56.2348], [-5.1959, 56.2363], [-5.19, 56.2413], [-5.1824, 56.2465], [-5.1794, 56.2515], [-5.1759, 56.2548], [-5.1725, 56.2591], [-5.163, 56.2629], [-5.1647, 56.2652], [-5.1709, 56.2675], [-5.1697, 56.2691], [-5.1602, 56.2681], [-5.1553, 56.2694], [-5.157, 56.273], [-5.1522, 56.2727], [-5.1507, 56.2775], [-5.1374, 56.301], [-5.137, 56.3015], [-5.1394, 56.3045], [-5.1337, 56.3067], [-5.1324, 56.3106], [-5.1364, 56.3118], [-5.1352, 56.3168], [-5.14, 56.3232], [-5.134, 56.3294], [-5.13, 56.333], [-5.1329, 56.3335], [-5.131, 56.3363], [-5.126, 56.3364], [-5.1129, 56.338], [-5.1073, 56.3402], [-5.1056, 56.3411], [-5.1022, 56.3403], [-5.0926, 56.3406], [-5.0832, 56.3449], [-5.0753, 56.3437], [-5.0748, 56.3417], [-5.0716, 56.3431], [-5.0661, 56.3402], [-5.0583, 56.3432], [-5.0518, 56.3391], [-5.0476, 56.3374], [-5.0396, 56.3383], [-5.034, 56.3352], [-5.0302, 56.3364], [-5.0215, 56.3351], [-5.017, 56.3379], [-5.0157, 56.3372], [-5.0108, 56.3368], [-5.0068, 56.3426], [-5.0011, 56.3457], [-4.9931, 56.3453], [-4.9893, 56.3431], [-4.9857, 56.3399], [-4.9777, 56.3402], [-4.975, 56.339], [-4.9679, 56.3424], [-4.965, 56.3413], [-4.961, 56.3419], [-4.9558, 56.3453], [-4.9477, 56.3455], [-4.9418, 56.3452], [-4.9335, 56.3473], [-4.9263, 56.3461], [-4.9173, 56.3447], [-4.904, 56.3467], [-4.89, 56.3499], [-4.8819, 56.3537], [-4.8864, 56.3565], [-4.8916, 56.3593], [-4.8957, 56.3601], [-4.8947, 56.3633], [-4.8908, 56.3649], [-4.8846, 56.3647], [-4.8743, 56.3676], [-4.8695, 56.3709], [-4.8662, 56.3698], [-4.8623, 56.3724], [-4.8566, 56.3751], [-4.8541, 56.3709], [-4.8514, 56.3724], [-4.8484, 56.3738], [-4.8466, 56.3744], [-4.8453, 56.3752], [-4.8409, 56.376], [-4.8392, 56.3765], [-4.8367, 56.3766], [-4.8342, 56.3781], [-4.8336, 56.3788], [-4.8341, 56.3795], [-4.8333, 56.3812], [-4.8346, 56.3826], [-4.8352, 56.3845], [-4.8351, 56.3851], [-4.8354, 56.3861], [-4.8359, 56.3871], [-4.8357, 56.3888], [-4.8352, 56.3901], [-4.8345, 56.3901], [-4.8321, 56.3908], [-4.8281, 56.3925], [-4.8274, 56.3926], [-4.8244, 56.3935], [-4.8212, 56.3945], [-4.8164, 56.3966], [-4.8138, 56.3976], [-4.8127, 56.3981], [-4.8143, 56.3986], [-4.8162, 56.3999], [-4.8172, 56.4016], [-4.8174, 56.4029], [-4.8167, 56.4038], [-4.8173, 56.4047], [-4.8159, 56.4048], [-4.8154, 56.4054], [-4.8164, 56.4061], [-4.8138, 56.4066], [-4.8121, 56.4073], [-4.8118, 56.4085], [-4.8142, 56.4083], [-4.8149, 56.4105], [-4.8145, 56.4141], [-4.8132, 56.4164], [-4.8117, 56.4176], [-4.8109, 56.4177], [-4.8082, 56.4174], [-4.8074, 56.4171], [-4.8038, 56.4163], [-4.8016, 56.4164], [-4.7986, 56.4168], [-4.7981, 56.4172], [-4.7977, 56.4186], [-4.7969, 56.4202], [-4.7967, 56.421], [-4.7952, 56.4227], [-4.7935, 56.4233], [-4.7918, 56.4235], [-4.7896, 56.424], [-4.7914, 56.4257], [-4.7909, 56.4265], [-4.7899, 56.4273], [-4.7839, 56.4273], [-4.7816, 56.427], [-4.7799, 56.4282], [-4.7763, 56.429], [-4.7738, 56.4297], [-4.7733, 56.4301], [-4.7718, 56.4303], [-4.7709, 56.4305], [-4.7695, 56.4314], [-4.7686, 56.4317], [-4.766, 56.4321], [-4.7646, 56.432], [-4.7666, 56.4339], [-4.7669, 56.4351], [-4.7683, 56.4358], [-4.7685, 56.4362], [-4.7681, 56.4365], [-4.7664, 56.4362], [-4.7639, 56.436], [-4.7614, 56.4357], [-4.7602, 56.4362], [-4.7592, 56.4363], [-4.7576, 56.4366], [-4.7554, 56.4365], [-4.7529, 56.4371], [-4.75, 56.4365], [-4.7465, 56.4355], [-4.7441, 56.4355], [-4.7431, 56.435], [-4.7403, 56.4345], [-4.7399, 56.4341], [-4.7386, 56.4341], [-4.737, 56.4338], [-4.7355, 56.4338], [-4.7342, 56.434], [-4.7331, 56.4345], [-4.7319, 56.436], [-4.7307, 56.4364], [-4.73, 56.4376], [-4.7283, 56.4394], [-4.7273, 56.4403], [-4.7263, 56.4408], [-4.7231, 56.4464], [-4.7241, 56.4498], [-4.7268, 56.4518], [-4.729, 56.4531], [-4.7333, 56.4549], [-4.7312, 56.4561], [-4.7304, 56.4561], [-4.7299, 56.4569], [-4.7289, 56.4577], [-4.7278, 56.4579], [-4.7272, 56.4585], [-4.7269, 56.4592], [-4.7261, 56.4596], [-4.7249, 56.4599], [-4.722, 56.4589], [-4.7208, 56.4587], [-4.7197, 56.4589], [-4.7184, 56.459], [-4.7162, 56.4593], [-4.7128, 56.46], [-4.7119, 56.4604], [-4.7049, 56.4618], [-4.7042, 56.4621], [-4.7032, 56.4628], [-4.7026, 56.4635], [-4.7019, 56.4652], [-4.7006, 56.4663], [-4.7001, 56.4674], [-4.6958, 56.4655], [-4.6957, 56.465], [-4.6945, 56.4652], [-4.6935, 56.465], [-4.6927, 56.464], [-4.6915, 56.4631], [-4.6893, 56.4623], [-4.6886, 56.4623], [-4.6872, 56.4631], [-4.6865, 56.4632], [-4.6844, 56.4627], [-4.6789, 56.4618], [-4.6754, 56.4614], [-4.6734, 56.4613], [-4.6712, 56.4614], [-4.6665, 56.4615], [-4.6655, 56.4601], [-4.6653, 56.4611], [-4.6644, 56.4625], [-4.664, 56.4639], [-4.6621, 56.4667], [-4.6619, 56.4678], [-4.6608, 56.4693], [-4.6592, 56.4697], [-4.6587, 56.4704], [-4.6574, 56.4717], [-4.6554, 56.473], [-4.6518, 56.4736], [-4.6491, 56.4737], [-4.6462, 56.4733], [-4.6449, 56.4733], [-4.6431, 56.4736], [-4.6391, 56.476], [-4.6409, 56.477], [-4.642, 56.4767], [-4.643, 56.4767], [-4.6456, 56.4774], [-4.6486, 56.479], [-4.6517, 56.4792], [-4.6551, 56.4792], [-4.6576, 56.479], [-4.6615, 56.4791], [-4.6645, 56.4795], [-4.6687, 56.4798], [-4.6705, 56.4797], [-4.6712, 56.48], [-4.6732, 56.4816], [-4.6734, 56.4819], [-4.6749, 56.4822], [-4.6757, 56.4829], [-4.6767, 56.4829], [-4.6781, 56.4832], [-4.6792, 56.4838], [-4.6802, 56.4848], [-4.6825, 56.4865], [-4.6828, 56.4873], [-4.6827, 56.4885], [-4.6829, 56.4895], [-4.6839, 56.49], [-4.6862, 56.4906], [-4.6839, 56.4917], [-4.6823, 56.4923], [-4.6805, 56.4944], [-4.6801, 56.4953], [-4.6779, 56.4967], [-4.6773, 56.4977], [-4.677, 56.4986], [-4.6766, 56.499], [-4.6761, 56.5001], [-4.6743, 56.5008], [-4.6728, 56.5016], [-4.6715, 56.5022], [-4.6657, 56.5053], [-4.6652, 56.5065], [-4.6639, 56.508], [-4.6631, 56.5086], [-4.6614, 56.5095], [-4.6601, 56.51], [-4.6586, 56.5105], [-4.6581, 56.5111], [-4.6588, 56.5119], [-4.656, 56.5138], [-4.654, 56.5174], [-4.6537, 56.5182], [-4.6526, 56.5187], [-4.6526, 56.5193], [-4.6536, 56.5199], [-4.6547, 56.5232], [-4.6541, 56.5235], [-4.6543, 56.5241], [-4.6541, 56.5251], [-4.6537, 56.5253], [-4.6537, 56.526], [-4.655, 56.5283], [-4.6558, 56.5295], [-4.6565, 56.53], [-4.657, 56.5311], [-4.6586, 56.5322], [-4.6595, 56.5345], [-4.6613, 56.5341], [-4.6626, 56.5337], [-4.666, 56.5331], [-4.6675, 56.5322], [-4.6682, 56.5332], [-4.6707, 56.5352], [-4.6722, 56.536], [-4.6732, 56.5363], [-4.6769, 56.5381], [-4.6786, 56.5391], [-4.681, 56.5399], [-4.6837, 56.54], [-4.685, 56.5396], [-4.6876, 56.5393], [-4.6886, 56.5393], [-4.6908, 56.5397], [-4.692, 56.5398], [-4.694, 56.5404], [-4.6967, 56.5408], [-4.6979, 56.5413], [-4.699, 56.543], [-4.6992, 56.5435], [-4.6989, 56.5451], [-4.6986, 56.5454], [-4.6981, 56.5467], [-4.6981, 56.5472], [-4.6974, 56.5479], [-4.6977, 56.5486], [-4.6976, 56.55], [-4.6961, 56.5512], [-4.6955, 56.5515], [-4.6919, 56.553], [-4.6901, 56.5526], [-4.6889, 56.5521], [-4.687, 56.5523], [-4.6859, 56.5527], [-4.6821, 56.5532], [-4.6819, 56.5541], [-4.6801, 56.5544], [-4.6794, 56.5547], [-4.6767, 56.5553], [-4.6762, 56.5557], [-4.674, 56.556], [-4.6715, 56.5573], [-4.67, 56.5584], [-4.668, 56.5594], [-4.6632, 56.5613], [-4.6613, 56.5623], [-4.6603, 56.5623], [-4.6581, 56.5616], [-4.6568, 56.5622], [-4.6548, 56.5613], [-4.654, 56.5612], [-4.6488, 56.5612], [-4.6488, 56.562], [-4.6481, 56.5629], [-4.646, 56.5645], [-4.6426, 56.5668], [-4.6411, 56.5677], [-4.6414, 56.568], [-4.6392, 56.568], [-4.6321, 56.5681], [-4.6283, 56.5685], [-4.627, 56.5687], [-4.6253, 56.5695], [-4.6244, 56.5697], [-4.621, 56.5698], [-4.6185, 56.5701], [-4.617, 56.5703], [-4.6145, 56.5704], [-4.6131, 56.5699], [-4.6125, 56.5701], [-4.6128, 56.5708], [-4.6121, 56.5718], [-4.6112, 56.5721], [-4.6099, 56.5719], [-4.6066, 56.5719], [-4.6062, 56.5725], [-4.6048, 56.5736], [-4.6036, 56.5741], [-4.6026, 56.5748], [-4.6019, 56.5756], [-4.6006, 56.5761], [-4.5995, 56.5767], [-4.5968, 56.5751], [-4.596, 56.5745], [-4.5935, 56.5743], [-4.5923, 56.5744], [-4.5902, 56.5749], [-4.5884, 56.5745], [-4.5876, 56.574], [-4.5861, 56.5732], [-4.5845, 56.5733], [-4.5818, 56.5723], [-4.5809, 56.5717], [-4.5797, 56.5718], [-4.5774, 56.5712], [-4.576, 56.5712], [-4.574, 56.5715], [-4.5707, 56.5721], [-4.5689, 56.5719], [-4.5677, 56.572], [-4.5638, 56.5714], [-4.5618, 56.5702], [-4.5606, 56.5717], [-4.5599, 56.5731], [-4.5677, 56.5751], [-4.5702, 56.5761], [-4.5708, 56.5766], [-4.5711, 56.5774], [-4.5712, 56.5784], [-4.5706, 56.5792], [-4.5728, 56.579], [-4.5737, 56.5811], [-4.5747, 56.5819], [-4.576, 56.5884], [-4.5827, 56.5945], [-4.583, 56.5948], [-4.5861, 56.5997], [-4.5973, 56.6043], [-4.599, 56.6057], [-4.6088, 56.614], [-4.6096, 56.6147], [-4.6103, 56.615], [-4.6164, 56.6161], [-4.6178, 56.6159], [-4.619, 56.6162], [-4.6214, 56.6162], [-4.6229, 56.616], [-4.6233, 56.6158], [-4.6245, 56.6157], [-4.6254, 56.6154], [-4.6264, 56.6156], [-4.6277, 56.6149], [-4.6286, 56.6149], [-4.6316, 56.6142], [-4.633, 56.6133], [-4.6344, 56.6132], [-4.636, 56.6138], [-4.6391, 56.6142], [-4.64, 56.6141], [-4.6403, 56.6136], [-4.6412, 56.6135], [-4.6425, 56.6144], [-4.6434, 56.6145], [-4.6559, 56.6128], [-4.6575, 56.6126], [-4.658, 56.6122], [-4.6591, 56.612], [-4.6594, 56.6116], [-4.6604, 56.6117], [-4.6631, 56.6114], [-4.6632, 56.611], [-4.6658, 56.6102], [-4.6663, 56.6098], [-4.6674, 56.6096], [-4.6684, 56.6097], [-4.6694, 56.6095], [-4.6698, 56.6092], [-4.6717, 56.6088], [-4.6727, 56.6085], [-4.6729, 56.6076], [-4.6733, 56.6074], [-4.6756, 56.6055], [-4.6762, 56.6056], [-4.6784, 56.6051], [-4.6803, 56.6042], [-4.68, 56.6038], [-4.6808, 56.6036], [-4.6818, 56.6028], [-4.6829, 56.6025], [-4.6831, 56.602], [-4.6838, 56.6019], [-4.6842, 56.6012], [-4.686, 56.601], [-4.6869, 56.6006], [-4.6877, 56.6007], [-4.689, 56.6015], [-4.6897, 56.6016], [-4.6902, 56.602], [-4.6917, 56.6023], [-4.6931, 56.6021], [-4.6941, 56.6017], [-4.695, 56.602], [-4.6953, 56.6026], [-4.6973, 56.6033], [-4.6988, 56.6037], [-4.7007, 56.6038], [-4.7013, 56.605], [-4.7022, 56.6056], [-4.7025, 56.6048], [-4.7033, 56.6043], [-4.7033, 56.6033], [-4.7041, 56.6031], [-4.7045, 56.6026], [-4.7041, 56.602], [-4.7051, 56.601], [-4.7053, 56.6005], [-4.7048, 56.6004], [-4.7045, 56.5999], [-4.7049, 56.5995], [-4.7041, 56.5992], [-4.7043, 56.5988], [-4.7036, 56.5984], [-4.7081, 56.5972], [-4.7085, 56.5969], [-4.7097, 56.5965], [-4.7122, 56.5968], [-4.7129, 56.5968], [-4.7139, 56.5954], [-4.7151, 56.5949], [-4.7164, 56.5947], [-4.7171, 56.5941], [-4.718, 56.5938], [-4.7179, 56.5931], [-4.719, 56.5922], [-4.721, 56.5914], [-4.7247, 56.589], [-4.7262, 56.5878], [-4.7341, 56.5874], [-4.7472, 56.5866], [-4.7474, 56.5862], [-4.7486, 56.5856], [-4.7503, 56.5851], [-4.7516, 56.5852], [-4.7526, 56.5855], [-4.7541, 56.5847], [-4.7549, 56.5847], [-4.7579, 56.5856], [-4.7595, 56.5856], [-4.7638, 56.5853], [-4.7661, 56.5865], [-4.7676, 56.5863], [-4.7698, 56.5865], [-4.7727, 56.588], [-4.7745, 56.5885], [-4.7785, 56.588], [-4.7804, 56.5876], [-4.7809, 56.5859], [-4.7817, 56.585], [-4.7814, 56.5841], [-4.7819, 56.583], [-4.7833, 56.5822], [-4.7851, 56.5817], [-4.787, 56.5813], [-4.7881, 56.5809], [-4.7895, 56.58], [-4.7916, 56.579], [-4.793, 56.5785], [-4.7949, 56.5781], [-4.7959, 56.5778], [-4.7975, 56.5767], [-4.7986, 56.5758], [-4.8001, 56.5742], [-4.8011, 56.5736], [-4.8024, 56.5732], [-4.8066, 56.5723], [-4.8087, 56.5722], [-4.8112, 56.5725], [-4.817, 56.5741], [-4.8181, 56.5741], [-4.8204, 56.5728], [-4.8208, 56.572], [-4.8225, 56.5713], [-4.8235, 56.5713], [-4.8268, 56.5702], [-4.8281, 56.5696], [-4.8294, 56.5696], [-4.83, 56.5692], [-4.8308, 56.5695], [-4.8319, 56.5693], [-4.833, 56.5697], [-4.8348, 56.5707], [-4.8357, 56.5707], [-4.838, 56.5726], [-4.8386, 56.5739], [-4.8409, 56.5732], [-4.8424, 56.5726], [-4.8437, 56.5723], [-4.8453, 56.5722], [-4.846, 56.572], [-4.8492, 56.5717], [-4.8525, 56.5717], [-4.8547, 56.5716], [-4.8566, 56.5717], [-4.8601, 56.5709], [-4.8611, 56.5709], [-4.8626, 56.5714], [-4.8636, 56.5712], [-4.8652, 56.5716], [-4.8664, 56.5717], [-4.869, 56.5711], [-4.8696, 56.5704], [-4.8707, 56.5699], [-4.8711, 56.5688], [-4.8711, 56.5676], [-4.8719, 56.5673], [-4.8737, 56.5669], [-4.8758, 56.5662], [-4.8779, 56.566], [-4.8801, 56.5662], [-4.8817, 56.5679], [-4.8832, 56.5686], [-4.8847, 56.5692], [-4.8859, 56.5693], [-4.891, 56.5696], [-4.8958, 56.5697], [-4.8969, 56.5693], [-4.899, 56.5699], [-4.8998, 56.5704], [-4.9007, 56.5706], [-4.9022, 56.5718], [-4.905, 56.5704], [-4.9093, 56.5695], [-4.9102, 56.5697], [-4.913, 56.5699], [-4.9154, 56.5703], [-4.9161, 56.5706], [-4.9184, 56.572], [-4.919, 56.5725], [-4.9224, 56.5733], [-4.9265, 56.5745], [-4.9274, 56.5743], [-4.9284, 56.5753], [-4.9296, 56.5756], [-4.9306, 56.5755], [-4.9318, 56.5751], [-4.9335, 56.5748], [-4.9339, 56.5743], [-4.9351, 56.5745], [-4.9398, 56.5743], [-4.9433, 56.5743], [-4.9448, 56.5744], [-4.9458, 56.5747], [-4.9475, 56.5757], [-4.9494, 56.5735], [-4.9494, 56.5731], [-4.9505, 56.5722], [-4.9509, 56.571], [-4.9517, 56.5701], [-4.9527, 56.5682], [-4.9528, 56.5662], [-4.9529, 56.5656], [-4.9525, 56.565], [-4.9514, 56.5645], [-4.9515, 56.5637], [-4.9521, 56.5634], [-4.9559, 56.5626], [-4.9579, 56.5617], [-4.9589, 56.5614], [-4.9617, 56.561], [-4.9643, 56.5609], [-4.9707, 56.5593], [-4.9712, 56.559], [-4.972, 56.5578], [-4.9712, 56.5546], [-4.9711, 56.5542], [-4.9668, 56.5515], [-4.9633, 56.549], [-4.961, 56.546], [-4.9605, 56.544], [-4.9622, 56.5416], [-4.9632, 56.5389], [-4.962, 56.5362], [-4.9589, 56.5338], [-4.9528, 56.5309], [-4.9488, 56.5303], [-4.9442, 56.5296], [-4.9378, 56.527], [-4.9319, 56.5229], [-4.9275, 56.5206], [-4.9224, 56.5189], [-4.9173, 56.5179], [-4.9109, 56.5175], [-4.9124, 56.5132], [-4.9186, 56.5062], [-4.9175, 56.5032], [-4.9189, 56.5005], [-4.922, 56.4991], [-4.9235, 56.4975], [-4.9253, 56.4968], [-4.9277, 56.4974], [-4.9311, 56.4959], [-4.9328, 56.4952], [-4.9361, 56.493], [-4.9395, 56.4893], [-4.9431, 56.4857], [-4.9471, 56.4838], [-4.9497, 56.4811], [-4.9499, 56.4776], [-4.955, 56.4755], [-4.9591, 56.4724], [-4.9646, 56.4722], [-4.9698, 56.4721], [-4.9737, 56.4721], [-4.9753, 56.4697], [-4.9724, 56.4679], [-4.9725, 56.4651], [-4.9756, 56.4627], [-4.9783, 56.4609], [-4.9835, 56.4598], [-4.987, 56.4618], [-4.9964, 56.4632], [-5.0021, 56.4614], [-5.0083, 56.4603], [-5.0107, 56.4569], [-5.0157, 56.4552], [-5.0216, 56.4533], [-5.0288, 56.4504], [-5.0329, 56.4515], [-5.0384, 56.4498], [-5.0456, 56.4477], [-5.0505, 56.4479], [-5.0548, 56.4464], [-5.0637, 56.4477], [-5.0694, 56.448], [-5.0715, 56.4464], [-5.0729, 56.4436], [-5.0771, 56.4406], [-5.0726, 56.4394], [-5.0645, 56.4375], [-5.0643, 56.4376], [-5.0558, 56.4355], [-5.0486, 56.4331], [-5.0462, 56.4306], [-5.0405, 56.427], [-5.0392, 56.4249], [-5.0346, 56.4225], [-5.046, 56.4223], [-5.0491, 56.4193], [-5.0546, 56.4171], [-5.0597, 56.416], [-5.0768, 56.4137], [-5.0877, 56.4108], [-5.0991, 56.4101], [-5.1091, 56.4128], [-5.1141, 56.4063], [-5.1112, 56.4036], [-5.1131, 56.399], [-5.1145, 56.3957], [-5.115, 56.3949], [-5.1169, 56.3954], [-5.1172, 56.3947], [-5.1163, 56.3944], [-5.116, 56.3942], [-5.1156, 56.394], [-5.1134, 56.3934], [-5.1116, 56.3933], [-5.1084, 56.3924], [-5.1063, 56.3916], [-5.105, 56.3913], [-5.1028, 56.391], [-5.1016, 56.391], [-5.0997, 56.3907], [-5.0991, 56.3904], [-5.0972, 56.3901], [-5.0961, 56.3898], [-5.0916, 56.388], [-5.0899, 56.3871], [-5.0888, 56.387], [-5.0878, 56.3866], [-5.086, 56.3867], [-5.0849, 56.3866], [-5.084, 56.3867], [-5.08, 56.3866], [-5.0784, 56.3868], [-5.077, 56.3867], [-5.0758, 56.3871], [-5.0738, 56.3875], [-5.072, 56.3875], [-5.0708, 56.3882], [-5.0696, 56.3884], [-5.0679, 56.3883], [-5.0672, 56.3884], [-5.0665, 56.3877], [-5.0672, 56.3874], [-5.069, 56.3875], [-5.0696, 56.3866], [-5.0693, 56.3857], [-5.0695, 56.3851], [-5.0691, 56.385], [-5.068, 56.3852], [-5.0678, 56.3855], [-5.0664, 56.3856], [-5.0638, 56.3871], [-5.0628, 56.3881], [-5.063, 56.3888], [-5.0639, 56.3888], [-5.0661, 56.3883], [-5.0672, 56.3884], [-5.0669, 56.3888], [-5.0647, 56.3897], [-5.0621, 56.3906], [-5.0602, 56.3915], [-5.0591, 56.3917], [-5.0586, 56.392], [-5.0549, 56.394], [-5.0531, 56.3956], [-5.0525, 56.3959], [-5.0501, 56.3966], [-5.05, 56.3975], [-5.0489, 56.3981], [-5.0483, 56.3987], [-5.0468, 56.3991], [-5.0453, 56.3999], [-5.0445, 56.4002], [-5.0438, 56.4008], [-5.0416, 56.4015], [-5.0411, 56.4019], [-5.038, 56.4034], [-5.0355, 56.4043], [-5.0339, 56.4054], [-5.0334, 56.4056], [-5.0324, 56.4066], [-5.0312, 56.407], [-5.0307, 56.4074], [-5.0294, 56.4078], [-5.0272, 56.408], [-5.0257, 56.4085], [-5.0241, 56.4092], [-5.0229, 56.4089], [-5.023, 56.4086], [-5.0242, 56.4081], [-5.0254, 56.4079], [-5.0256, 56.4083], [-5.0265, 56.4079], [-5.0254, 56.4077], [-5.0226, 56.4081], [-5.0219, 56.4084], [-5.0202, 56.4077], [-5.0203, 56.4073], [-5.0214, 56.4065], [-5.0235, 56.4063], [-5.0242, 56.406], [-5.0252, 56.4061], [-5.0256, 56.4063], [-5.0265, 56.4063], [-5.0291, 56.4067], [-5.0299, 56.4065], [-5.0312, 56.4052], [-5.0318, 56.4044], [-5.0303, 56.4041], [-5.0291, 56.4036], [-5.0277, 56.4034], [-5.0236, 56.4045], [-5.0213, 56.4047], [-5.0211, 56.4043], [-5.0191, 56.4044], [-5.0193, 56.4041], [-5.0201, 56.404], [-5.0202, 56.4034], [-5.0208, 56.4028], [-5.0214, 56.4017], [-5.023, 56.4017], [-5.023, 56.4023], [-5.0237, 56.4024], [-5.024, 56.4018], [-5.0257, 56.402], [-5.027, 56.4018], [-5.0278, 56.4015], [-5.0284, 56.4004], [-5.0298, 56.4002], [-5.0303, 56.4004], [-5.032, 56.4002], [-5.031, 56.3991], [-5.0322, 56.3991], [-5.0327, 56.3994], [-5.0335, 56.3992], [-5.0337, 56.3988], [-5.0355, 56.3982], [-5.0363, 56.3977], [-5.0381, 56.3972], [-5.0396, 56.3966], [-5.0395, 56.3964], [-5.0419, 56.396], [-5.0419, 56.3954], [-5.0425, 56.395], [-5.0426, 56.3943], [-5.0416, 56.3939], [-5.0417, 56.3933], [-5.0426, 56.3925], [-5.0445, 56.3924], [-5.0457, 56.392], [-5.0467, 56.3925], [-5.0466, 56.3915], [-5.0489, 56.3911], [-5.0498, 56.3907], [-5.0511, 56.3896], [-5.0508, 56.3889], [-5.0521, 56.3891], [-5.0528, 56.3885], [-5.0527, 56.3879], [-5.0521, 56.3878], [-5.0503, 56.388], [-5.049, 56.3877], [-5.0487, 56.3878], [-5.0487, 56.3886], [-5.0477, 56.3885], [-5.0461, 56.3894], [-5.0453, 56.3893], [-5.0439, 56.3886], [-5.0441, 56.3879], [-5.0434, 56.3876], [-5.0429, 56.3868], [-5.0415, 56.3867], [-5.0407, 56.3861], [-5.0383, 56.3857], [-5.0382, 56.3853], [-5.0401, 56.3842], [-5.0411, 56.3841], [-5.0428, 56.3832], [-5.0445, 56.3832], [-5.0453, 56.3827], [-5.046, 56.3817], [-5.0462, 56.381], [-5.046, 56.3802], [-5.0471, 56.3793], [-5.0499, 56.3787], [-5.0504, 56.3788], [-5.051, 56.3785], [-5.0506, 56.3781], [-5.051, 56.3772], [-5.0515, 56.3771], [-5.0518, 56.3765], [-5.0526, 56.3761], [-5.0562, 56.3757], [-5.0568, 56.3749], [-5.0576, 56.3742], [-5.0584, 56.3742], [-5.06, 56.3737], [-5.0614, 56.373], [-5.061, 56.3725], [-5.0612, 56.372], [-5.0605, 56.3713], [-5.0605, 56.3709], [-5.062, 56.3699], [-5.0617, 56.3695], [-5.0605, 56.3689], [-5.0597, 56.3683], [-5.0593, 56.3677], [-5.0607, 56.3674], [-5.0622, 56.3683], [-5.0634, 56.3682], [-5.0642, 56.3685], [-5.0662, 56.3685], [-5.0684, 56.3683], [-5.0697, 56.3681], [-5.0705, 56.3674], [-5.0702, 56.3668], [-5.0709, 56.3667], [-5.07, 56.3663], [-5.0695, 56.3657], [-5.0688, 56.3655], [-5.0674, 56.3658], [-5.0663, 56.3655], [-5.0657, 56.3657], [-5.0651, 56.3664], [-5.0641, 56.3663], [-5.0636, 56.3666], [-5.0626, 56.3665], [-5.0628, 56.366], [-5.0622, 56.3657], [-5.0625, 56.3647], [-5.0636, 56.3645], [-5.0664, 56.3643], [-5.0694, 56.3638], [-5.0707, 56.3635], [-5.0711, 56.3637], [-5.0719, 56.3631], [-5.0739, 56.3629], [-5.0754, 56.3622], [-5.0778, 56.3619], [-5.079, 56.3625], [-5.0803, 56.362], [-5.0806, 56.3615], [-5.0819, 56.3613], [-5.0828, 56.3609], [-5.0831, 56.3604], [-5.0845, 56.3599], [-5.0859, 56.3599], [-5.086, 56.3589], [-5.0874, 56.3585], [-5.0888, 56.3583], [-5.0901, 56.3576], [-5.0914, 56.3576], [-5.0922, 56.3573], [-5.0939, 56.3572], [-5.093, 56.3571], [-5.0933, 56.3566], [-5.0939, 56.3564], [-5.0951, 56.3565], [-5.0968, 56.3564], [-5.098, 56.356], [-5.0989, 56.3558], [-5.1, 56.3552], [-5.1025, 56.3552], [-5.1033, 56.3548], [-5.1042, 56.3548], [-5.1061, 56.3544], [-5.1074, 56.3542], [-5.1091, 56.3548], [-5.1098, 56.3544], [-5.1091, 56.3541], [-5.1097, 56.3536], [-5.1107, 56.3538], [-5.1124, 56.3532], [-5.1125, 56.3535], [-5.1136, 56.3538], [-5.1152, 56.3526], [-5.1163, 56.3522], [-5.1162, 56.3526], [-5.1151, 56.3532], [-5.1151, 56.3538], [-5.1162, 56.3539], [-5.1165, 56.353], [-5.1171, 56.3527], [-5.1177, 56.3533], [-5.119, 56.3531], [-5.119, 56.3525], [-5.1201, 56.3513], [-5.1209, 56.3511], [-5.1226, 56.3512], [-5.1234, 56.351], [-5.125, 56.3513], [-5.1266, 56.351], [-5.1276, 56.3498], [-5.1285, 56.3493], [-5.1287, 56.3476], [-5.1293, 56.3463], [-5.1303, 56.3461], [-5.1308, 56.3453], [-5.1323, 56.345], [-5.1329, 56.3447], [-5.1333, 56.3439], [-5.1338, 56.3438], [-5.1346, 56.3433], [-5.1356, 56.3434], [-5.1367, 56.343], [-5.1383, 56.3434], [-5.1395, 56.343], [-5.141, 56.3432], [-5.142, 56.3429], [-5.144, 56.3425], [-5.1474, 56.342], [-5.1487, 56.3422], [-5.1496, 56.342], [-5.1505, 56.3415], [-5.154, 56.3409], [-5.1561, 56.3405], [-5.1587, 56.3395], [-5.1589, 56.3396], [-5.1608, 56.3395], [-5.1627, 56.3391], [-5.1637, 56.3391], [-5.1682, 56.3378], [-5.1699, 56.338], [-5.1711, 56.3378], [-5.1723, 56.3371], [-5.173, 56.336], [-5.1743, 56.3356], [-5.1756, 56.3357], [-5.1767, 56.335], [-5.1775, 56.3348], [-5.179, 56.3341], [-5.1798, 56.3334], [-5.1799, 56.3329], [-5.1804, 56.3323], [-5.1813, 56.3317], [-5.1827, 56.3312], [-5.1831, 56.3308], [-5.1859, 56.3292], [-5.187, 56.3287], [-5.188, 56.3281], [-5.1881, 56.3277], [-5.1892, 56.3274], [-5.1905, 56.3267], [-5.1914, 56.3265], [-5.1955, 56.3248], [-5.1966, 56.3242], [-5.1989, 56.3232], [-5.1997, 56.3231], [-5.2039, 56.3211], [-5.205, 56.3211], [-5.2064, 56.3205], [-5.2069, 56.3202], [-5.2093, 56.3191], [-5.2113, 56.3187], [-5.2124, 56.3179], [-5.2154, 56.3169], [-5.2179, 56.315], [-5.2179, 56.3146], [-5.219, 56.314], [-5.2201, 56.3129], [-5.2201, 56.312], [-5.2206, 56.3119], [-5.2201, 56.3114], [-5.2204, 56.3105], [-5.2217, 56.3097], [-5.2214, 56.309], [-5.2222, 56.3076], [-5.2218, 56.3068], [-5.2225, 56.3065], [-5.2227, 56.306], [-5.2216, 56.3047], [-5.2211, 56.3044], [-5.2209, 56.3036], [-5.2218, 56.3031], [-5.2207, 56.3027], [-5.2206, 56.3034], [-5.2191, 56.3033], [-5.2187, 56.3027], [-5.2191, 56.3021], [-5.2184, 56.3017], [-5.2178, 56.3019], [-5.2175, 56.3015], [-5.218, 56.3008], [-5.2174, 56.2993], [-5.2171, 56.2992], [-5.2173, 56.2986], [-5.2182, 56.298], [-5.2184, 56.2972], [-5.219, 56.2967], [-5.2191, 56.2959], [-5.2204, 56.295], [-5.2205, 56.2945], [-5.2199, 56.2938], [-5.2201, 56.2931], [-5.222, 56.2914], [-5.2228, 56.2911], [-5.2226, 56.2906], [-5.2251, 56.2889], [-5.2257, 56.2889], [-5.2269, 56.2883], [-5.2266, 56.2873], [-5.2253, 56.287], [-5.2253, 56.2865], [-5.2265, 56.2856], [-5.2263, 56.2852], [-5.2267, 56.2845], [-5.2277, 56.2835], [-5.229, 56.283], [-5.2294, 56.2825], [-5.2297, 56.2815], [-5.2322, 56.2801], [-5.2342, 56.2791], [-5.2344, 56.2789], [-5.2365, 56.2775], [-5.237, 56.2765], [-5.2383, 56.2756], [-5.2383, 56.275], [-5.2387, 56.2748], [-5.2387, 56.274], [-5.2407, 56.2735], [-5.2419, 56.2724], [-5.242, 56.2714], [-5.2413, 56.2711], [-5.2427, 56.2699], [-5.2437, 56.27], [-5.2455, 56.2694], [-5.2468, 56.2697], [-5.2477, 56.2693], [-5.2496, 56.2691], [-5.2494, 56.2696], [-5.2512, 56.2692], [-5.2515, 56.2688], [-5.253, 56.2684], [-5.2534, 56.2689], [-5.2543, 56.2692], [-5.2536, 56.2695], [-5.2541, 56.2697], [-5.2546, 56.2689], [-5.2555, 56.2685], [-5.2572, 56.2682], [-5.2576, 56.2671], [-5.2585, 56.2667], [-5.2576, 56.2666], [-5.2551, 56.2672], [-5.255, 56.2667], [-5.2564, 56.266], [-5.2572, 56.2654], [-5.2584, 56.2649], [-5.2579, 56.2648], [-5.2589, 56.2638], [-5.2581, 56.2639], [-5.2604, 56.2624], [-5.2604, 56.262], [-5.2613, 56.2616], [-5.262, 56.2609], [-5.2626, 56.2607], [-5.263, 56.2602], [-5.2619, 56.2594], [-5.2619, 56.2587], [-5.2625, 56.2581], [-5.2639, 56.2575], [-5.2645, 56.2569], [-5.2665, 56.2563], [-5.2677, 56.2555], [-5.2689, 56.2549], [-5.2695, 56.2534], [-5.2701, 56.2528], [-5.2718, 56.2517], [-5.2722, 56.2513], [-5.2721, 56.2508], [-5.2713, 56.2504], [-5.2716, 56.2497], [-5.271, 56.249], [-5.2723, 56.2484], [-5.2717, 56.2479], [-5.2715, 56.2463], [-5.2708, 56.2456], [-5.268, 56.2455], [-5.2667, 56.2457], [-5.2659, 56.245], [-5.2669, 56.2447], [-5.2669, 56.2451], [-5.2681, 56.2449], [-5.2693, 56.2438], [-5.2695, 56.243], [-5.27, 56.2426], [-5.2699, 56.2416], [-5.2696, 56.2415], [-5.2717, 56.2407], [-5.2755, 56.2387], [-5.2765, 56.2387], [-5.2784, 56.2379], [-5.2785, 56.2371], [-5.2802, 56.2366], [-5.2817, 56.2355], [-5.2833, 56.2353], [-5.2848, 56.2344], [-5.2842, 56.234], [-5.2832, 56.2344], [-5.2826, 56.234], [-5.2828, 56.2335], [-5.282, 56.2321], [-5.2825, 56.2314], [-5.2842, 56.2306], [-5.2848, 56.2298], [-5.2854, 56.2295], [-5.2859, 56.2288], [-5.288, 56.2277], [-5.2892, 56.2264], [-5.2912, 56.2249], [-5.2918, 56.224], [-5.2925, 56.224], [-5.2933, 56.2232], [-5.2939, 56.2231], [-5.2946, 56.2226], [-5.2953, 56.2225], [-5.2965, 56.2217], [-5.2972, 56.2209], [-5.2983, 56.2206], [-5.2995, 56.2198], [-5.3008, 56.2196], [-5.302, 56.2187], [-5.3022, 56.2183], [-5.3033, 56.2171], [-5.304, 56.2166], [-5.3058, 56.2161], [-5.3079, 56.2151], [-5.3099, 56.2144], [-5.3121, 56.2132], [-5.3138, 56.2127], [-5.3152, 56.2128], [-5.3166, 56.2119], [-5.3204, 56.2099], [-5.3212, 56.2094], [-5.3236, 56.2086], [-5.3248, 56.2078], [-5.3266, 56.2072], [-5.3286, 56.206], [-5.3289, 56.2055], [-5.3305, 56.2046], [-5.3322, 56.2039], [-5.3334, 56.2039], [-5.3344, 56.2036], [-5.3349, 56.2032], [-5.3366, 56.2023], [-5.3373, 56.2018], [-5.3392, 56.2012], [-5.3403, 56.2007], [-5.3412, 56.2006], [-5.3422, 56.2001], [-5.343, 56.2], [-5.346, 56.1988], [-5.347, 56.1989], [-5.3489, 56.1981], [-5.3494, 56.1976], [-5.3512, 56.1966], [-5.3526, 56.1962], [-5.3545, 56.1965], [-5.3557, 56.1956], [-5.3566, 56.1954], [-5.359, 56.1939], [-5.3604, 56.1935], [-5.3606, 56.1932], [-5.3627, 56.1928], [-5.3642, 56.1919], [-5.3654, 56.1916], [-5.3659, 56.1918], [-5.3669, 56.1914], [-5.3682, 56.1906], [-5.3704, 56.1899], [-5.3708, 56.1899], [-5.3713, 56.1895], [-5.3737, 56.1889], [-5.376, 56.1879], [-5.3739, 56.1858], [-5.3727, 56.1852], [-5.3754, 56.183], [-5.3761, 56.1822], [-5.3794, 56.1794], [-5.3789, 56.179], [-5.3775, 56.177], [-5.3753, 56.1758], [-5.3714, 56.1745], [-5.3666, 56.1727], [-5.3637, 56.1723], [-5.3606, 56.1725], [-5.358, 56.1731], [-5.3556, 56.1726], [-5.3554, 56.171], [-5.3547, 56.1679], [-5.3548, 56.1667], [-5.3553, 56.165], [-5.3571, 56.1635], [-5.354, 56.162], [-5.3532, 56.1614], [-5.3554, 56.1602], [-5.357, 56.159], [-5.3585, 56.1573], [-5.3602, 56.1553], [-5.3648, 56.1526], [-5.3676, 56.1501], [-5.37, 56.1483], [-5.3746, 56.1465], [-5.3762, 56.1445]], [[-4.8052, 56.5403], [-4.8048, 56.5407], [-4.8043, 56.542], [-4.8037, 56.5424], [-4.8018, 56.5426], [-4.8007, 56.5424], [-4.8008, 56.543], [-4.8004, 56.5434], [-4.7977, 56.5436], [-4.7963, 56.5433], [-4.795, 56.5437], [-4.7935, 56.5433], [-4.7927, 56.5436], [-4.7918, 56.5433], [-4.7906, 56.5432], [-4.7893, 56.5435], [-4.789, 56.544], [-4.7894, 56.5447], [-4.7885, 56.5456], [-4.7878, 56.5461], [-4.7858, 56.5466], [-4.7854, 56.5466], [-4.7828, 56.5473], [-4.7817, 56.5473], [-4.7818, 56.5476], [-4.781, 56.5477], [-4.7798, 56.5486], [-4.7774, 56.5494], [-4.7758, 56.5498], [-4.7752, 56.5495], [-4.7739, 56.5494], [-4.7745, 56.5503], [-4.7736, 56.5511], [-4.7719, 56.552], [-4.7704, 56.5524], [-4.7694, 56.5532], [-4.768, 56.5533], [-4.7676, 56.5536], [-4.7674, 56.5542], [-4.7665, 56.5542], [-4.7655, 56.5547], [-4.7651, 56.5551], [-4.7634, 56.5554], [-4.7629, 56.556], [-4.7615, 56.5562], [-4.761, 56.5571], [-4.7597, 56.5568], [-4.7564, 56.5565], [-4.7555, 56.5568], [-4.7543, 56.5569], [-4.7536, 56.5563], [-4.7527, 56.5562], [-4.7532, 56.556], [-4.7518, 56.5558], [-4.7515, 56.5555], [-4.7505, 56.5557], [-4.7489, 56.5553], [-4.7494, 56.5541], [-4.7502, 56.5538], [-4.7513, 56.5528], [-4.7522, 56.5523], [-4.752, 56.5519], [-4.7527, 56.5515], [-4.7549, 56.551], [-4.7565, 56.5499], [-4.7579, 56.5493], [-4.7589, 56.5492], [-4.7591, 56.5487], [-4.7601, 56.5485], [-4.7606, 56.5482], [-4.7635, 56.5479], [-4.7634, 56.5471], [-4.7636, 56.546], [-4.7642, 56.5457], [-4.7661, 56.5457], [-4.7673, 56.5454], [-4.7677, 56.5449], [-4.7687, 56.5448], [-4.7684, 56.5445], [-4.7688, 56.5437], [-4.7685, 56.5432], [-4.7693, 56.5424], [-4.7704, 56.5423], [-4.7713, 56.542], [-4.7723, 56.5426], [-4.7725, 56.5417], [-4.7734, 56.541], [-4.7729, 56.5407], [-4.7734, 56.539], [-4.7724, 56.5386], [-4.7722, 56.5379], [-4.7711, 56.5372], [-4.771, 56.5364], [-4.7719, 56.5365], [-4.772, 56.5368], [-4.7733, 56.5374], [-4.7742, 56.5373], [-4.7757, 56.5382], [-4.7775, 56.5382], [-4.7782, 56.5385], [-4.7775, 56.5392], [-4.7782, 56.54], [-4.7781, 56.5404], [-4.7788, 56.5405], [-4.7789, 56.5402], [-4.7804, 56.5403], [-4.7809, 56.5407], [-4.7807, 56.5411], [-4.7848, 56.5408], [-4.7881, 56.54], [-4.7899, 56.5402], [-4.7916, 56.5397], [-4.7919, 56.5393], [-4.7938, 56.5388], [-4.7949, 56.539], [-4.7953, 56.5386], [-4.7968, 56.5381], [-4.7972, 56.5372], [-4.7977, 56.537], [-4.7984, 56.5374], [-4.7984, 56.5367], [-4.7991, 56.536], [-4.7997, 56.5358], [-4.8003, 56.5364], [-4.8015, 56.537], [-4.8016, 56.5376], [-4.7997, 56.5378], [-4.8004, 56.5382], [-4.7997, 56.5382], [-4.7987, 56.5388], [-4.8003, 56.539], [-4.8009, 56.5387], [-4.8005, 56.5396], [-4.803, 56.5397], [-4.8039, 56.5399], [-4.8048, 56.5396], [-4.8052, 56.5403]]], [[[-5.5824, 56.3266], [-5.5823, 56.3257], [-5.5814, 56.3267], [-5.5816, 56.3269], [-5.5824, 56.3266]]], [[[-5.5903, 56.2817], [-5.5896, 56.2816], [-5.5888, 56.2822], [-5.5886, 56.2832], [-5.588, 56.2833], [-5.5882, 56.2841], [-5.5903, 56.2817]]], [[[-5.5947, 56.3204], [-5.5939, 56.3203], [-5.5939, 56.3207], [-5.5947, 56.3204]]], [[[-5.5992, 56.2543], [-5.5989, 56.2537], [-5.5989, 56.2528], [-5.5984, 56.2521], [-5.5988, 56.251], [-5.597, 56.25], [-5.5969, 56.2495], [-5.5962, 56.249], [-5.5941, 56.2496], [-5.5938, 56.2499], [-5.5929, 56.2497], [-5.5924, 56.25], [-5.5913, 56.25], [-5.59, 56.2498], [-5.5891, 56.2503], [-5.5883, 56.2503], [-5.5873, 56.2495], [-5.5852, 56.2489], [-5.5808, 56.2491], [-5.5801, 56.2496], [-5.5778, 56.2515], [-5.5774, 56.2523], [-5.5754, 56.2539], [-5.5745, 56.2544], [-5.5726, 56.2549], [-5.5724, 56.2553], [-5.5711, 56.2555], [-5.5699, 56.2561], [-5.5697, 56.2565], [-5.5687, 56.257], [-5.5676, 56.2581], [-5.5653, 56.2586], [-5.5631, 56.2599], [-5.5628, 56.2604], [-5.562, 56.2607], [-5.5603, 56.2608], [-5.5588, 56.2606], [-5.5583, 56.2608], [-5.5551, 56.2602], [-5.5502, 56.2589], [-5.5486, 56.2593], [-5.5473, 56.2591], [-5.5465, 56.2589], [-5.5453, 56.2595], [-5.5448, 56.2595], [-5.5424, 56.2588], [-5.542, 56.2589], [-5.54, 56.2584], [-5.5389, 56.2585], [-5.5375, 56.258], [-5.5371, 56.2583], [-5.536, 56.2581], [-5.5325, 56.2597], [-5.5299, 56.2603], [-5.5255, 56.2624], [-5.5239, 56.2625], [-5.5237, 56.2629], [-5.5228, 56.2631], [-5.5215, 56.2627], [-5.5215, 56.2624], [-5.5204, 56.2624], [-5.5191, 56.2628], [-5.5177, 56.2621], [-5.5177, 56.2617], [-5.5182, 56.2602], [-5.5176, 56.2595], [-5.5167, 56.2597], [-5.5153, 56.2606], [-5.5141, 56.2623], [-5.5136, 56.2651], [-5.5125, 56.2658], [-5.5114, 56.2658], [-5.5105, 56.2664], [-5.5111, 56.2671], [-5.5091, 56.2685], [-5.5073, 56.2694], [-5.5058, 56.2703], [-5.5041, 56.27], [-5.5028, 56.2695], [-5.5024, 56.2699], [-5.5002, 56.2696], [-5.4997, 56.2699], [-5.4986, 56.2699], [-5.4973, 56.2694], [-5.496, 56.27], [-5.4965, 56.2691], [-5.4947, 56.2684], [-5.4946, 56.2681], [-5.4956, 56.2676], [-5.4965, 56.2657], [-5.4973, 56.2654], [-5.4977, 56.2636], [-5.4973, 56.2637], [-5.4964, 56.2631], [-5.4952, 56.2616], [-5.4935, 56.2611], [-5.4922, 56.26], [-5.4905, 56.2598], [-5.4894, 56.2592], [-5.4887, 56.2583], [-5.4874, 56.2576], [-5.4854, 56.2573], [-5.4833, 56.2572], [-5.4836, 56.2569], [-5.4828, 56.2566], [-5.483, 56.2561], [-5.4843, 56.2556], [-5.4842, 56.2551], [-5.4849, 56.2547], [-5.4855, 56.2549], [-5.4871, 56.2549], [-5.4892, 56.2556], [-5.4931, 56.2556], [-5.4958, 56.2562], [-5.5006, 56.2569], [-5.5014, 56.2561], [-5.5017, 56.2555], [-5.5026, 56.2551], [-5.5035, 56.2552], [-5.5039, 56.2546], [-5.505, 56.2545], [-5.5087, 56.2539], [-5.5111, 56.2519], [-5.5116, 56.2511], [-5.5108, 56.2509], [-5.5112, 56.2501], [-5.5116, 56.2484], [-5.5109, 56.2483], [-5.5107, 56.2479], [-5.5115, 56.2467], [-5.5123, 56.2466], [-5.5135, 56.2469], [-5.5142, 56.2466], [-5.5167, 56.2465], [-5.5173, 56.2462], [-5.5184, 56.2461], [-5.5195, 56.2456], [-5.5211, 56.2463], [-5.5221, 56.2474], [-5.5219, 56.2478], [-5.5224, 56.2487], [-5.5229, 56.2491], [-5.5252, 56.2492], [-5.5273, 56.2486], [-5.5269, 56.2484], [-5.5269, 56.2477], [-5.5261, 56.2475], [-5.5261, 56.2464], [-5.5281, 56.2457], [-5.5295, 56.2442], [-5.5303, 56.244], [-5.533, 56.244], [-5.5335, 56.2444], [-5.5376, 56.2444], [-5.5381, 56.2441], [-5.5388, 56.243], [-5.5388, 56.2425], [-5.5407, 56.2409], [-5.5409, 56.2406], [-5.5422, 56.2399], [-5.5437, 56.2393], [-5.5453, 56.2396], [-5.5466, 56.2389], [-5.5477, 56.2388], [-5.5494, 56.2383], [-5.551, 56.2381], [-5.552, 56.2384], [-5.5521, 56.2388], [-5.5533, 56.2387], [-5.5561, 56.2392], [-5.5577, 56.24], [-5.5583, 56.2395], [-5.5593, 56.2388], [-5.5603, 56.2387], [-5.562, 56.2387], [-5.5641, 56.2383], [-5.5661, 56.2374], [-5.567, 56.2365], [-5.567, 56.2353], [-5.5666, 56.2346], [-5.565, 56.234], [-5.5637, 56.2332], [-5.5629, 56.2323], [-5.5622, 56.2328], [-5.5598, 56.2339], [-5.5589, 56.2333], [-5.558, 56.2338], [-5.5571, 56.2338], [-5.5558, 56.2333], [-5.556, 56.2328], [-5.5549, 56.2325], [-5.5537, 56.2329], [-5.5532, 56.2329], [-5.5521, 56.2323], [-5.5514, 56.2316], [-5.5506, 56.2316], [-5.5496, 56.2312], [-5.5484, 56.2303], [-5.5484, 56.2294], [-5.5487, 56.2285], [-5.5479, 56.2271], [-5.5482, 56.2267], [-5.5476, 56.226], [-5.5476, 56.2246], [-5.5461, 56.2238], [-5.546, 56.2232], [-5.5471, 56.2213], [-5.5467, 56.221], [-5.5464, 56.2194], [-5.5433, 56.2218], [-5.5433, 56.2222], [-5.5415, 56.2231], [-5.5373, 56.2244], [-5.5408, 56.2288], [-5.5293, 56.2324], [-5.5275, 56.2327], [-5.5226, 56.2327], [-5.518, 56.2334], [-5.5123, 56.2338], [-5.5095, 56.236], [-5.5067, 56.2362], [-5.5033, 56.2335], [-5.4996, 56.2335], [-5.4944, 56.2343], [-5.4833, 56.2363], [-5.4736, 56.2383], [-5.4647, 56.2403], [-5.4567, 56.2426], [-5.4522, 56.2442], [-5.4477, 56.2445], [-5.4429, 56.2445], [-5.4374, 56.2452], [-5.4343, 56.2446], [-5.4332, 56.2449], [-5.4305, 56.2446], [-5.4196, 56.2454], [-5.4185, 56.2472], [-5.4158, 56.2469], [-5.4144, 56.2485], [-5.4108, 56.2492], [-5.4091, 56.2486], [-5.4026, 56.2475], [-5.4031, 56.2451], [-5.4013, 56.243], [-5.3961, 56.2423], [-5.395, 56.2398], [-5.394, 56.2394], [-5.3875, 56.2402], [-5.3843, 56.2396], [-5.3801, 56.2403], [-5.3773, 56.2405], [-5.3734, 56.2402], [-5.3681, 56.2409], [-5.3662, 56.2385], [-5.3587, 56.2408], [-5.3568, 56.2395], [-5.3559, 56.2378], [-5.3533, 56.2361], [-5.3533, 56.2341], [-5.3524, 56.2326], [-5.3509, 56.2309], [-5.3503, 56.2304], [-5.3506, 56.228], [-5.3447, 56.2256], [-5.341, 56.225], [-5.3361, 56.2256], [-5.3367, 56.2216], [-5.3353, 56.2201], [-5.3316, 56.2169], [-5.3296, 56.2179], [-5.3272, 56.2184], [-5.3278, 56.2176], [-5.3247, 56.219], [-5.3245, 56.2194], [-5.3227, 56.2203], [-5.3211, 56.2209], [-5.3198, 56.2217], [-5.3187, 56.222], [-5.3172, 56.2234], [-5.3166, 56.2238], [-5.315, 56.2255], [-5.3146, 56.2264], [-5.3131, 56.2283], [-5.3117, 56.2294], [-5.3104, 56.2302], [-5.3086, 56.2307], [-5.3085, 56.2311], [-5.3074, 56.2317], [-5.3061, 56.2323], [-5.3048, 56.2324], [-5.3045, 56.2323], [-5.3027, 56.2335], [-5.3016, 56.2343], [-5.3009, 56.2355], [-5.2999, 56.2358], [-5.2992, 56.2353], [-5.2981, 56.2359], [-5.2976, 56.2366], [-5.2976, 56.2372], [-5.2965, 56.2377], [-5.2957, 56.2392], [-5.2944, 56.2399], [-5.2943, 56.2408], [-5.2935, 56.2413], [-5.2922, 56.2417], [-5.291, 56.2426], [-5.2908, 56.2436], [-5.2899, 56.2435], [-5.2878, 56.2443], [-5.2872, 56.244], [-5.2859, 56.2445], [-5.2865, 56.2435], [-5.2861, 56.2434], [-5.2839, 56.2442], [-5.2828, 56.2442], [-5.2827, 56.2456], [-5.283, 56.246], [-5.2827, 56.2467], [-5.2827, 56.2478], [-5.2843, 56.2489], [-5.2847, 56.25], [-5.2843, 56.2509], [-5.2843, 56.2518], [-5.2848, 56.2522], [-5.2849, 56.2532], [-5.2852, 56.2539], [-5.2846, 56.2555], [-5.283, 56.2567], [-5.2837, 56.2569], [-5.2834, 56.2572], [-5.2841, 56.2577], [-5.283, 56.2587], [-5.2824, 56.2589], [-5.282, 56.2596], [-5.2815, 56.2597], [-5.2811, 56.2602], [-5.2796, 56.2609], [-5.2781, 56.2624], [-5.2786, 56.2632], [-5.2786, 56.2644], [-5.2778, 56.2647], [-5.2772, 56.266], [-5.2759, 56.2677], [-5.2752, 56.268], [-5.2741, 56.2688], [-5.274, 56.2693], [-5.2732, 56.27], [-5.2734, 56.271], [-5.2734, 56.2722], [-5.2724, 56.2727], [-5.2721, 56.2745], [-5.2716, 56.2747], [-5.2696, 56.2751], [-5.2684, 56.2759], [-5.2667, 56.2762], [-5.2656, 56.2762], [-5.2642, 56.2765], [-5.2619, 56.2772], [-5.2573, 56.2794], [-5.256, 56.279], [-5.2552, 56.279], [-5.2558, 56.2787], [-5.2552, 56.2779], [-5.2553, 56.2773], [-5.2561, 56.2769], [-5.256, 56.2762], [-5.2564, 56.2754], [-5.2553, 56.2756], [-5.254, 56.2762], [-5.2553, 56.2763], [-5.2532, 56.2766], [-5.2536, 56.2767], [-5.2531, 56.2772], [-5.2523, 56.2769], [-5.2515, 56.2773], [-5.252, 56.2775], [-5.2518, 56.278], [-5.2509, 56.2779], [-5.2512, 56.2775], [-5.2496, 56.278], [-5.2483, 56.2781], [-5.2471, 56.2785], [-5.2444, 56.2798], [-5.2432, 56.2808], [-5.2425, 56.2816], [-5.243, 56.2821], [-5.2421, 56.2829], [-5.2423, 56.2833], [-5.242, 56.2845], [-5.2403, 56.2861], [-5.2381, 56.2879], [-5.2382, 56.2884], [-5.2388, 56.2883], [-5.2396, 56.2887], [-5.2401, 56.2894], [-5.2404, 56.2903], [-5.2402, 56.2909], [-5.2396, 56.2913], [-5.2397, 56.2923], [-5.2396, 56.2935], [-5.2401, 56.2952], [-5.2389, 56.2963], [-5.2384, 56.2976], [-5.2382, 56.2995], [-5.2376, 56.3], [-5.2367, 56.3014], [-5.2366, 56.3036], [-5.2357, 56.304], [-5.2328, 56.3048], [-5.2312, 56.3059], [-5.231, 56.3063], [-5.2314, 56.3069], [-5.2316, 56.3089], [-5.2312, 56.3092], [-5.2328, 56.3092], [-5.2336, 56.3098], [-5.2334, 56.3103], [-5.231, 56.3121], [-5.231, 56.3124], [-5.2299, 56.3134], [-5.2299, 56.3142], [-5.2292, 56.3155], [-5.2281, 56.3168], [-5.2264, 56.3169], [-5.2247, 56.3175], [-5.2252, 56.3177], [-5.2244, 56.3182], [-5.2241, 56.3188], [-5.2233, 56.3188], [-5.2227, 56.3194], [-5.2227, 56.3202], [-5.2215, 56.3208], [-5.2203, 56.3206], [-5.2195, 56.3208], [-5.2186, 56.3202], [-5.2166, 56.3206], [-5.2141, 56.3227], [-5.2126, 56.3235], [-5.2112, 56.3252], [-5.2103, 56.3256], [-5.2093, 56.3267], [-5.2075, 56.3293], [-5.2068, 56.3311], [-5.2058, 56.3317], [-5.2052, 56.3316], [-5.2045, 56.3322], [-5.2054, 56.3327], [-5.2043, 56.333], [-5.2029, 56.3327], [-5.2023, 56.3332], [-5.2022, 56.3341], [-5.2027, 56.3347], [-5.2013, 56.3349], [-5.2005, 56.3352], [-5.2005, 56.3358], [-5.201, 56.3363], [-5.2, 56.3359], [-5.199, 56.3361], [-5.1983, 56.3353], [-5.197, 56.3354], [-5.1966, 56.3361], [-5.1961, 56.3363], [-5.1948, 56.3359], [-5.1938, 56.336], [-5.1928, 56.3356], [-5.1935, 56.3351], [-5.1932, 56.3348], [-5.1921, 56.3357], [-5.1907, 56.3371], [-5.1905, 56.3392], [-5.1915, 56.34], [-5.1908, 56.3413], [-5.19, 56.3413], [-5.1886, 56.3415], [-5.1885, 56.3421], [-5.1893, 56.3428], [-5.1891, 56.343], [-5.188, 56.3431], [-5.1877, 56.3427], [-5.1877, 56.3414], [-5.1865, 56.3418], [-5.187, 56.3419], [-5.187, 56.3424], [-5.1865, 56.3431], [-5.1871, 56.3432], [-5.1872, 56.3436], [-5.186, 56.3441], [-5.1841, 56.3444], [-5.1837, 56.3443], [-5.1827, 56.3446], [-5.1813, 56.3456], [-5.1799, 56.3461], [-5.1785, 56.3459], [-5.1776, 56.3456], [-5.1745, 56.3451], [-5.1726, 56.3455], [-5.1724, 56.3461], [-5.1718, 56.3466], [-5.1705, 56.3464], [-5.1676, 56.3456], [-5.1663, 56.3456], [-5.1643, 56.3447], [-5.1633, 56.3445], [-5.1616, 56.3443], [-5.1612, 56.3438], [-5.1578, 56.3453], [-5.1569, 56.3455], [-5.1549, 56.3465], [-5.153, 56.3473], [-5.1518, 56.3475], [-5.1507, 56.348], [-5.1491, 56.3484], [-5.1489, 56.3486], [-5.1472, 56.3489], [-5.1452, 56.3496], [-5.1436, 56.3495], [-5.143, 56.3499], [-5.141, 56.3506], [-5.1401, 56.3512], [-5.1382, 56.3518], [-5.1375, 56.3523], [-5.1366, 56.3524], [-5.1358, 56.3529], [-5.1347, 56.354], [-5.1345, 56.3545], [-5.1338, 56.3547], [-5.1334, 56.3553], [-5.1314, 56.3564], [-5.1292, 56.357], [-5.1289, 56.3573], [-5.1269, 56.358], [-5.1258, 56.3581], [-5.1253, 56.3577], [-5.1249, 56.3578], [-5.1251, 56.3585], [-5.123, 56.3585], [-5.1205, 56.3587], [-5.1199, 56.3595], [-5.1226, 56.3594], [-5.1244, 56.359], [-5.1249, 56.3594], [-5.1248, 56.3598], [-5.1232, 56.3603], [-5.1223, 56.3608], [-5.1209, 56.3613], [-5.1187, 56.3614], [-5.1177, 56.3618], [-5.1176, 56.3623], [-5.1162, 56.3628], [-5.1157, 56.3628], [-5.115, 56.3633], [-5.1131, 56.3634], [-5.1132, 56.364], [-5.1125, 56.3645], [-5.111, 56.365], [-5.1105, 56.3649], [-5.1103, 56.3654], [-5.1084, 56.366], [-5.1083, 56.3657], [-5.1074, 56.3659], [-5.1071, 56.3664], [-5.1057, 56.3664], [-5.1051, 56.3669], [-5.1033, 56.3672], [-5.1026, 56.3679], [-5.102, 56.368], [-5.1014, 56.3676], [-5.0996, 56.3681], [-5.0997, 56.369], [-5.0985, 56.3694], [-5.0979, 56.3699], [-5.0975, 56.3692], [-5.0971, 56.3694], [-5.0975, 56.3704], [-5.0957, 56.3709], [-5.0947, 56.3703], [-5.0948, 56.3708], [-5.0955, 56.3709], [-5.0958, 56.3713], [-5.0952, 56.3717], [-5.0947, 56.3715], [-5.0936, 56.3719], [-5.0937, 56.3729], [-5.0919, 56.3733], [-5.0906, 56.3739], [-5.0902, 56.3745], [-5.0882, 56.3751], [-5.0887, 56.3758], [-5.0921, 56.3771], [-5.0938, 56.377], [-5.0946, 56.3774], [-5.0944, 56.3777], [-5.0935, 56.378], [-5.094, 56.3792], [-5.0947, 56.3798], [-5.0961, 56.3799], [-5.0973, 56.3802], [-5.0986, 56.3813], [-5.1017, 56.3825], [-5.1033, 56.3835], [-5.1035, 56.3841], [-5.1056, 56.3858], [-5.1067, 56.3864], [-5.1075, 56.3867], [-5.1091, 56.3882], [-5.1116, 56.3893], [-5.1122, 56.39], [-5.1137, 56.3902], [-5.1142, 56.3905], [-5.1163, 56.3911], [-5.1168, 56.3914], [-5.1185, 56.3919], [-5.1196, 56.392], [-5.1225, 56.3931], [-5.1237, 56.3938], [-5.1257, 56.3944], [-5.1274, 56.3951], [-5.1285, 56.3961], [-5.1306, 56.3965], [-5.1331, 56.3966], [-5.1347, 56.397], [-5.1383, 56.3945], [-5.1383, 56.3888], [-5.1415, 56.3843], [-5.1482, 56.3814], [-5.1512, 56.3764], [-5.1458, 56.3735], [-5.1461, 56.3677], [-5.1415, 56.3643], [-5.1464, 56.3637], [-5.1501, 56.3648], [-5.1532, 56.3639], [-5.1594, 56.3672], [-5.163, 56.3662], [-5.1614, 56.3585], [-5.175, 56.3568], [-5.1753, 56.357], [-5.1762, 56.3565], [-5.1769, 56.3564], [-5.1767, 56.3575], [-5.1773, 56.3574], [-5.1777, 56.3562], [-5.1792, 56.3563], [-5.179, 56.3566], [-5.1804, 56.3571], [-5.1821, 56.3588], [-5.1836, 56.3586], [-5.1852, 56.3586], [-5.193, 56.3593], [-5.2034, 56.3555], [-5.2195, 56.353], [-5.2244, 56.3501], [-5.2276, 56.3513], [-5.2314, 56.3503], [-5.2303, 56.3532], [-5.2313, 56.3566], [-5.2386, 56.354], [-5.2428, 56.3513], [-5.2478, 56.3478], [-5.2531, 56.3461], [-5.2594, 56.3513], [-5.2598, 56.3542], [-5.2587, 56.3568], [-5.2613, 56.3591], [-5.2638, 56.362], [-5.2646, 56.3624], [-5.2703, 56.3619], [-5.2735, 56.3605], [-5.2762, 56.3598], [-5.2832, 56.3583], [-5.2847, 56.3555], [-5.2834, 56.3522], [-5.2949, 56.3434], [-5.3099, 56.3323], [-5.3283, 56.3285], [-5.3404, 56.3421], [-5.3437, 56.3447], [-5.3451, 56.3476], [-5.3491, 56.346], [-5.3502, 56.3444], [-5.3521, 56.3453], [-5.3531, 56.3443], [-5.3578, 56.3426], [-5.3623, 56.344], [-5.365, 56.3459], [-5.3664, 56.348], [-5.3666, 56.3504], [-5.3659, 56.3548], [-5.3687, 56.3543], [-5.3722, 56.3533], [-5.3751, 56.3516], [-5.381, 56.3497], [-5.385, 56.3504], [-5.3856, 56.3493], [-5.3825, 56.3456], [-5.381, 56.344], [-5.3882, 56.3444], [-5.4022, 56.3468], [-5.4124, 56.3414], [-5.4158, 56.3427], [-5.4174, 56.3429], [-5.4243, 56.3447], [-5.4269, 56.3435], [-5.4301, 56.3437], [-5.4346, 56.3419], [-5.4329, 56.3403], [-5.436, 56.3395], [-5.4385, 56.3398], [-5.4408, 56.3414], [-5.4487, 56.3372], [-5.4515, 56.3387], [-5.4563, 56.3384], [-5.4691, 56.352], [-5.4752, 56.3495], [-5.4798, 56.351], [-5.484, 56.3496], [-5.4879, 56.3482], [-5.4866, 56.3511], [-5.4929, 56.3523], [-5.4933, 56.353], [-5.495, 56.3528], [-5.4977, 56.3523], [-5.4989, 56.3521], [-5.5005, 56.3514], [-5.5014, 56.3512], [-5.5036, 56.3501], [-5.5042, 56.3494], [-5.5041, 56.3489], [-5.5052, 56.3479], [-5.5059, 56.347], [-5.5069, 56.3466], [-5.5069, 56.3462], [-5.5076, 56.3459], [-5.5085, 56.3451], [-5.5102, 56.3446], [-5.5117, 56.3434], [-5.5129, 56.343], [-5.5151, 56.3429], [-5.5168, 56.3432], [-5.5179, 56.3431], [-5.5197, 56.3437], [-5.521, 56.3434], [-5.5222, 56.3426], [-5.5222, 56.3422], [-5.521, 56.3413], [-5.5219, 56.3416], [-5.5233, 56.3427], [-5.5243, 56.3429], [-5.5248, 56.3422], [-5.5252, 56.3429], [-5.5339, 56.3476], [-5.5391, 56.3497], [-5.5412, 56.3459], [-5.5421, 56.3457], [-5.5426, 56.3447], [-5.5448, 56.3444], [-5.5455, 56.3444], [-5.5456, 56.3451], [-5.5464, 56.3454], [-5.5466, 56.3459], [-5.5476, 56.3464], [-5.5512, 56.3474], [-5.5552, 56.3467], [-5.5628, 56.3431], [-5.563, 56.3424], [-5.5626, 56.3423], [-5.5636, 56.3419], [-5.5644, 56.341], [-5.5639, 56.3405], [-5.565, 56.3401], [-5.5664, 56.3392], [-5.5676, 56.3388], [-5.5701, 56.3371], [-5.5702, 56.3366], [-5.571, 56.3358], [-5.5722, 56.3356], [-5.5722, 56.3361], [-5.5727, 56.3357], [-5.5753, 56.3349], [-5.5769, 56.3342], [-5.5779, 56.3329], [-5.5782, 56.3313], [-5.577, 56.3311], [-5.5799, 56.3265], [-5.5799, 56.3258], [-5.5802, 56.3252], [-5.5799, 56.325], [-5.5811, 56.3229], [-5.582, 56.3193], [-5.5819, 56.3184], [-5.5826, 56.3176], [-5.5817, 56.3167], [-5.5815, 56.3159], [-5.5809, 56.3155], [-5.5806, 56.3146], [-5.5809, 56.3139], [-5.5826, 56.3132], [-5.5831, 56.3125], [-5.5845, 56.3101], [-5.5844, 56.3094], [-5.5853, 56.3082], [-5.5854, 56.3072], [-5.586, 56.3057], [-5.5864, 56.3055], [-5.5874, 56.3065], [-5.5883, 56.3061], [-5.5882, 56.3052], [-5.5873, 56.305], [-5.5865, 56.3055], [-5.5865, 56.3045], [-5.5869, 56.3036], [-5.5877, 56.3028], [-5.5883, 56.3007], [-5.5881, 56.2994], [-5.5874, 56.2989], [-5.5873, 56.2984], [-5.5868, 56.298], [-5.5871, 56.2971], [-5.5882, 56.2968], [-5.5878, 56.2962], [-5.5886, 56.2945], [-5.5889, 56.2936], [-5.5891, 56.2916], [-5.5905, 56.2874], [-5.5899, 56.2866], [-5.5911, 56.2854], [-5.5919, 56.2825], [-5.5912, 56.2826], [-5.5915, 56.282], [-5.5903, 56.2824], [-5.5892, 56.2832], [-5.5884, 56.2847], [-5.5874, 56.2858], [-5.5859, 56.2869], [-5.5845, 56.2874], [-5.5832, 56.2868], [-5.5819, 56.2858], [-5.5799, 56.2854], [-5.5797, 56.2842], [-5.5792, 56.2839], [-5.5797, 56.2832], [-5.5806, 56.2824], [-5.5834, 56.2803], [-5.5845, 56.2785], [-5.5841, 56.2773], [-5.5846, 56.277], [-5.5858, 56.277], [-5.5874, 56.2754], [-5.5884, 56.2738], [-5.5885, 56.2728], [-5.5891, 56.2722], [-5.5893, 56.2712], [-5.5901, 56.2704], [-5.5922, 56.2691], [-5.5935, 56.2675], [-5.5942, 56.2656], [-5.5948, 56.265], [-5.5943, 56.264], [-5.5933, 56.2634], [-5.5924, 56.2623], [-5.5927, 56.2617], [-5.5936, 56.2614], [-5.5955, 56.2599], [-5.5968, 56.258], [-5.5973, 56.2568], [-5.5985, 56.2559], [-5.5992, 56.2543]], [[-5.3803, 56.2649], [-5.3796, 56.2656], [-5.3786, 56.2659], [-5.3745, 56.2681], [-5.3715, 56.2695], [-5.3698, 56.2695], [-5.3692, 56.2698], [-5.3682, 56.27], [-5.3687, 56.2705], [-5.3689, 56.271], [-5.3671, 56.2729], [-5.3645, 56.2734], [-5.3638, 56.274], [-5.3627, 56.2743], [-5.3604, 56.2753], [-5.3599, 56.2753], [-5.3588, 56.2761], [-5.3587, 56.2753], [-5.3578, 56.2747], [-5.3571, 56.2746], [-5.3557, 56.275], [-5.3547, 56.2762], [-5.3549, 56.2766], [-5.357, 56.2769], [-5.3579, 56.2772], [-5.3562, 56.2785], [-5.3546, 56.2786], [-5.3527, 56.2792], [-5.3522, 56.2791], [-5.3517, 56.2794], [-5.3494, 56.2796], [-5.3487, 56.2802], [-5.3475, 56.2807], [-5.3472, 56.2811], [-5.3463, 56.2812], [-5.345, 56.2811], [-5.345, 56.2807], [-5.343, 56.2801], [-5.3413, 56.28], [-5.3402, 56.281], [-5.3382, 56.2814], [-5.335, 56.2817], [-5.3311, 56.2825], [-5.3276, 56.2832], [-5.326, 56.2841], [-5.3242, 56.2848], [-5.3219, 56.2862], [-5.3196, 56.2864], [-5.3174, 56.2861], [-5.3163, 56.2862], [-5.3148, 56.2866], [-5.3124, 56.2875], [-5.31, 56.2875], [-5.3094, 56.2874], [-5.308, 56.2866], [-5.307, 56.2855], [-5.3071, 56.2849], [-5.3081, 56.2845], [-5.3087, 56.284], [-5.3082, 56.2837], [-5.3063, 56.284], [-5.3043, 56.2841], [-5.3037, 56.2839], [-5.3031, 56.2831], [-5.302, 56.2824], [-5.3017, 56.2815], [-5.3022, 56.2804], [-5.3031, 56.2793], [-5.304, 56.2787], [-5.3049, 56.2789], [-5.3059, 56.2788], [-5.3073, 56.279], [-5.3096, 56.2782], [-5.3115, 56.2778], [-5.3142, 56.2776], [-5.3177, 56.2767], [-5.3196, 56.2765], [-5.3232, 56.2757], [-5.3247, 56.2757], [-5.3261, 56.2749], [-5.3273, 56.2753], [-5.3283, 56.2749], [-5.33, 56.275], [-5.3304, 56.2756], [-5.3301, 56.276], [-5.332, 56.2765], [-5.3332, 56.2764], [-5.3358, 56.2757], [-5.3364, 56.2753], [-5.338, 56.2747], [-5.3383, 56.2743], [-5.3397, 56.2742], [-5.3406, 56.2737], [-5.3412, 56.2729], [-5.343, 56.2728], [-5.3456, 56.2731], [-5.3483, 56.2728], [-5.3496, 56.2724], [-5.3509, 56.2718], [-5.3526, 56.2714], [-5.3535, 56.2709], [-5.3555, 56.2705], [-5.3569, 56.2703], [-5.359, 56.2702], [-5.3611, 56.2696], [-5.362, 56.2696], [-5.3636, 56.269], [-5.3672, 56.2681], [-5.3682, 56.2676], [-5.3696, 56.2673], [-5.3699, 56.267], [-5.3719, 56.2662], [-5.372, 56.2659], [-5.3733, 56.2651], [-5.3747, 56.2646], [-5.3764, 56.2648], [-5.3776, 56.2653], [-5.3788, 56.2651], [-5.3796, 56.2648], [-5.3803, 56.2649]]], [[[-5.6186, 56.2086], [-5.6183, 56.2082], [-5.6173, 56.2075], [-5.6159, 56.2068], [-5.6144, 56.2066], [-5.6133, 56.207], [-5.6125, 56.2067], [-5.6121, 56.206], [-5.6122, 56.2051], [-5.612, 56.2044], [-5.6122, 56.2031], [-5.6126, 56.2031], [-5.6128, 56.2025], [-5.6126, 56.2013], [-5.6121, 56.2], [-5.6125, 56.1997], [-5.6128, 56.1987], [-5.6123, 56.1982], [-5.6118, 56.1984], [-5.6116, 56.1975], [-5.6121, 56.1975], [-5.6124, 56.1969], [-5.6122, 56.1963], [-5.6091, 56.1967], [-5.6061, 56.1981], [-5.6037, 56.1995], [-5.6015, 56.2002], [-5.5924, 56.2043], [-5.5907, 56.2064], [-5.5909, 56.2091], [-5.5938, 56.2099], [-5.594, 56.2109], [-5.5931, 56.2122], [-5.5942, 56.2136], [-5.5944, 56.2148], [-5.5927, 56.217], [-5.5932, 56.2189], [-5.5944, 56.2207], [-5.5941, 56.2224], [-5.5943, 56.2235], [-5.5959, 56.2247], [-5.5975, 56.2267], [-5.5989, 56.2264], [-5.5998, 56.227], [-5.6011, 56.2271], [-5.6038, 56.2289], [-5.6048, 56.229], [-5.6051, 56.2287], [-5.6059, 56.2284], [-5.6069, 56.2277], [-5.6063, 56.2273], [-5.6067, 56.2265], [-5.6076, 56.226], [-5.608, 56.2264], [-5.6075, 56.2276], [-5.6086, 56.2266], [-5.6112, 56.2289], [-5.6122, 56.2284], [-5.613, 56.2269], [-5.6122, 56.2263], [-5.6126, 56.2256], [-5.6116, 56.2255], [-5.6106, 56.2257], [-5.6097, 56.2252], [-5.6097, 56.2247], [-5.6126, 56.224], [-5.6137, 56.2231], [-5.6147, 56.2209], [-5.6149, 56.22], [-5.6147, 56.2193], [-5.6157, 56.2185], [-5.6168, 56.2166], [-5.6168, 56.2151], [-5.617, 56.2138], [-5.6173, 56.2136], [-5.6178, 56.212], [-5.6186, 56.2097], [-5.6186, 56.2086]]], [[[-5.6254, 56.2542], [-5.6243, 56.2526], [-5.6221, 56.2535], [-5.623, 56.2545], [-5.6231, 56.2549], [-5.6225, 56.2554], [-5.6214, 56.2555], [-5.6215, 56.2549], [-5.6222, 56.2543], [-5.6219, 56.254], [-5.6212, 56.2546], [-5.6208, 56.2536], [-5.6205, 56.2521], [-5.6205, 56.2513], [-5.6166, 56.2506], [-5.6129, 56.2521], [-5.6121, 56.2534], [-5.609, 56.2563], [-5.6072, 56.2596], [-5.6075, 56.2601], [-5.6074, 56.2608], [-5.6082, 56.2612], [-5.6086, 56.2624], [-5.6084, 56.2627], [-5.609, 56.2638], [-5.6098, 56.2644], [-5.6097, 56.2648], [-5.6105, 56.2657], [-5.6111, 56.2655], [-5.6124, 56.2647], [-5.6124, 56.2642], [-5.6133, 56.2641], [-5.6142, 56.2635], [-5.6191, 56.2601], [-5.6196, 56.2595], [-5.6196, 56.259], [-5.6205, 56.2578], [-5.6214, 56.257], [-5.6219, 56.257], [-5.6224, 56.2566], [-5.6217, 56.2565], [-5.6218, 56.2558], [-5.6226, 56.2564], [-5.6248, 56.2551], [-5.6254, 56.2542]]], [[[-5.6533, 56.2974], [-5.6528, 56.2965], [-5.6513, 56.2954], [-5.6498, 56.295], [-5.6499, 56.2947], [-5.6509, 56.2945], [-5.6509, 56.2939], [-5.6502, 56.2943], [-5.649, 56.294], [-5.6486, 56.2935], [-5.6489, 56.2932], [-5.6481, 56.293], [-5.6462, 56.2931], [-5.6437, 56.2936], [-5.6433, 56.2941], [-5.6422, 56.2941], [-5.6414, 56.2936], [-5.6417, 56.2933], [-5.6406, 56.2933], [-5.6374, 56.2918], [-5.6369, 56.2914], [-5.6348, 56.2915], [-5.6336, 56.2908], [-5.6338, 56.2904], [-5.6331, 56.2894], [-5.6332, 56.2889], [-5.6337, 56.2889], [-5.6338, 56.2879], [-5.6357, 56.2867], [-5.6353, 56.2864], [-5.6359, 56.2847], [-5.6354, 56.2826], [-5.6375, 56.282], [-5.6374, 56.2814], [-5.6368, 56.2815], [-5.6367, 56.281], [-5.6354, 56.2805], [-5.6353, 56.2796], [-5.6348, 56.2793], [-5.6345, 56.2786], [-5.6354, 56.2776], [-5.6342, 56.2767], [-5.6328, 56.2759], [-5.6337, 56.2756], [-5.6354, 56.2764], [-5.6358, 56.2759], [-5.637, 56.2762], [-5.6373, 56.2757], [-5.6367, 56.2753], [-5.6352, 56.2748], [-5.6343, 56.2752], [-5.6346, 56.2745], [-5.6342, 56.274], [-5.6348, 56.2725], [-5.6339, 56.2726], [-5.6342, 56.272], [-5.6329, 56.2716], [-5.6331, 56.2703], [-5.6323, 56.2699], [-5.6324, 56.2695], [-5.6313, 56.2692], [-5.6305, 56.2696], [-5.631, 56.2689], [-5.6303, 56.2686], [-5.6292, 56.2689], [-5.6289, 56.2688], [-5.6293, 56.268], [-5.6291, 56.2671], [-5.6276, 56.2666], [-5.6272, 56.2658], [-5.6269, 56.2656], [-5.6254, 56.2662], [-5.625, 56.2661], [-5.6251, 56.2654], [-5.6247, 56.2653], [-5.622, 56.2659], [-5.6195, 56.2676], [-5.6201, 56.2679], [-5.6199, 56.2683], [-5.6191, 56.268], [-5.6173, 56.269], [-5.6166, 56.2697], [-5.6168, 56.27], [-5.6139, 56.2715], [-5.6131, 56.2715], [-5.6124, 56.2751], [-5.6119, 56.2757], [-5.6124, 56.2764], [-5.6132, 56.2765], [-5.6139, 56.2763], [-5.6139, 56.2766], [-5.6124, 56.2771], [-5.6121, 56.2773], [-5.6114, 56.277], [-5.6107, 56.2771], [-5.6107, 56.2777], [-5.61, 56.2779], [-5.6098, 56.2791], [-5.609, 56.2797], [-5.6088, 56.2787], [-5.6078, 56.2778], [-5.607, 56.2777], [-5.6069, 56.2782], [-5.6062, 56.2784], [-5.6061, 56.2791], [-5.6054, 56.2787], [-5.6053, 56.2792], [-5.6047, 56.2789], [-5.6039, 56.2789], [-5.6037, 56.278], [-5.6029, 56.278], [-5.6023, 56.2783], [-5.6017, 56.2792], [-5.6, 56.2794], [-5.5992, 56.2803], [-5.5994, 56.2815], [-5.6011, 56.2825], [-5.6008, 56.2837], [-5.6017, 56.2844], [-5.602, 56.2853], [-5.6019, 56.2864], [-5.6032, 56.2865], [-5.6029, 56.2872], [-5.6013, 56.2884], [-5.6006, 56.2895], [-5.6006, 56.2903], [-5.6025, 56.2904], [-5.6034, 56.2906], [-5.6036, 56.291], [-5.6027, 56.2908], [-5.6025, 56.2912], [-5.6051, 56.2917], [-5.606, 56.2918], [-5.6065, 56.2914], [-5.6072, 56.2921], [-5.608, 56.292], [-5.6082, 56.2916], [-5.609, 56.2911], [-5.6095, 56.2913], [-5.6093, 56.2922], [-5.6098, 56.2925], [-5.612, 56.2925], [-5.6121, 56.2929], [-5.6102, 56.2932], [-5.6091, 56.2937], [-5.6094, 56.2944], [-5.6092, 56.295], [-5.6083, 56.2957], [-5.6081, 56.2961], [-5.6068, 56.2975], [-5.6066, 56.2979], [-5.6014, 56.3005], [-5.6005, 56.3005], [-5.6002, 56.2999], [-5.5987, 56.2992], [-5.5976, 56.2993], [-5.5975, 56.2989], [-5.5969, 56.2989], [-5.5974, 56.2993], [-5.5968, 56.2999], [-5.5962, 56.3], [-5.5957, 56.3007], [-5.5948, 56.3005], [-5.5931, 56.3006], [-5.5907, 56.3016], [-5.591, 56.3025], [-5.5908, 56.3034], [-5.5915, 56.3039], [-5.5911, 56.3043], [-5.5915, 56.3046], [-5.5912, 56.3055], [-5.5899, 56.3063], [-5.5885, 56.3078], [-5.5883, 56.3084], [-5.5876, 56.3084], [-5.5881, 56.3091], [-5.5881, 56.3099], [-5.5875, 56.3106], [-5.5869, 56.3107], [-5.587, 56.3113], [-5.5864, 56.3122], [-5.5862, 56.313], [-5.5856, 56.3136], [-5.586, 56.3146], [-5.5842, 56.3154], [-5.5835, 56.3172], [-5.583, 56.3178], [-5.5829, 56.3188], [-5.5823, 56.3202], [-5.5821, 56.321], [-5.5823, 56.3219], [-5.5816, 56.3224], [-5.5815, 56.323], [-5.5821, 56.3236], [-5.5821, 56.3251], [-5.5826, 56.3256], [-5.5846, 56.3245], [-5.585, 56.3241], [-5.586, 56.3237], [-5.5873, 56.323], [-5.5893, 56.3216], [-5.5893, 56.3209], [-5.5902, 56.32], [-5.591, 56.32], [-5.5929, 56.3194], [-5.5934, 56.3198], [-5.5944, 56.3198], [-5.5943, 56.3201], [-5.5954, 56.3201], [-5.5966, 56.3197], [-5.5965, 56.3194], [-5.5951, 56.3196], [-5.5953, 56.3189], [-5.5961, 56.3187], [-5.597, 56.3181], [-5.596, 56.3177], [-5.5965, 56.3171], [-5.5986, 56.3161], [-5.5996, 56.3157], [-5.6006, 56.3159], [-5.5998, 56.3171], [-5.6, 56.3175], [-5.6007, 56.3172], [-5.6015, 56.3162], [-5.6014, 56.3157], [-5.6006, 56.3157], [-5.6005, 56.3149], [-5.6007, 56.3144], [-5.6008, 56.3129], [-5.6015, 56.3119], [-5.6027, 56.3115], [-5.6037, 56.3117], [-5.6028, 56.3129], [-5.6028, 56.3138], [-5.6022, 56.3144], [-5.6025, 56.3146], [-5.6034, 56.314], [-5.6041, 56.3133], [-5.6057, 56.3133], [-5.6059, 56.3125], [-5.6071, 56.3123], [-5.6083, 56.3103], [-5.6097, 56.31], [-5.6112, 56.31], [-5.6114, 56.3095], [-5.6123, 56.31], [-5.6117, 56.3114], [-5.611, 56.3116], [-5.6099, 56.3126], [-5.6099, 56.3129], [-5.611, 56.3127], [-5.6124, 56.3114], [-5.613, 56.3114], [-5.6134, 56.3102], [-5.6141, 56.31], [-5.6146, 56.3104], [-5.6143, 56.3113], [-5.6136, 56.3122], [-5.6123, 56.3126], [-5.6106, 56.3134], [-5.6083, 56.3134], [-5.6074, 56.3142], [-5.6063, 56.3148], [-5.6049, 56.316], [-5.6036, 56.3169], [-5.6031, 56.3175], [-5.6037, 56.3177], [-5.6045, 56.3172], [-5.6051, 56.3174], [-5.6047, 56.3177], [-5.6049, 56.3183], [-5.606, 56.3175], [-5.607, 56.3173], [-5.6073, 56.3166], [-5.6093, 56.316], [-5.6098, 56.3161], [-5.6106, 56.3153], [-5.6118, 56.3149], [-5.6115, 56.3159], [-5.6111, 56.3162], [-5.6116, 56.3166], [-5.6132, 56.3162], [-5.6133, 56.317], [-5.6121, 56.317], [-5.612, 56.3174], [-5.6125, 56.3182], [-5.6127, 56.319], [-5.6141, 56.3186], [-5.6152, 56.3188], [-5.6152, 56.3191], [-5.6175, 56.3198], [-5.6178, 56.3194], [-5.6188, 56.3195], [-5.6182, 56.3202], [-5.6181, 56.3222], [-5.6189, 56.3222], [-5.6198, 56.3217], [-5.6204, 56.321], [-5.6209, 56.3196], [-5.6216, 56.3193], [-5.6219, 56.3187], [-5.623, 56.3183], [-5.6239, 56.3188], [-5.6245, 56.3185], [-5.6238, 56.3181], [-5.6249, 56.3178], [-5.6256, 56.3179], [-5.6259, 56.3175], [-5.6268, 56.317], [-5.6267, 56.3166], [-5.6282, 56.3165], [-5.6289, 56.316], [-5.6298, 56.3166], [-5.6304, 56.3165], [-5.631, 56.3158], [-5.6324, 56.3151], [-5.6329, 56.3153], [-5.6336, 56.3146], [-5.634, 56.314], [-5.6356, 56.3136], [-5.6369, 56.313], [-5.6375, 56.3131], [-5.6397, 56.3116], [-5.6407, 56.3103], [-5.6407, 56.3098], [-5.6414, 56.3096], [-5.6417, 56.3089], [-5.6422, 56.3091], [-5.6426, 56.3084], [-5.6439, 56.3071], [-5.6437, 56.3065], [-5.6447, 56.3067], [-5.6454, 56.3058], [-5.645, 56.3052], [-5.6456, 56.3042], [-5.646, 56.3041], [-5.6486, 56.3017], [-5.6469, 56.3006], [-5.6471, 56.2998], [-5.6477, 56.2993], [-5.6484, 56.2995], [-5.6489, 56.2988], [-5.6498, 56.2984], [-5.651, 56.2984], [-5.6526, 56.2978], [-5.6533, 56.2974]]], [[[-5.6631, 56.2903], [-5.6623, 56.2907], [-5.6604, 56.2913], [-5.6563, 56.2907], [-5.6548, 56.2901], [-5.6534, 56.2899], [-5.653, 56.2907], [-5.6539, 56.2914], [-5.6534, 56.2916], [-5.6524, 56.2912], [-5.652, 56.2915], [-5.6524, 56.2925], [-5.653, 56.2922], [-5.6535, 56.2925], [-5.6551, 56.292], [-5.6552, 56.2916], [-5.6564, 56.2918], [-5.6554, 56.2924], [-5.6556, 56.2932], [-5.6568, 56.2934], [-5.6561, 56.294], [-5.6567, 56.2947], [-5.6588, 56.2942], [-5.6591, 56.2937], [-5.6599, 56.2937], [-5.6606, 56.2943], [-5.6626, 56.2929], [-5.6631, 56.2917], [-5.6624, 56.291], [-5.6631, 56.2903]]], [[[-5.6602, 56.2357], [-5.6596, 56.2358], [-5.6596, 56.2367], [-5.6602, 56.2357]]], [[[-5.6657, 56.2192], [-5.6654, 56.2186], [-5.665, 56.2186], [-5.6632, 56.2179], [-5.6631, 56.2182], [-5.6622, 56.218], [-5.6615, 56.2174], [-5.6607, 56.2172], [-5.6587, 56.2171], [-5.658, 56.2174], [-5.6568, 56.2169], [-5.6559, 56.2159], [-5.6567, 56.2146], [-5.659, 56.2139], [-5.6595, 56.2135], [-5.6588, 56.2129], [-5.6589, 56.2122], [-5.6583, 56.2121], [-5.6576, 56.2115], [-5.6561, 56.2108], [-5.6555, 56.2102], [-5.6539, 56.2099], [-5.6552, 56.2094], [-5.6543, 56.2091], [-5.6533, 56.2097], [-5.6517, 56.2095], [-5.6502, 56.2089], [-5.6507, 56.2082], [-5.6498, 56.2078], [-5.6505, 56.2067], [-5.6512, 56.2048], [-5.6511, 56.2042], [-5.6503, 56.2045], [-5.6498, 56.204], [-5.6496, 56.2031], [-5.6489, 56.2026], [-5.6483, 56.2025], [-5.649, 56.2017], [-5.6499, 56.2011], [-5.6499, 56.1993], [-5.6496, 56.198], [-5.6491, 56.1966], [-5.6486, 56.1962], [-5.6485, 56.1955], [-5.6481, 56.1951], [-5.6459, 56.194], [-5.6446, 56.1931], [-5.6447, 56.1924], [-5.6429, 56.1908], [-5.642, 56.1906], [-5.6411, 56.1901], [-5.6401, 56.1902], [-5.6393, 56.19], [-5.6367, 56.1898], [-5.6358, 56.1907], [-5.6347, 56.1905], [-5.6339, 56.1888], [-5.6335, 56.1883], [-5.6323, 56.1882], [-5.6322, 56.1891], [-5.6315, 56.1895], [-5.6306, 56.1894], [-5.6304, 56.1903], [-5.631, 56.1902], [-5.6316, 56.1905], [-5.6315, 56.1911], [-5.6329, 56.1912], [-5.6332, 56.1919], [-5.6315, 56.1924], [-5.6306, 56.1924], [-5.6298, 56.1933], [-5.6297, 56.1947], [-5.6292, 56.1952], [-5.6299, 56.1956], [-5.6298, 56.1965], [-5.629, 56.1967], [-5.6298, 56.1971], [-5.6295, 56.1978], [-5.6291, 56.1995], [-5.6308, 56.2023], [-5.6317, 56.2024], [-5.6336, 56.2021], [-5.6349, 56.2044], [-5.6357, 56.2054], [-5.6356, 56.2061], [-5.6344, 56.2069], [-5.6332, 56.207], [-5.6332, 56.2055], [-5.6319, 56.2053], [-5.6316, 56.2047], [-5.63, 56.2043], [-5.63, 56.2056], [-5.6309, 56.2063], [-5.6315, 56.2059], [-5.632, 56.2062], [-5.6318, 56.2069], [-5.632, 56.2081], [-5.6314, 56.2085], [-5.6317, 56.2088], [-5.6326, 56.2085], [-5.6331, 56.2078], [-5.6338, 56.2081], [-5.6327, 56.2095], [-5.6325, 56.2102], [-5.6312, 56.2117], [-5.6305, 56.2139], [-5.631, 56.2164], [-5.6312, 56.2171], [-5.6311, 56.2178], [-5.6323, 56.218], [-5.6327, 56.2179], [-5.634, 56.2185], [-5.6344, 56.219], [-5.6337, 56.2196], [-5.6325, 56.22], [-5.6322, 56.2205], [-5.6307, 56.2206], [-5.6301, 56.2218], [-5.6304, 56.2221], [-5.6295, 56.2225], [-5.6291, 56.2233], [-5.6277, 56.2248], [-5.6277, 56.2288], [-5.6268, 56.23], [-5.6243, 56.2323], [-5.6231, 56.2338], [-5.6223, 56.2354], [-5.6218, 56.2359], [-5.6212, 56.2368], [-5.6203, 56.2396], [-5.6195, 56.2406], [-5.619, 56.2428], [-5.6193, 56.2458], [-5.6198, 56.2483], [-5.6208, 56.2481], [-5.6217, 56.2474], [-5.6231, 56.2471], [-5.6233, 56.2484], [-5.6231, 56.2495], [-5.6238, 56.2509], [-5.6251, 56.2516], [-5.626, 56.2517], [-5.6263, 56.2522], [-5.6285, 56.2525], [-5.6291, 56.2527], [-5.6289, 56.2532], [-5.6296, 56.2537], [-5.6296, 56.2544], [-5.6303, 56.2548], [-5.6307, 56.2544], [-5.6318, 56.2542], [-5.6331, 56.2546], [-5.6336, 56.2552], [-5.6317, 56.258], [-5.6333, 56.2593], [-5.6329, 56.2598], [-5.6321, 56.2601], [-5.6324, 56.2608], [-5.6316, 56.2612], [-5.6309, 56.2618], [-5.6309, 56.2635], [-5.6312, 56.2636], [-5.6314, 56.2643], [-5.6312, 56.265], [-5.6315, 56.2659], [-5.6323, 56.2664], [-5.6329, 56.2661], [-5.634, 56.2669], [-5.6344, 56.2665], [-5.6352, 56.2666], [-5.6345, 56.2675], [-5.636, 56.2674], [-5.6362, 56.2686], [-5.6378, 56.27], [-5.6402, 56.2703], [-5.642, 56.2686], [-5.6422, 56.268], [-5.6427, 56.2677], [-5.6427, 56.2672], [-5.6419, 56.2667], [-5.6428, 56.2661], [-5.6441, 56.2664], [-5.6452, 56.2661], [-5.6458, 56.2652], [-5.6463, 56.2652], [-5.6477, 56.2646], [-5.6481, 56.2647], [-5.6486, 56.2637], [-5.6494, 56.2628], [-5.6501, 56.2626], [-5.65, 56.2621], [-5.6505, 56.262], [-5.6513, 56.2613], [-5.6524, 56.2594], [-5.6525, 56.2575], [-5.6528, 56.2568], [-5.654, 56.2563], [-5.6544, 56.255], [-5.6541, 56.2544], [-5.6546, 56.2536], [-5.6557, 56.2531], [-5.6556, 56.2521], [-5.6551, 56.2518], [-5.6542, 56.2522], [-5.6547, 56.2514], [-5.6544, 56.2511], [-5.6547, 56.2503], [-5.6539, 56.2488], [-5.6537, 56.249], [-5.6527, 56.2487], [-5.6524, 56.2483], [-5.6526, 56.2471], [-5.6514, 56.2469], [-5.6506, 56.2474], [-5.6508, 56.2469], [-5.6513, 56.2467], [-5.6518, 56.2454], [-5.6526, 56.2442], [-5.6532, 56.2439], [-5.6537, 56.2431], [-5.6538, 56.2424], [-5.6543, 56.2408], [-5.6549, 56.2412], [-5.6551, 56.2408], [-5.6542, 56.2401], [-5.6542, 56.2396], [-5.6551, 56.238], [-5.6555, 56.2386], [-5.6565, 56.2376], [-5.6576, 56.2358], [-5.6579, 56.2359], [-5.6575, 56.2372], [-5.6583, 56.2371], [-5.6586, 56.2356], [-5.6595, 56.2345], [-5.66, 56.2331], [-5.6598, 56.2328], [-5.661, 56.2325], [-5.6613, 56.2308], [-5.6605, 56.2307], [-5.661, 56.2301], [-5.662, 56.2279], [-5.6618, 56.227], [-5.6608, 56.2261], [-5.6617, 56.2252], [-5.6617, 56.2247], [-5.6631, 56.2235], [-5.6635, 56.2222], [-5.6643, 56.2224], [-5.6636, 56.2209], [-5.6652, 56.22], [-5.6657, 56.2192]]]],
	 *								"type": "MultiPolygon"
	 *							},
	 * Returns:		JSONArray
	 */
	private JSONArray cleanGeoJsonFeatures(
		final JSONArray geoJsonFeatures,
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y) 
			throws JSONException {
		
		JSONArray cleanedGeoJsonFeatures = new JSONArray(geoJsonFeatures.toString()); //  Deep copy
		int numberCleaned=0;
		
		if (cleanedGeoJsonFeatures.length() == 0) {
			throw new JSONException("JSONObject no features for geography: " + geography +
				"; geoLevel: " + geoLevel +
				"; zoomlevel: " + zoomlevel +
				"; x: " + x +
				"; y: " + y +
				"; cleanedGeoJsonFeatures: " + cleanedGeoJsonFeatures.toString().substring(1, 300));
		}
		
		for (int i=0; i<cleanedGeoJsonFeatures.length(); i++) {
			JSONObject feature=cleanedGeoJsonFeatures.getJSONObject(i);
			JSONObject cleanedFeature = new JSONObject();
			if (feature != null) {
				JSONObject geometry = feature.optJSONObject("geometry");
//				JSONObject cleanedGeometry = new JSONObject();
				if (geometry != null) {
					JSONArray geometries = geometry.optJSONArray("geometries");
//					JSONArray cleanGeometries = new JSONArray();
					if (geometries != null) {
						if (geometries.length() == 0) {
							throw new JSONException("JSONObject no geometries for feature[" + i + "]: for geography: " + geography +
								"; geoLevel: " + geoLevel +
								"; zoomlevel: " + zoomlevel +
								"; x: " + x +
								"; y: " + y +
								"; feature: " + feature.toString().substring(1, 300));
						}
						for (int j=0; j<geometries.length(); j++) {
							JSONObject polygon=geometries.getJSONObject(j);
							JSONArray coordinates = polygon.optJSONArray("coordinates");
							String type = polygon.optString("type");
							if (coordinates != null && type != null && type.equals("Polygon")) { // OK
//								cleanGeometries.add(geometries);
							}
							else {		
								numberCleaned++;
								if (geometries.remove(j) != null) {	
									rifLogger.info(getClass(), "Remove geometries[" + j + "] from feature[" + i + "]: for geography: " + geography +
										"; geoLevel: " + geoLevel +
										"; zoomlevel: " + zoomlevel +
										"; x: " + x +
										"; y: " + y +
										"; " + type + ": " + polygon.toString());
								}
								else {	
									throw new JSONException(" Failed to remove " + type + ": " + polygon.toString() +
										" from geometries[" + j + "] feature[" + i + "]: for geography: " + geography +
										"; geoLevel: " + geoLevel +
										"; zoomlevel: " + zoomlevel +
										"; x: " + x +
										"; y: " + y +
										"; JSON: " + geometry.toString().substring(1, 300));
								}
							}
						}
					}
					else if (geometry.optJSONArray("coordinates") != null) { // 2nd form						
						String type = geometry.optString("type");
						if (type != null && (type.equals("Polygon") || type.equals("MultiPolygon"))) { // OK
//							cleanGeometries.add(geometries);
						}
						else {		
							rifLogger.warning(getClass(), "Expecting Polygon or MultiPolygon error to follow, full JSON fragment: " + 
								geometry.toString(2));
							throw new JSONException("Expecting Polygon or  MultiPolygon feature[" + i + "]: for geography: " + geography +
								"; geoLevel: " + geoLevel +
								"; zoomlevel: " + zoomlevel +
								"; x: " + x +
								"; y: " + y +
								"; JSON: " + geometry.toString().substring(1, 300));
						}
					}
					else {
						throw new JSONException("JSONObject geometries not found for feature[" + i + "]; geography: " + geography +
							"; geoLevel: " + geoLevel +
							"; zoomlevel: " + zoomlevel +
							"; x: " + x +
							"; y: " + y +
							"; feature: " + feature.toString().substring(1, 300));
					}
//					cleanedGeometry.put("geometry", cleanGeometries);
				}
				else {
					throw new JSONException("JSONObject geometry not found for feature[" + i + "]; geography: " + geography +
						"; geoLevel: " + geoLevel +
						"; zoomlevel: " + zoomlevel +
						"; x: " + x +
						"; y: " + y +
						"; feature: " + feature.toString().substring(1, 300));
				}
			}
			else {
				throw new JSONException("JSONObject feature not found for feature[" + i + "]; geography: " + geography +
					"; geoLevel: " + geoLevel +
					"; zoomlevel: " + zoomlevel +
					"; x: " + x +
					"; y: " + y +
					"; geoJsonFeatures: " + cleanedGeoJsonFeatures.toString().substring(1, 300));
			}
//			cleanedGeoJsonFeatures.put(feature);
		}
		
		if (numberCleaned > 0) {
			rifLogger.info(getClass(), "Cleaned " + numberCleaned + " geometries for geography: " + geography +
				"; geoLevel: " + geoLevel +
				"; zoomlevel: " + zoomlevel +
				"; x: " + x +
				"; y: " + y);			
		}
		
		return cleanedGeoJsonFeatures;
	}
	
	/* 
	 * Function:	processGeoJsonArrayList()
	 * Description:	Process array list into GeoJSON features
	 * Returns:		Number processed
	 */
	private int processGeoJsonArrayList(
		final Connection connection,
		final Integer zoomlevel,
		final String geoLevel,
		final String myGeometryTable,
		final ArrayList<String> areaIdList,
		final JSONArray geoJsonFeatures,
		final HashMap<String, JSONObject> propertiesHash,
		final GeometryFactory geometryFactory,
		final GeometryJSON geoJSONWriter,
		final int minZoomlevel,
		final int maxZoomlevel) 
			throws SQLException, RIFServiceException {
		
		int processedCount=0;
		HashMap<String, String> wktHash = getWKT(connection, zoomlevel, geoLevel, myGeometryTable.toLowerCase(), areaIdList,
			minZoomlevel, maxZoomlevel);
		if (wktHash != null) {
			
			if (wktHash.size() != areaIdList.size()) {
				throw new SQLException("Error in getWKT; expecting: " + areaIdList.size() + "; got: " + wktHash.size());
			}
			Set set = wktHash.entrySet();
			Iterator iterator = set.iterator();
			while(iterator.hasNext()) {
				processedCount++;
				Map.Entry mentry = (Map.Entry)iterator.next();
				String areaIdKey=(String)mentry.getKey();
				String wkt=(String)mentry.getValue();
				
				JSONObject geoJsonFeature = new JSONObject();
				geoJsonFeature.put("type", "Feature");
				geoJsonFeature.put("properties", propertiesHash.get(areaIdKey));	
							
				Geometry geometry = null;
				if (wkt != null) {
					try {
						WKTReader reader = new WKTReader(geometryFactory);
						geometry = reader.read(wkt); // Geotools JTS
					}
					catch (ParseException wktParseException) {
						rifLogger.warning(getClass(), "wktParseException: " + wkt);
						throw new JSONException("wktParseException: " + wktParseException.getMessage() + 
							" for geoLevel: " + geoLevel +
							"; zoomlevel: " + zoomlevel +
							"; areaId: " + areaIdKey);
					}
				}			
				else {
					throw new JSONException("Null wkt for geoLevel: " + geoLevel +
						"; zoomlevel: " + zoomlevel +
						"; areaId: " + areaIdKey);
				}
				JSONObject njsonGeometry = new JSONObject(geoJSONWriter.toString(geometry)); // Covert to GeoJSON
				geoJsonFeature.put("geometry", njsonGeometry);
				geoJsonFeatures.put(geoJsonFeature);
			} // End of while loop
		}
		else {
			throw new JSONException("Null wktHash for geoLevel: " + geoLevel +
				"; zoomlevel: " + zoomlevel);
		}	

		if (processedCount != areaIdList.size()) {
			throw new SQLException("Error processing GoeJSON features; expecting: " + areaIdList.size() + "; got: " + processedCount);
		}	
		else {		
			rifLogger.info(getClass(), "Processing: " + processedCount + " areaIds" +
				"; total geoJsonFeatures: " + geoJsonFeatures.length());
		}
							
		return processedCount;
	}
					
	/* 
	 * Function:	getWKT()
	 * Description:	Get well Known Text from RIF database <myGeometryTable> for geoLevel, zoomlevel and list of areaIds in tile
	 * Returns:		HashMap<String, String>
	 */
	private HashMap<String, String> getWKT(
		final Connection connection,
		final Integer zoomlevel,
		final String geoLevel,
		final String myGeometryTable,
		final ArrayList<String> areaIdList,
		final int minZoomlevel,
		final int maxZoomlevel
		) throws SQLException, RIFServiceException {
			
		HashMap<String, String> result = new HashMap<String, String>();
		
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		
		SelectQueryFormatter getMapTilesQueryFormatter
				= new MSSQLSelectQueryFormatter();

		//STEP 2: get the tiles
		/*
			SELECT
			   ST_AsGeoJson(GEOMETRY_SAHSULAND.optimised_topojson) AS geojson
			FROM
			   GEOMETRY_SAHSULAND,
			   rif40_geolevels
			WHERE
			   GEOMETRY_SAHSULAND.geolevel_id = rif40_geolevels.geolevel_id AND
			   rif40_geolevels.geolevel_name='SAHSU_GRD_LEVEL2' AND
			   GEOMETRY_SAHSULAND.zoomlevel=10 AND
			   GEOMETRY_SAHSULAND.areaid='01.012' 
			   
			   wkt?
		*/

		getMapTilesQueryFormatter.addSelectField("rif_data." + myGeometryTable, "wkt");
		getMapTilesQueryFormatter.addSelectField("rif_data." + myGeometryTable, "areaid");
		getMapTilesQueryFormatter.addFromTable("rif_data." + myGeometryTable);
		getMapTilesQueryFormatter.addFromTable("rif40.rif40_geolevels");
		getMapTilesQueryFormatter.addWhereJoinCondition("rif_data." + myGeometryTable, 
			"geolevel_id", "rif40.rif40_geolevels", "geolevel_id");
		getMapTilesQueryFormatter.addWhereParameter(
			baseSQLManager.applySchemaPrefixIfNeeded("rif40_geolevels"),
			"geolevel_name");
		getMapTilesQueryFormatter.addWhereParameter("rif_data." + myGeometryTable, "zoomlevel");
		getMapTilesQueryFormatter.addWhereIn("rif_data." + myGeometryTable, "areaid", areaIdList);

		baseSQLManager.logSQLQuery(
				"topoJson2geoJson",
				getMapTilesQueryFormatter,
				geoLevel,
				zoomlevel.toString());

		statement = connection.prepareStatement(getMapTilesQueryFormatter.generateQuery());
		statement.setString(1, geoLevel);
		if (zoomlevel >= minZoomlevel && zoomlevel <= maxZoomlevel) {
			statement.setInt(2, zoomlevel);
		}
		else if (zoomlevel < minZoomlevel) {
			statement.setInt(2, minZoomlevel);
		}	
		else if (zoomlevel > maxZoomlevel) {
			statement.setInt(2, maxZoomlevel);
		}	
		
		try {
			resultSet = statement.executeQuery();
			while (resultSet.next()) {

				String wkt=resultSet.getString(1);
				String areaId=resultSet.getString(2);	
				result.put(areaId, wkt);
			}		
			if (result.size() != areaIdList.size()) {
				throw new SQLException("Error in WKT fetch; expecting: " + areaIdList.size() + "; got: " + result.size());
			}
		}
		finally {
			//Cleanup database resources
			connection.commit();
			SQLQueryUtility.close(statement);
			SQLQueryUtility.close(resultSet);
			
		}
		return result;
	}

	/*
	 * Function: 	cacheTile()
	 * Description: Cache GeoJSON/PNG tile. Write to .json.tmp and then rename to ensure atomic
	 * Returns:     Write GeoJSON ByteArrayOutputStream to tile: 
	 *					EXTRACT_DIRECTORY/scratchspace/tiles/<geography>/<geolevel>/<zoomlevel>/<x>/<y>.json
	 */	
	private void cacheTile(
		final JSONObject tileGeoJson,
		ByteArrayOutputStream pngTileStream,
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y,
		final String fileExtension) 
			throws RIFServiceException {
			
		File tmpFile=getCachedTileFile(geography, zoomlevel, geoLevel, x, y, fileExtension + ".tmp");
		File file=getCachedTileFile(geography, zoomlevel, geoLevel, x, y, fileExtension);
		if (!file.exists() && !tmpFile.exists()) {
			rifLogger.info(getClass(), "Cache temporary tile: " + tmpFile.getAbsolutePath());
			FileOutputStream stream = null;
			try {
				stream = new FileOutputStream(tmpFile);
				if (tileGeoJson == null && pngTileStream == null) {
					throw new RIFServiceException(
						RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR, "Both tileGeoJson and pngTileStream are null");
				}
				else if (tileGeoJson != null && pngTileStream != null) {
					throw new RIFServiceException(
						RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR, "Both tileGeoJson and pngTileStream are not null");
				}
				else if (tileGeoJson == null && pngTileStream != null) {
					stream.write(pngTileStream.toByteArray());
				}
				else if (tileGeoJson != null && pngTileStream == null) {
					stream.write(tileGeoJson.toString().getBytes(StandardCharsets.UTF_8));
				}
			} 
			catch (IOException ioException) {
				try {
					if (tmpFile.exists()) {
						tmpFile.delete();
					}
				}
				catch (SecurityException securityException) {
					throw new RIFServiceException(
						RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
						"Recursive error writing " + tmpFile.toString() + ": " + ioException.getMessage() + 
						"; 2nd error: " + securityException.getMessage(), securityException);
				}
				throw new RIFServiceException(
					RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
					"Error writing " + tmpFile.toString() + ": " + ioException.getMessage(), ioException);
			}
			finally {
				try {
					stream.close();
				} 
				catch (IOException ioException) {
					try {
						if (tmpFile.exists()) {
							tmpFile.delete();
						}
					}
					catch (SecurityException securityException) {
						throw new RIFServiceException(
							RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
							"Recursive error writing " + tmpFile.toString() + ": " + ioException.getMessage() + 
							"; 2nd error: " + securityException.getMessage(), securityException);
					}
					throw new RIFServiceException(
						RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
						"Error writing " + tmpFile.toString() + ": " + ioException.getMessage(), ioException);
				}
			}
			
			if (!tmpFile.exists()) {
				throw new RIFServiceException(
					RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
						"Temporary file: " + tmpFile.toString() + " does not exist");
			}
			else if (tmpFile.length() == 0) {
				throw new RIFServiceException(
					RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
						"Temporary file: " + tmpFile.toString() + " is zero sized");
			}
			
			if (!file.exists()) {
				try {
					rifLogger.info(getClass(), "Cache tile(" + file.length() + " bytes): " + file.getAbsolutePath());
					tmpFile.renameTo(file);
				}
				catch (Exception exception) {
					try {
						if (!tmpFile.exists()) {
							tmpFile.delete();
						}
					}
					catch (SecurityException securityException) {
						throw new RIFServiceException(
							RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
							"Recursive error renaming: " + " to: " + file.toString() + tmpFile.toString() + ": " + exception.getMessage() + 
							"; 2nd error: " + securityException.getMessage(), securityException);
					}
					throw new RIFServiceException(
						RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
						"Error renaming: " + tmpFile.toString() + " to: " + file.toString() + ": " + exception.getMessage());
				}
			}
		}
		else if (tmpFile.exists()) {
			rifLogger.info(getClass(), "Temporary tile(" + tmpFile.length() + " bytes) exists, cannot cache: " + file.getAbsolutePath());
		}
		else if (file.exists()) {
			rifLogger.info(getClass(), "Tile(" + file.length() + " bytes) already cached: " + file.getAbsolutePath());
		}
	}
	
	
	/*
	 * Function: 	getCachedGeoJsonTile()
	 * Description:	Get GeoJSON tile
	 * Returns:     NULL or GeoJSON file as string read from the tile cache directory: 
	 *					EXTRACT_DIRECTORY/scratchspace/tiles/<geography>/<geolevel>/<zoomlevel>/<x>/<y>.json
	 */		
	public String getCachedGeoJsonTile(
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y) 
			throws RIFServiceException {
			
		JSONObject tileGeoJson = new JSONObject();
		File file=getCachedTileFile(geography, zoomlevel, geoLevel, x, y, "json");
		if (file.exists()) {
			rifLogger.info(getClass(), "DeoJSON tile (" + file.length() + " bytes) cache hit: " + file.getAbsolutePath());
			byte[] bytes = null;
			try {
				bytes = Files.readAllBytes(file.toPath());
			}
			catch (IOException ioException) {
				throw new RIFServiceException(
					RIFServiceError.TILE_CACHE_FILE_READ_ERROR,
					"Error reading " + file.toString() + ": " + ioException.getMessage(), ioException);
			}
			String result = new String(bytes, StandardCharsets.UTF_8);
			return result;
		}
		
		return null;
	}

	/*
	 * Function: 	getCachedPngTile()
	 * Description:	Get PNG tile
	 * Returns:     NULL or PNG file as Base64 encoded string read from the tile cache directory: 
	 *					EXTRACT_DIRECTORY/scratchspace/tiles/<geography>/<geolevel>/<zoomlevel>/<x>/<y>.png
	 */		
	public String getCachedPngTile(
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y) 
			throws RIFServiceException {
			
		File file=getCachedTileFile(geography, zoomlevel, geoLevel, x, y, "png");	
		if (file.exists()) {
			rifLogger.info(getClass(), "PNG tile (" + file.length() + " bytes) cache hit: " + file.getAbsolutePath());
			byte[] bytes = null;
			try {
				bytes = Files.readAllBytes(file.toPath());
			}
			catch (IOException ioException) {
				throw new RIFServiceException(
					RIFServiceError.TILE_CACHE_FILE_READ_ERROR,
					"Error reading " + file.toString() + ": " + ioException.getMessage(), ioException);
			}
			String result=Base64.getEncoder().encodeToString(bytes);
			return result;
		}
		return null;
	}
		
	/*
	 * Function: 	getCachedTileFile()
	 * Description:	Create File object for file in tile cache directory. File does NOT need to exist
	 * Returns:     File object for file in tile cache directory: 
	 *					EXTRACT_DIRECTORY/scratchspace/tiles/<geography>/<geolevel>/<zoomlevel>/<x>/<y>.<fileExtension>
	 */		
	private File getCachedTileFile(
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x, 
		final Integer y,
		String fileExtension) 
			throws RIFServiceException {
			
		Path path = createTileDirectoryPath(geography, zoomlevel, geoLevel, x);
		return new File(path.toString() + File.separator + y.toString() + "." + fileExtension);
	}
	
	/*
	 * Function: 	createTileDirectoryPath()
	 * Description:	Create path to tile cache directory. Will create directory if required
	 * Returns:     Path to tile cache directory: EXTRACT_DIRECTORY/scratchspace/tiles/<geography>/<geolevel>/<zoomlevel>/<x> 
	 */
	private Path createTileDirectoryPath(
		final String geography,
		final Integer zoomlevel, 
		final String geoLevel, 
		final Integer x) 
			throws RIFServiceException {

		if (geography == null) { 
			throw new RIFServiceException(
					RIFServiceError.INVALID_PARAMETER,
					"NULL geography specified, unable to create tile cache path");
		}
		if (geoLevel == null) { 
			throw new RIFServiceException(
					RIFServiceError.INVALID_PARAMETER,
					"NULL geoLevel specified, unable to create tile cache path");
		}
		if (zoomlevel == null) { 
			throw new RIFServiceException(
					RIFServiceError.INVALID_PARAMETER,
					"NULL zoomlevel specified, unable to create tile cache path");
		}	
		if (x == null) { 
			throw new RIFServiceException(
					RIFServiceError.INVALID_PARAMETER,
					"NULL x specified, unable to create tile cache path");
		}		

		Path path = FileSystems.getDefault().getPath(EXTRACT_DIRECTORY, "scratchspace").
						resolve("tiles").resolve(geography).resolve(geoLevel).resolve(zoomlevel.toString()).resolve(x.toString());
	
		if (!path.toFile().exists()) {
			rifLogger.info(getClass(), "Creating tile cache directory: " + path.toString());
			path.toFile().mkdirs();
		}
				
		return path;
	}		
	
	// Java OSM BBOX functions from: https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Java
	
	/* 
	 * Function:	tile2boundingBox()
	 * Description:	Get bounding box for tile
	 * Returns:		JSONArray bboxJson is: [minX, minY, maxX, maxY] 
	 */	
	public JSONArray tile2boundingBox(
		final int x, 
		final int y, 
		final int zoomlevel) {
		JSONArray bboxJson = new JSONArray();
		bboxJson.put(tile2lon(x, zoomlevel));		// Wast: minX
		bboxJson.put(tile2lat(y + 1, zoomlevel));	// South: minY
		bboxJson.put(tile2lon(x + 1, zoomlevel));	// East: maxX
		bboxJson.put(tile2lat(y, zoomlevel));		// North: maxY
		return bboxJson;
	}

	/* 
	 * Function:	tile2lon()
	 * Description:	Get Longitude for tile
	 * Returns:		Longitude (X) in 4326 
	 */	
	private double tile2lon(int x, int zoomlevel) {
		return x / Math.pow(2.0, zoomlevel) * 360.0 - 180;
	}
	
	/* 
	 * Function:	tile2lat()
	 * Description:	Get Latitude for tile
	 * Returns:		Latitude (Y) in 4326 
	 */	
	private double tile2lat(int y, int zoomlevel) {
		double n = Math.PI - (2.0 * Math.PI * y) / Math.pow(2.0, zoomlevel);
		return Math.toDegrees(Math.atan(Math.sinh(n)));
	}

	/* 
	 * Function:	generateTiles()
	 * Description: Generate tiles for geolevels with more than 5000 areaIds
	 *				Called from RIFTilesGenerator on RIF Services middleware start
	 */	
	public void generateTiles(Connection connection) 
		throws RIFServiceException {
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		LocalDateTime start = LocalDateTime.now(); 
		int generatedCount=0;
		int geolevelCount=0;
		
		SelectQueryFormatter generateTilesQueryFormatter
				= new MSSQLSelectQueryFormatter();

		//STEP 1: get the geolevels with more than 5000 areaIds
		/*
			SELECT a.geography, a.geolevel_id, a.geolevel_name, a.description AS geolevel_description, a.areaid_count, b.tiletable
			  FROM rif40.rif40_geolevels a, rif40.rif40_geographies b
			 WHERE a.geography = b.geography
               AND a.areaid_count > 5000
             ORDER BY a.areaid_count DESC;
		*/

		generateTilesQueryFormatter.addSelectField("rif40.rif40_geolevels", "geography");
		generateTilesQueryFormatter.addSelectField("rif40.rif40_geolevels", "geolevel_id");
		generateTilesQueryFormatter.addSelectField("rif40.rif40_geolevels", "geolevel_name");
		generateTilesQueryFormatter.addSelectField("rif40.rif40_geographies", "tiletable");
		generateTilesQueryFormatter.addSelectField("rif40.rif40_geographies", "geometrytable");
		generateTilesQueryFormatter.addFromTable("rif40.rif40_geolevels");
		generateTilesQueryFormatter.addFromTable("rif40.rif40_geographies");
		generateTilesQueryFormatter.addWhereJoinCondition("rif40.rif40_geolevels", 
			"geography", "rif40.rif40_geographies", "geography");
		generateTilesQueryFormatter.addWhereParameterWithOperator("rif40.rif40_geolevels.areaid_count", ">=");
		generateTilesQueryFormatter.addOrderByCondition("areaid_count", SelectQueryFormatter.SortOrder.ASCENDING);

		Integer minAreaIdCount = new Integer(5000);
		baseSQLManager.logSQLQuery(
				"generateTiles",
				generateTilesQueryFormatter,
				minAreaIdCount.toString());

		try {
			statement = connection.prepareStatement(generateTilesQueryFormatter.generateQuery());
			statement.setInt(1, minAreaIdCount.intValue());
			resultSet = statement.executeQuery();
			while (resultSet.next()) {

				String geography=resultSet.getString(1);
				Integer geolevelId=new Integer(resultSet.getInt(2));	
				String geolevelName=resultSet.getString(3);		
				String tileTable=resultSet.getString(4);		
				String geometryTable=resultSet.getString(5);	
				geolevelCount++;
				generatedCount+=determineTilesForGeoLevel(connection, geolevelId, tileTable, geometryTable, geography, geolevelName);
			}	
			
			LocalDateTime end = LocalDateTime.now(); 
			Duration duration = Duration.between(start, end);
			rifLogger.info(getClass(), "Generated " + generatedCount +
				" tiles for: " + geolevelCount + " geolevels in " + formatDuration(duration));
		}
		catch (SQLException sqlException) {
			LocalDateTime end = LocalDateTime.now(); 
			Duration duration = Duration.between(start, end);
			rifLogger.warning(getClass(), "generateTiles() had error: Generated " + generatedCount +
				" tiles for: " + geolevelCount + " geolevels in " + formatDuration(duration));
			throw new RIFServiceException(
				RIFServiceError.TILE_GENERATE_SQL_ERROR,
				sqlException.getMessage(), sqlException);
		}
		finally {
			//Cleanup database resources
			try {
				connection.commit();
				SQLQueryUtility.close(statement);
				SQLQueryUtility.close(resultSet);		
			}
			catch (SQLException sqlException) {
				throw new RIFServiceException(
					RIFServiceError.TILE_GENERATE_SQL_ERROR,
					sqlException.getMessage(), sqlException);
			}
		}			
	}

	/*
	 * Function:	formatDuration()
	 * Returns:		Duration formatted as HH:MM:SS
	 * Description: Format Duration
	 */	 
	private static String formatDuration(Duration duration) {
		long seconds = duration.getSeconds();
		long absSeconds = Math.abs(seconds);
		int nanoSeconds = duration.getNano();
		String positive = String.format(
			"%02d:%02d:%02d.%03d",
			absSeconds / 3600,
			(absSeconds % 3600) / 60,
			absSeconds % 60,
			(nanoSeconds / 1000000));
		return seconds < 0 ? "-" + positive : positive;
	}
	
	/*
	 * Function:	determineTilesForGeoLevel()
	 * Returns:		Number of tiles generated
	 * Description: Determine how many tiles to generate for geolevel
	 */
	private int determineTilesForGeoLevel(
		final Connection connection, 
		final Integer geolevelId, 
		final String tileTable, 
		final String geometryTable,
		final String geography, 
		final String geolevelName)
			throws RIFServiceException, SQLException {
		PreparedStatement statement = null;
		PreparedStatement statement2 = null;
		ResultSet resultSet = null;
		ResultSet resultSet2 = null;
		int generatedCount=0;
		
		SelectQueryFormatter generateTilesForGeoLevelQueryFormatter
				= new MSSQLSelectQueryFormatter();
		SelectQueryFormatter generateTilesForGeoLevelQueryFormatter2
				= new MSSQLSelectQueryFormatter();

		//STEP 2: get the total tiles and areaIds from the tiles table
		/*
			SELECT COUNT(tile_id) AS tiles, SUM(areaid_count) AS areaid_count
			  FROM rif_data.t_tiles_sahsuland
			 WHERE geolevel_id = 4;
		*/

		generateTilesForGeoLevelQueryFormatter.addSelectField("COUNT(tile_id) AS tile_count");
		generateTilesForGeoLevelQueryFormatter.addSelectField("SUM(areaid_count) AS areaid_count");
		generateTilesForGeoLevelQueryFormatter.addFromTable("rif_data.t_" + tileTable.toLowerCase());
		generateTilesForGeoLevelQueryFormatter.addWhereParameter("rif_data.t_" + tileTable.toLowerCase(), "geolevel_id");

		//STEP 3: get the min and max zoomlevel in the geometry table
		/*
		SELECT MIN(zoomlevel) AS min_zoomlevel, MAX(zoomlevel) AS max_zoomlevel
		  FROM rif_data.geometry_ews2011
		 WHERE rif_data.geometry_ews2011.geolevel_id = 4;
		  */
		  
		generateTilesForGeoLevelQueryFormatter2.addSelectField("MIN(zoomlevel) AS min_zoomlevel");
		generateTilesForGeoLevelQueryFormatter2.addSelectField("MAX(zoomlevel) AS max_zoomlevel");
		generateTilesForGeoLevelQueryFormatter2.addFromTable("rif_data." + geometryTable.toLowerCase());
		generateTilesForGeoLevelQueryFormatter2.addWhereParameter("rif_data." + geometryTable.toLowerCase(), "geolevel_id");
		
		baseSQLManager.logSQLQuery(
				"generateTiles",
				generateTilesForGeoLevelQueryFormatter,
				geolevelId.toString());	
		baseSQLManager.logSQLQuery(
				"generateTiles",
				generateTilesForGeoLevelQueryFormatter2,
				geolevelId.toString());

		try {
			statement = connection.prepareStatement(generateTilesForGeoLevelQueryFormatter.generateQuery());
			statement2 = connection.prepareStatement(generateTilesForGeoLevelQueryFormatter2.generateQuery());
			statement.setInt(1, geolevelId.intValue());
			statement2.setInt(1, geolevelId.intValue());
			resultSet = statement.executeQuery();
			resultSet2 = statement2.executeQuery();
			resultSet.next();
			resultSet2.next();
			int tileCount=resultSet.getInt(1);	
			int areaidCount=resultSet.getInt(2);	
			int minZoomlevel=resultSet2.getInt(1);	
			int maxZoomlevel=resultSet2.getInt(2);		
			rifLogger.info(getClass(), 
				"Generating up to " + tileCount + " tiles for: " + areaidCount + " areas in: " + geography + "." + geolevelName +
				"; minZoomlevel: " + minZoomlevel + "; maxZoomlevel: " + maxZoomlevel);
			generatedCount=generateTilesForGeoLevel(
				connection, 
				geolevelId, 
				tileTable, 
				geometryTable, 
				geography, 
				geolevelName, 
				tileCount,
				minZoomlevel,
				maxZoomlevel);
			rifLogger.info(getClass(), "Generated " + generatedCount + "/" + tileCount + 
				" tiles for: " + areaidCount + " areas in: " + geography + "." + geolevelName);
		}	
		finally {
			//Cleanup database resources
			connection.commit();
			SQLQueryUtility.close(statement);
			SQLQueryUtility.close(resultSet);	
			SQLQueryUtility.close(statement2);
			SQLQueryUtility.close(resultSet2);		
		}				

		return generatedCount;
	}

	/*
	 * Function:	generateTilesForGeoLevel()
	 * Returns:		Number of tiles generated
	 * Description: Generate tiles for geolevel from T_ tiles table (i.e. not the null tile)
	 */	
	private int generateTilesForGeoLevel(
		final Connection connection, 
		final Integer geolevelId, 
		final String tileTable, 
		final String geometryTable,
		final String geography, 
		final String geolevelName,
		final int tileCount,
		final int minZoomlevel,
		final int maxZoomlevel)
			throws RIFServiceException, SQLException {
		PreparedStatement statement = null;
		ResultSet resultSet = null;
		
		SelectQueryFormatter generateTilesForGeoLevelQueryFormatter
				= new MSSQLSelectQueryFormatter();

		//STEP 3: get the tile: zoomlevel, x, y, tile_id
		/*
			SELECT zoomlevel, x, y, tile_id
			  FROM rif_data.t_tiles_sahsuland
			 WHERE geolevel_id = 4
			 ORDER BY zoomlevel, x, y;
		*/

		generateTilesForGeoLevelQueryFormatter.addSelectField("zoomlevel");
		generateTilesForGeoLevelQueryFormatter.addSelectField("x");
		generateTilesForGeoLevelQueryFormatter.addSelectField("y");
		generateTilesForGeoLevelQueryFormatter.addSelectField("optimised_topojson");
		generateTilesForGeoLevelQueryFormatter.addFromTable("rif_data.t_" + tileTable.toLowerCase());
		generateTilesForGeoLevelQueryFormatter.addWhereParameter("rif_data.t_" + tileTable.toLowerCase(), "geolevel_id");
		generateTilesForGeoLevelQueryFormatter.addOrderByCondition("zoomlevel", SelectQueryFormatter.SortOrder.ASCENDING);
		generateTilesForGeoLevelQueryFormatter.addOrderByCondition("x", SelectQueryFormatter.SortOrder.ASCENDING);
		generateTilesForGeoLevelQueryFormatter.addOrderByCondition("y", SelectQueryFormatter.SortOrder.ASCENDING);

		baseSQLManager.logSQLQuery(
				"generateTiles",
				generateTilesForGeoLevelQueryFormatter,
				geolevelId.toString());
		int generatedCount=0;

		try {
			statement = connection.prepareStatement(generateTilesForGeoLevelQueryFormatter.generateQuery());
			statement.setInt(1, geolevelId.intValue());

			resultSet = statement.executeQuery();
			int i=0;
			while (resultSet.next()) {
				i++;
				int zoomlevel=resultSet.getInt(1);	
				int x=resultSet.getInt(2);		
				int y=resultSet.getInt(3);			
				String optimisedTopojson=resultSet.getString(4);	
				File file=getCachedTileFile(geography, zoomlevel, geolevelName, x, y, "png");	
				if (!file.exists()) {
					generatedCount++;
					rifLogger.info(getClass(), "Generate GeoJSON  (" + i + "/" + tileCount + "): " + file.toString());

					JSONObject tileTopoJson = new JSONObject(optimisedTopojson);
					JSONArray bboxJson = tile2boundingBox(x, y, zoomlevel);
					JSONObject tileGeoJson = topoJson2geoJson(connection, 
						tileTopoJson, bboxJson, tileTable, geometryTable, 
						geography, zoomlevel, geolevelName, x, y, false /* addBoundingBoxToTile */,
						minZoomlevel, maxZoomlevel);
						
					rifLogger.info(getClass(), "Generate PNG tile (" + i + "/" + tileCount + "): " + file.toString());
					String result = geoJson2png(
						tileGeoJson, 
						bboxJson, 
						geography, 
						zoomlevel, 
						geolevelName, 
						x, 
						y); 
							
				}
			}	
		}	
		catch (JSONException jsonException) {
			throw new RIFServiceException(
				RIFServiceError.TILE_GENERATE_JSON_ERROR,
				jsonException.getMessage(), jsonException);
		}		
		catch (IOException ioException) {
			throw new RIFServiceException(
				RIFServiceError.TILE_CACHE_FILE_WRITE_ERROR,
				ioException.getMessage(), ioException);
		}
		finally {
			//Cleanup database resources
			connection.commit();
			SQLQueryUtility.close(statement);
			SQLQueryUtility.close(resultSet);		
		}	

		return generatedCount;
	}
}