-- ************************************************************************
--
-- Description:
--
-- Rapid Enquiry Facility (RIF) - Tile maker
--
-- Copyright:
--
-- The Rapid Inquiry Facility (RIF) is an automated tool devised by SAHSU 
-- that rapidly addresses epidemiological and public health questions using 
-- routinely collected health and population data and generates standardised 
-- rates and relative risks for any given health outcome, for specified age 
-- and year ranges, for any given geographical area.
--
-- Copyright 2014 Imperial College London, developed by the Small Area
-- Health Statistics Unit. The work of the Small Area Health Statistics Unit 
-- is funded by the Public Health England as part of the MRC-PHE Centre for 
-- Environment and Health. Funding for this project has also been received 
-- from the Centers for Disease Control and Prevention.  
--
-- This file is part of the Rapid Inquiry Facility (RIF) project.
-- RIF is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- RIF is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General Public License
-- along with RIF. If not, see <http://www.gnu.org/licenses/>; or write 
-- to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
-- Boston, MA 02110-1301 USA
--
-- Author:
--
-- Peter Hambly, SAHSU
--
-- This script is autogenerated.
--
--
-- Create processed CSV tables created from shapefiles simplification:
--
-- a) Shapefile tables, e.g:
--    * cb_2014_us_county_500k                            
--    * cb_2014_us_nation_5m                            
--    * cb_2014_us_state_500k          
-- b) Psuedo control tables copies of RIF40 control tables, e.g:                   
--    * geography_usa_2014                               
--    * geolevels_usa_2014     
-- c) Processed geometry data (partitioned in PostGres), e.g:                          
--    * geometry_usa_2014                                  
-- d) Hierarchy table, e.g:
--    * hierarchy_usa_2014   
-- e) Lookup tables, e.g:
--    * lookup_cb_2014_us_county_500k             
--    * lookup_cb_2014_us_nation_5m                    
--    * lookup_cb_2014_us_state_500k             
-- f) Tables used to calculate tile interesections
--    * tile_blocks_usa_2014                         
--    * tile_intersects_usa_2014 (partitioned in PostGres) 
--    * tile_limits_usa_2014    
-- g) Tiles table and view               
--    * t_tiles_usa_2014           
--    * tiles_usa_2014    
--

--
-- MS SQL Server specific parameters
--
-- Usage: sqlcmd -E -b -m-1 -e -r1 -i mssql_SAHSULAND.sql -v pwd="%cd%"
-- Connect flags if required: -U <username>/-E -S<myServerinstanceName>
--
-- You must set the current schema if you cannot write to the default schema!
-- You need create privilege for the various object and the bulkadmin role
--
-- USE <my database>;
--
SET QUOTED_IDENTIFIER ON;
-- SET STATISTICS TIME ON;

--
-- Set schema variable used by scripts etc to CurrentUser (defined in each relevnt GO block)
--
:SETVAR SchemaName @CurrentUser
--

-- SQL statement 0: Start transaction >>>
BEGIN TRANSACTION;
GO

-- SQL statement 1: NON RIF initialisation >>>
/*
 * SQL statement name: 	startup.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:			None
 *
 * Description:			Run non RIF startup script
 * Note:				% becomes % after substitution
 */

--
-- Eof;
GO

-- SQL statement 2: Drop table sahsu_grd_level1 >>>
IF OBJECT_ID('sahsu_grd_level1', 'U') IS NOT NULL DROP TABLE sahsu_grd_level1;
GO

-- SQL statement 3: Create tablesahsu_grd_level1 >>>
CREATE TABLE sahsu_grd_level1 (
	id                             	NVARCHAR(1000) /* ID */,
	level1                         	NVARCHAR(1000) /* Level 1 */,
	area                           	NVARCHAR(1000) /* Area */,
	gid                            	integer	NOT NULL /* Unique geographic index */,
	areaid                         	varchar(100)	NOT NULL /* Area ID (LEVEL1): Level 1 name */,
	areaname                       	NVARCHAR(1000)	NOT NULL /* Area name (LEVEL1): Level 1 ID */,
	area_km2                       	numeric /* Area in square km */,
	geographic_centroid_wkt        	text /* Wellknown text for geographic centroid */,
	wkt_11                         	text /* Wellknown text for zoomlevel 11 */,
	wkt_10                         	text /* Wellknown text for zoomlevel 10 */,
	wkt_9                          	text /* Wellknown text for zoomlevel 9 */,
	wkt_8                          	text /* Wellknown text for zoomlevel 8 */,
	wkt_7                          	text /* Wellknown text for zoomlevel 7 */,
	wkt_6                          	text /* Wellknown text for zoomlevel 6 */);
GO

-- SQL statement 4: Comment geospatial data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1';
GO

-- SQL statement 5: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 6: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL1): Level 1 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL1): Level 1 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 7: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL1): Level 1 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL1): Level 1 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 8: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'area_km2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'area_km2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'area_km2';
GO

-- SQL statement 9: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'geographic_centroid_wkt';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt';
GO

-- SQL statement 10: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_6';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_6'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_6';
GO

-- SQL statement 11: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_7';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_7'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_7';
GO

-- SQL statement 12: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_8';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_8'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_8';
GO

-- SQL statement 13: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_9';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_9'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_9';
GO

-- SQL statement 14: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_10';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_10'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_10';
GO

-- SQL statement 15: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'wkt_11';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_11'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'wkt_11';
GO

-- SQL statement 16: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'id';
GO

-- SQL statement 17: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'level1';
GO

-- SQL statement 18: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level1';
SELECT @columnName  = 'area';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'area'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'area';
GO

-- SQL statement 19: Load table from CSV file >>>
BULK INSERT sahsu_grd_level1
FROM '$(pwd)/sahsu_grd_level1.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)/mssql_sahsu_grd_level1.fmt',		-- Use a format file
	TABLOCK,					-- Table lock
    DATAFILETYPE = 'widechar' -- Handle Unicode
);
GO

-- SQL statement 20: Row check: 1 >>>
DECLARE c1 CURSOR FOR SELECT COUNT(gid) AS total FROM sahsu_grd_level1;
/*
 * SQL statement name: 	csvfile_rowcheck.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: Expected number of rows; e.g. 3233
 *						3: Column to count; e.g. gid
 *
 * Description:			Check number of rows in loaded CSV file is as expected
 * Note:				%% becomes % after substitution
 */
DECLARE @c1_total AS int;
OPEN c1;
FETCH NEXT FROM c1 INTO @c1_total;
IF @c1_total = 1
	PRINT 'Table: sahsu_grd_level1 row check OK: ' + CAST(@c1_total AS VARCHAR);
ELSE
	RAISERROR('Table: sahsu_grd_level1 row check FAILED: expected: 1 got: %i', 16, 1, @c1_total);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 21: Add primary key sahsu_grd_level1 >>>
ALTER TABLE sahsu_grd_level1 ADD PRIMARY KEY (gid);
GO

-- SQL statement 22: Add unique key sahsu_grd_level1 >>>
/*
 * SQL statement name: 	add_unique_key.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. cb_2014_us_nation_5m
 *						2: constraint name; e.g. cb_2014_us_nation_5m_uk
 *						3: fields; e.g. areaid
 *
 * Description:			Add unique key constraint
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level1 ADD CONSTRAINT sahsu_grd_level1_uk UNIQUE(areaid);
GO

--
-- Add geometric  data
--

-- SQL statement 24: Add geometry column: geographic centroid >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geographic_centroid geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geographic_centroid geography;
GO

-- SQL statement 25: Add geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level1 ADD geom_orig geometry;
GO

-- SQL statement 26: Add geometry column for zoomlevel: 6 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_6 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_6 geography;
GO

-- SQL statement 27: Add geometry column for zoomlevel: 7 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_7 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_7 geography;
GO

-- SQL statement 28: Add geometry column for zoomlevel: 8 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_8 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_8 geography;
GO

-- SQL statement 29: Add geometry column for zoomlevel: 9 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_9 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_9 geography;
GO

-- SQL statement 30: Add geometry column for zoomlevel: 10 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_10 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_10 geography;
GO

-- SQL statement 31: Add geometry column for zoomlevel: 11 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level1 ADD geom_11 geometry
 */
ALTER TABLE sahsu_grd_level1 ADD geom_11 geography;
GO

-- SQL statement 32: Update geographic centroid, geometry columns, handle polygons and mutlipolygons, convert highest zoomlevel to original SRID >>>
UPDATE sahsu_grd_level1
   SET geographic_centroid = geography::STGeomFromText(geographic_centroid_wkt, 4326),
       geom_6 = geography::STGeomFromText(wkt_6, 4326).MakeValid(),
       geom_7 = geography::STGeomFromText(wkt_7, 4326).MakeValid(),
       geom_8 = geography::STGeomFromText(wkt_8, 4326).MakeValid(),
       geom_9 = geography::STGeomFromText(wkt_9, 4326).MakeValid(),
       geom_10 = geography::STGeomFromText(wkt_10, 4326).MakeValid(),
       geom_11 = geography::STGeomFromText(wkt_11, 4326).MakeValid(),
       geom_orig = geometry::STGeomFromText(geometry::STGeomFromText(wkt_11, 4326).MakeValid().STAsText(), 27700);
GO

--
-- Test geometry and make valid if required
--

-- SQL statement 34: Check validity of geometry columns >>>
DECLARE c1 CURSOR FOR
SELECT areaname,
       6 AS geolevel,
       geom_6.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_6.STIsValid() = 0
UNION
SELECT areaname,
       7 AS geolevel,
       geom_7.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_7.STIsValid() = 0
UNION
SELECT areaname,
       8 AS geolevel,
       geom_8.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_8.STIsValid() = 0
UNION
SELECT areaname,
       9 AS geolevel,
       geom_9.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_9.STIsValid() = 0
UNION
SELECT areaname,
       10 AS geolevel,
       geom_10.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_10.STIsValid() = 0
UNION
SELECT areaname,
       11 AS geolevel,
       geom_11.IsValidDetailed() AS reason
  FROM sahsu_grd_level1
 WHERE geom_11.STIsValid() = 0
ORDER BY 1, 2;
DECLARE @areaname AS VARCHAR(30);
DECLARE @geolevel AS int;
DECLARE @reason AS VARCHAR(90);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
	    PRINT 'Area: ' + @areaname + ', geolevel: ' + CAST(@geolevel AS VARCHAR) + ': ' +RTRIM(@reason);
       FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level1 no invalid geometry check OK';
ELSE
	RAISERROR('Table: sahsu_grd_level1 no invalid geometry check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;
GO

--
-- Make all polygons right handed
--

-- SQL statement 36: Make all polygons right handed for zoomlevel: 6 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_6.STUnion(geom_6.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_6.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_6,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_6.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_6,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_6 = c.geom_6.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 37: Make all polygons right handed for zoomlevel: 7 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_7.STUnion(geom_7.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_7.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_7,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_7.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_7,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_7 = c.geom_7.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 38: Make all polygons right handed for zoomlevel: 8 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_8.STUnion(geom_8.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_8.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_8,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_8.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_8,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_8 = c.geom_8.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 39: Make all polygons right handed for zoomlevel: 9 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_9.STUnion(geom_9.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_9.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_9,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_9.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_9,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_9 = c.geom_9.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 40: Make all polygons right handed for zoomlevel: 10 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_10.STUnion(geom_10.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_10.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_10,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_10.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_10,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_10 = c.geom_10.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 41: Make all polygons right handed for zoomlevel: 11 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_11.STUnion(geom_11.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_11.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_11,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level1
), b AS (
	SELECT a.gid,
	       a.geom_11,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level1
   SET geom_11 = c.geom_11.ReorientObject()
  FROM sahsu_grd_level1 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

--
-- Test Turf and DB areas agree to within 1%
--

--
-- Create spatial indexes
--

-- SQL statement 44: Index geometry column for zoomlevel: 6 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_6_gix ON sahsu_grd_level1 (geom_6);
GO

-- SQL statement 45: Index geometry column for zoomlevel: 7 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_7_gix ON sahsu_grd_level1 (geom_7);
GO

-- SQL statement 46: Index geometry column for zoomlevel: 8 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_8_gix ON sahsu_grd_level1 (geom_8);
GO

-- SQL statement 47: Index geometry column for zoomlevel: 9 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_9_gix ON sahsu_grd_level1 (geom_9);
GO

-- SQL statement 48: Index geometry column for zoomlevel: 10 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_10_gix ON sahsu_grd_level1 (geom_10);
GO

-- SQL statement 49: Index geometry column for zoomlevel: 11 >>>
CREATE SPATIAL INDEX sahsu_grd_level1_geom_11_gix ON sahsu_grd_level1 (geom_11);
GO

-- SQL statement 50: Index geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX sahsu_grd_level1_geom_orig_gix ON sahsu_grd_level1 (geom_orig)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

--
-- Reports
--

-- SQL statement 52: Areas and centroids report >>>
/*
 * SQL statement name: 	area_centroid_report.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Area and centroids report
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT areaname, geom_11,
		   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc,
		   CONCAT(
				CAST(CAST(geographic_centroid.Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geographic_centroid.Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid,
		   CONCAT(
				CAST(CAST(geom_11.EnvelopeCenter().Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geom_11.EnvelopeCenter().Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid_calc,
		   CAST((geom_11.EnvelopeCenter().STDistance(geographic_centroid))/1000 AS VARCHAR(30)) AS centroid_diff_km,
		   ROW_NUMBER() OVER (ORDER BY areaname) as nrow
	  FROM sahsu_grd_level1
)
SELECT SUBSTRING(a.areaname, 1, 30) AS areaname,
       a.area_km2,
	   a.area_km2_calc,
	   CASE WHEN area_km2 = 0 THEN NULL 
			ELSE CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(15,2)) 
			END AS pct_km2_diff,
	   a.geographic_centroid,
       a.geographic_centroid_calc,
	   a.centroid_diff_km
  FROM a
 WHERE nrow <= 100
 ORDER BY 1 ;
GO

-- SQL statement 53: Drop table sahsu_grd_level2 >>>
IF OBJECT_ID('sahsu_grd_level2', 'U') IS NOT NULL DROP TABLE sahsu_grd_level2;
GO

-- SQL statement 54: Create tablesahsu_grd_level2 >>>
CREATE TABLE sahsu_grd_level2 (
	level2                         	NVARCHAR(1000) /* Level 2 */,
	area                           	NVARCHAR(1000) /* Area */,
	level1                         	NVARCHAR(1000) /* Level 1 */,
	name                           	NVARCHAR(1000) /* Level 2 name */,
	gid                            	integer	NOT NULL /* Unique geographic index */,
	areaid                         	varchar(100)	NOT NULL /* Area ID (LEVEL2): Level 2 */,
	areaname                       	NVARCHAR(1000)	NOT NULL /* Area name (NAME): Level 2 name */,
	area_km2                       	numeric /* Area in square km */,
	geographic_centroid_wkt        	text /* Wellknown text for geographic centroid */,
	wkt_11                         	text /* Wellknown text for zoomlevel 11 */,
	wkt_10                         	text /* Wellknown text for zoomlevel 10 */,
	wkt_9                          	text /* Wellknown text for zoomlevel 9 */,
	wkt_8                          	text /* Wellknown text for zoomlevel 8 */,
	wkt_7                          	text /* Wellknown text for zoomlevel 7 */,
	wkt_6                          	text /* Wellknown text for zoomlevel 6 */);
GO

-- SQL statement 55: Comment geospatial data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2';
GO

-- SQL statement 56: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 57: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL2): Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL2): Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 58: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (NAME): Level 2 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (NAME): Level 2 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 59: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'area_km2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'area_km2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'area_km2';
GO

-- SQL statement 60: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'geographic_centroid_wkt';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt';
GO

-- SQL statement 61: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_6';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_6'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_6';
GO

-- SQL statement 62: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_7';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_7'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_7';
GO

-- SQL statement 63: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_8';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_8'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_8';
GO

-- SQL statement 64: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_9';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_9'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_9';
GO

-- SQL statement 65: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_10';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_10'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_10';
GO

-- SQL statement 66: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'wkt_11';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_11'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'wkt_11';
GO

-- SQL statement 67: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'level2';
GO

-- SQL statement 68: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'area';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'area'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'area';
GO

-- SQL statement 69: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'level1';
GO

-- SQL statement 70: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level2';
SELECT @columnName  = 'name';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'name'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2 name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'name';
GO

-- SQL statement 71: Load table from CSV file >>>
BULK INSERT sahsu_grd_level2
FROM '$(pwd)/sahsu_grd_level2.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)/mssql_sahsu_grd_level2.fmt',		-- Use a format file
	TABLOCK,					-- Table lock
    DATAFILETYPE = 'widechar' -- Handle Unicode
);
GO

-- SQL statement 72: Row check: 17 >>>
DECLARE c1 CURSOR FOR SELECT COUNT(gid) AS total FROM sahsu_grd_level2;
/*
 * SQL statement name: 	csvfile_rowcheck.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: Expected number of rows; e.g. 3233
 *						3: Column to count; e.g. gid
 *
 * Description:			Check number of rows in loaded CSV file is as expected
 * Note:				%% becomes % after substitution
 */
DECLARE @c1_total AS int;
OPEN c1;
FETCH NEXT FROM c1 INTO @c1_total;
IF @c1_total = 17
	PRINT 'Table: sahsu_grd_level2 row check OK: ' + CAST(@c1_total AS VARCHAR);
ELSE
	RAISERROR('Table: sahsu_grd_level2 row check FAILED: expected: 17 got: %i', 16, 1, @c1_total);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 73: Add primary key sahsu_grd_level2 >>>
ALTER TABLE sahsu_grd_level2 ADD PRIMARY KEY (gid);
GO

-- SQL statement 74: Add unique key sahsu_grd_level2 >>>
/*
 * SQL statement name: 	add_unique_key.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. cb_2014_us_nation_5m
 *						2: constraint name; e.g. cb_2014_us_nation_5m_uk
 *						3: fields; e.g. areaid
 *
 * Description:			Add unique key constraint
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level2 ADD CONSTRAINT sahsu_grd_level2_uk UNIQUE(areaid);
GO

--
-- Add geometric  data
--

-- SQL statement 76: Add geometry column: geographic centroid >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geographic_centroid geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geographic_centroid geography;
GO

-- SQL statement 77: Add geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level2 ADD geom_orig geometry;
GO

-- SQL statement 78: Add geometry column for zoomlevel: 6 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_6 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_6 geography;
GO

-- SQL statement 79: Add geometry column for zoomlevel: 7 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_7 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_7 geography;
GO

-- SQL statement 80: Add geometry column for zoomlevel: 8 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_8 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_8 geography;
GO

-- SQL statement 81: Add geometry column for zoomlevel: 9 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_9 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_9 geography;
GO

-- SQL statement 82: Add geometry column for zoomlevel: 10 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_10 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_10 geography;
GO

-- SQL statement 83: Add geometry column for zoomlevel: 11 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level2 ADD geom_11 geometry
 */
ALTER TABLE sahsu_grd_level2 ADD geom_11 geography;
GO

-- SQL statement 84: Update geographic centroid, geometry columns, handle polygons and mutlipolygons, convert highest zoomlevel to original SRID >>>
UPDATE sahsu_grd_level2
   SET geographic_centroid = geography::STGeomFromText(geographic_centroid_wkt, 4326),
       geom_6 = geography::STGeomFromText(wkt_6, 4326).MakeValid(),
       geom_7 = geography::STGeomFromText(wkt_7, 4326).MakeValid(),
       geom_8 = geography::STGeomFromText(wkt_8, 4326).MakeValid(),
       geom_9 = geography::STGeomFromText(wkt_9, 4326).MakeValid(),
       geom_10 = geography::STGeomFromText(wkt_10, 4326).MakeValid(),
       geom_11 = geography::STGeomFromText(wkt_11, 4326).MakeValid(),
       geom_orig = geometry::STGeomFromText(geometry::STGeomFromText(wkt_11, 4326).MakeValid().STAsText(), 27700);
GO

--
-- Test geometry and make valid if required
--

-- SQL statement 86: Check validity of geometry columns >>>
DECLARE c1 CURSOR FOR
SELECT areaname,
       6 AS geolevel,
       geom_6.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_6.STIsValid() = 0
UNION
SELECT areaname,
       7 AS geolevel,
       geom_7.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_7.STIsValid() = 0
UNION
SELECT areaname,
       8 AS geolevel,
       geom_8.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_8.STIsValid() = 0
UNION
SELECT areaname,
       9 AS geolevel,
       geom_9.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_9.STIsValid() = 0
UNION
SELECT areaname,
       10 AS geolevel,
       geom_10.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_10.STIsValid() = 0
UNION
SELECT areaname,
       11 AS geolevel,
       geom_11.IsValidDetailed() AS reason
  FROM sahsu_grd_level2
 WHERE geom_11.STIsValid() = 0
ORDER BY 1, 2;
DECLARE @areaname AS VARCHAR(30);
DECLARE @geolevel AS int;
DECLARE @reason AS VARCHAR(90);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
	    PRINT 'Area: ' + @areaname + ', geolevel: ' + CAST(@geolevel AS VARCHAR) + ': ' +RTRIM(@reason);
       FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level2 no invalid geometry check OK';
ELSE
	RAISERROR('Table: sahsu_grd_level2 no invalid geometry check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;
GO

--
-- Make all polygons right handed
--

-- SQL statement 88: Make all polygons right handed for zoomlevel: 6 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_6.STUnion(geom_6.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_6.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_6,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_6.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_6,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_6 = c.geom_6.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 89: Make all polygons right handed for zoomlevel: 7 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_7.STUnion(geom_7.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_7.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_7,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_7.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_7,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_7 = c.geom_7.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 90: Make all polygons right handed for zoomlevel: 8 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_8.STUnion(geom_8.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_8.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_8,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_8.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_8,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_8 = c.geom_8.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 91: Make all polygons right handed for zoomlevel: 9 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_9.STUnion(geom_9.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_9.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_9,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_9.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_9,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_9 = c.geom_9.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 92: Make all polygons right handed for zoomlevel: 10 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_10.STUnion(geom_10.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_10.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_10,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_10.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_10,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_10 = c.geom_10.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 93: Make all polygons right handed for zoomlevel: 11 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_11.STUnion(geom_11.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_11.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_11,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level2
), b AS (
	SELECT a.gid,
	       a.geom_11,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level2
   SET geom_11 = c.geom_11.ReorientObject()
  FROM sahsu_grd_level2 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

--
-- Test Turf and DB areas agree to within 1%
--

--
-- Create spatial indexes
--

-- SQL statement 96: Index geometry column for zoomlevel: 6 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_6_gix ON sahsu_grd_level2 (geom_6);
GO

-- SQL statement 97: Index geometry column for zoomlevel: 7 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_7_gix ON sahsu_grd_level2 (geom_7);
GO

-- SQL statement 98: Index geometry column for zoomlevel: 8 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_8_gix ON sahsu_grd_level2 (geom_8);
GO

-- SQL statement 99: Index geometry column for zoomlevel: 9 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_9_gix ON sahsu_grd_level2 (geom_9);
GO

-- SQL statement 100: Index geometry column for zoomlevel: 10 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_10_gix ON sahsu_grd_level2 (geom_10);
GO

-- SQL statement 101: Index geometry column for zoomlevel: 11 >>>
CREATE SPATIAL INDEX sahsu_grd_level2_geom_11_gix ON sahsu_grd_level2 (geom_11);
GO

-- SQL statement 102: Index geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX sahsu_grd_level2_geom_orig_gix ON sahsu_grd_level2 (geom_orig)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

--
-- Reports
--

-- SQL statement 104: Areas and centroids report >>>
/*
 * SQL statement name: 	area_centroid_report.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Area and centroids report
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT areaname, geom_11,
		   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc,
		   CONCAT(
				CAST(CAST(geographic_centroid.Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geographic_centroid.Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid,
		   CONCAT(
				CAST(CAST(geom_11.EnvelopeCenter().Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geom_11.EnvelopeCenter().Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid_calc,
		   CAST((geom_11.EnvelopeCenter().STDistance(geographic_centroid))/1000 AS VARCHAR(30)) AS centroid_diff_km,
		   ROW_NUMBER() OVER (ORDER BY areaname) as nrow
	  FROM sahsu_grd_level2
)
SELECT SUBSTRING(a.areaname, 1, 30) AS areaname,
       a.area_km2,
	   a.area_km2_calc,
	   CASE WHEN area_km2 = 0 THEN NULL 
			ELSE CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(15,2)) 
			END AS pct_km2_diff,
	   a.geographic_centroid,
       a.geographic_centroid_calc,
	   a.centroid_diff_km
  FROM a
 WHERE nrow <= 100
 ORDER BY 1 ;
GO

-- SQL statement 105: Drop table sahsu_grd_level3 >>>
IF OBJECT_ID('sahsu_grd_level3', 'U') IS NOT NULL DROP TABLE sahsu_grd_level3;
GO

-- SQL statement 106: Create tablesahsu_grd_level3 >>>
CREATE TABLE sahsu_grd_level3 (
	level2                         	NVARCHAR(1000) /* Level 2 */,
	level1                         	NVARCHAR(1000) /* Level 1 */,
	level3                         	NVARCHAR(1000) /* Level 3 */,
	gid                            	integer	NOT NULL /* Unique geographic index */,
	areaid                         	varchar(100)	NOT NULL /* Area ID (LEVEL3): Level 3 */,
	areaname                       	NVARCHAR(1000)	NOT NULL /* Area name (LEVEL3): Level 3 ID */,
	area_km2                       	numeric /* Area in square km */,
	geographic_centroid_wkt        	text /* Wellknown text for geographic centroid */,
	wkt_11                         	text /* Wellknown text for zoomlevel 11 */,
	wkt_10                         	text /* Wellknown text for zoomlevel 10 */,
	wkt_9                          	text /* Wellknown text for zoomlevel 9 */,
	wkt_8                          	text /* Wellknown text for zoomlevel 8 */,
	wkt_7                          	text /* Wellknown text for zoomlevel 7 */,
	wkt_6                          	text /* Wellknown text for zoomlevel 6 */);
GO

-- SQL statement 107: Comment geospatial data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3';
GO

-- SQL statement 108: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 109: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL3): Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL3): Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 110: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL3): Level 3 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL3): Level 3 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 111: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'area_km2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'area_km2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'area_km2';
GO

-- SQL statement 112: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'geographic_centroid_wkt';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt';
GO

-- SQL statement 113: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_6';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_6'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_6';
GO

-- SQL statement 114: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_7';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_7'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_7';
GO

-- SQL statement 115: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_8';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_8'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_8';
GO

-- SQL statement 116: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_9';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_9'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_9';
GO

-- SQL statement 117: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_10';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_10'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_10';
GO

-- SQL statement 118: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'wkt_11';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_11'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'wkt_11';
GO

-- SQL statement 119: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level2';
GO

-- SQL statement 120: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level1';
GO

-- SQL statement 121: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level3';
SELECT @columnName  = 'level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'level3';
GO

-- SQL statement 122: Load table from CSV file >>>
BULK INSERT sahsu_grd_level3
FROM '$(pwd)/sahsu_grd_level3.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)/mssql_sahsu_grd_level3.fmt',		-- Use a format file
	TABLOCK,					-- Table lock
    DATAFILETYPE = 'widechar'
);
GO

-- SQL statement 123: Row check: 200 >>>
DECLARE c1 CURSOR FOR SELECT COUNT(gid) AS total FROM sahsu_grd_level3;
/*
 * SQL statement name: 	csvfile_rowcheck.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: Expected number of rows; e.g. 3233
 *						3: Column to count; e.g. gid
 *
 * Description:			Check number of rows in loaded CSV file is as expected
 * Note:				%% becomes % after substitution
 */
DECLARE @c1_total AS int;
OPEN c1;
FETCH NEXT FROM c1 INTO @c1_total;
IF @c1_total = 200
	PRINT 'Table: sahsu_grd_level3 row check OK: ' + CAST(@c1_total AS VARCHAR);
ELSE
	RAISERROR('Table: sahsu_grd_level3 row check FAILED: expected: 200 got: %i', 16, 1, @c1_total);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 124: Add primary key sahsu_grd_level3 >>>
ALTER TABLE sahsu_grd_level3 ADD PRIMARY KEY (gid);
GO

-- SQL statement 125: Add unique key sahsu_grd_level3 >>>
/*
 * SQL statement name: 	add_unique_key.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. cb_2014_us_nation_5m
 *						2: constraint name; e.g. cb_2014_us_nation_5m_uk
 *						3: fields; e.g. areaid
 *
 * Description:			Add unique key constraint
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level3 ADD CONSTRAINT sahsu_grd_level3_uk UNIQUE(areaid);
GO

--
-- Add geometric  data
--

-- SQL statement 127: Add geometry column: geographic centroid >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geographic_centroid geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geographic_centroid geography;
GO

-- SQL statement 128: Add geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level3 ADD geom_orig geometry;
GO

-- SQL statement 129: Add geometry column for zoomlevel: 6 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_6 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_6 geography;
GO

-- SQL statement 130: Add geometry column for zoomlevel: 7 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_7 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_7 geography;
GO

-- SQL statement 131: Add geometry column for zoomlevel: 8 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_8 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_8 geography;
GO

-- SQL statement 132: Add geometry column for zoomlevel: 9 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_9 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_9 geography;
GO

-- SQL statement 133: Add geometry column for zoomlevel: 10 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_10 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_10 geography;
GO

-- SQL statement 134: Add geometry column for zoomlevel: 11 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level3 ADD geom_11 geometry
 */
ALTER TABLE sahsu_grd_level3 ADD geom_11 geography;
GO

-- SQL statement 135: Update geographic centroid, geometry columns, handle polygons and mutlipolygons, convert highest zoomlevel to original SRID >>>
UPDATE sahsu_grd_level3
   SET geographic_centroid = geography::STGeomFromText(geographic_centroid_wkt, 4326),
       geom_6 = geography::STGeomFromText(wkt_6, 4326).MakeValid(),
       geom_7 = geography::STGeomFromText(wkt_7, 4326).MakeValid(),
       geom_8 = geography::STGeomFromText(wkt_8, 4326).MakeValid(),
       geom_9 = geography::STGeomFromText(wkt_9, 4326).MakeValid(),
       geom_10 = geography::STGeomFromText(wkt_10, 4326).MakeValid(),
       geom_11 = geography::STGeomFromText(wkt_11, 4326).MakeValid(),
       geom_orig = geometry::STGeomFromText(geometry::STGeomFromText(wkt_11, 4326).MakeValid().STAsText(), 27700);
GO

--
-- Test geometry and make valid if required
--

-- SQL statement 137: Check validity of geometry columns >>>
DECLARE c1 CURSOR FOR
SELECT areaname,
       6 AS geolevel,
       geom_6.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_6.STIsValid() = 0
UNION
SELECT areaname,
       7 AS geolevel,
       geom_7.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_7.STIsValid() = 0
UNION
SELECT areaname,
       8 AS geolevel,
       geom_8.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_8.STIsValid() = 0
UNION
SELECT areaname,
       9 AS geolevel,
       geom_9.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_9.STIsValid() = 0
UNION
SELECT areaname,
       10 AS geolevel,
       geom_10.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_10.STIsValid() = 0
UNION
SELECT areaname,
       11 AS geolevel,
       geom_11.IsValidDetailed() AS reason
  FROM sahsu_grd_level3
 WHERE geom_11.STIsValid() = 0
ORDER BY 1, 2;
DECLARE @areaname AS VARCHAR(30);
DECLARE @geolevel AS int;
DECLARE @reason AS VARCHAR(90);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
	    PRINT 'Area: ' + @areaname + ', geolevel: ' + CAST(@geolevel AS VARCHAR) + ': ' +RTRIM(@reason);
       FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level3 no invalid geometry check OK';
ELSE
	RAISERROR('Table: sahsu_grd_level3 no invalid geometry check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;
GO

--
-- Make all polygons right handed
--

-- SQL statement 139: Make all polygons right handed for zoomlevel: 6 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_6.STUnion(geom_6.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_6.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_6,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_6.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_6,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_6 = c.geom_6.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 140: Make all polygons right handed for zoomlevel: 7 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_7.STUnion(geom_7.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_7.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_7,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_7.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_7,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_7 = c.geom_7.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 141: Make all polygons right handed for zoomlevel: 8 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_8.STUnion(geom_8.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_8.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_8,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_8.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_8,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_8 = c.geom_8.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 142: Make all polygons right handed for zoomlevel: 9 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_9.STUnion(geom_9.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_9.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_9,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_9.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_9,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_9 = c.geom_9.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 143: Make all polygons right handed for zoomlevel: 10 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_10.STUnion(geom_10.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_10.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_10,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_10.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_10,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_10 = c.geom_10.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 144: Make all polygons right handed for zoomlevel: 11 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_11.STUnion(geom_11.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_11.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_11,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level3
), b AS (
	SELECT a.gid,
	       a.geom_11,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level3
   SET geom_11 = c.geom_11.ReorientObject()
  FROM sahsu_grd_level3 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

--
-- Test Turf and DB areas agree to within 1%
--

--
-- Create spatial indexes
--

-- SQL statement 147: Index geometry column for zoomlevel: 6 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_6_gix ON sahsu_grd_level3 (geom_6);
GO

-- SQL statement 148: Index geometry column for zoomlevel: 7 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_7_gix ON sahsu_grd_level3 (geom_7);
GO

-- SQL statement 149: Index geometry column for zoomlevel: 8 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_8_gix ON sahsu_grd_level3 (geom_8);
GO

-- SQL statement 150: Index geometry column for zoomlevel: 9 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_9_gix ON sahsu_grd_level3 (geom_9);
GO

-- SQL statement 151: Index geometry column for zoomlevel: 10 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_10_gix ON sahsu_grd_level3 (geom_10);
GO

-- SQL statement 152: Index geometry column for zoomlevel: 11 >>>
CREATE SPATIAL INDEX sahsu_grd_level3_geom_11_gix ON sahsu_grd_level3 (geom_11);
GO

-- SQL statement 153: Index geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX sahsu_grd_level3_geom_orig_gix ON sahsu_grd_level3 (geom_orig)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

--
-- Reports
--

-- SQL statement 155: Areas and centroids report >>>
/*
 * SQL statement name: 	area_centroid_report.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Area and centroids report
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT areaname, geom_11,
		   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc,
		   CONCAT(
				CAST(CAST(geographic_centroid.Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geographic_centroid.Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid,
		   CONCAT(
				CAST(CAST(geom_11.EnvelopeCenter().Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geom_11.EnvelopeCenter().Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid_calc,
		   CAST((geom_11.EnvelopeCenter().STDistance(geographic_centroid))/1000 AS VARCHAR(30)) AS centroid_diff_km,
		   ROW_NUMBER() OVER (ORDER BY areaname) as nrow
	  FROM sahsu_grd_level3
)
SELECT SUBSTRING(a.areaname, 1, 30) AS areaname,
       a.area_km2,
	   a.area_km2_calc,
	   CASE WHEN area_km2 = 0 THEN NULL 
			ELSE CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(15,2)) 
			END AS pct_km2_diff,
	   a.geographic_centroid,
       a.geographic_centroid_calc,
	   a.centroid_diff_km
  FROM a
 WHERE nrow <= 100
 ORDER BY 1 ;
GO

-- SQL statement 156: Drop table sahsu_grd_level4 >>>
IF OBJECT_ID('sahsu_grd_level4', 'U') IS NOT NULL DROP TABLE sahsu_grd_level4;
GO

-- SQL statement 157: Create tablesahsu_grd_level4 >>>
CREATE TABLE sahsu_grd_level4 (
	perimeter                      	NVARCHAR(1000) /* Perimeter */,
	level4                         	NVARCHAR(1000) /* Level 4 */,
	level2                         	NVARCHAR(1000) /* Level 2 */,
	level1                         	NVARCHAR(1000) /* Level 1 */,
	level3                         	NVARCHAR(1000) /* Level 3 */,
	gid                            	integer	NOT NULL /* Unique geographic index */,
	areaid                         	varchar(100)	NOT NULL /* Area ID (LEVEL4): Level 4 */,
	areaname                       	NVARCHAR(1000)	NOT NULL /* Area name (LEVEL4): Level 4 ID */,
	area_km2                       	numeric /* Area in square km */,
	geographic_centroid_wkt        	text /* Wellknown text for geographic centroid */,
	wkt_11                         	text /* Wellknown text for zoomlevel 11 */,
	wkt_10                         	text /* Wellknown text for zoomlevel 10 */,
	wkt_9                          	text /* Wellknown text for zoomlevel 9 */,
	wkt_8                          	text /* Wellknown text for zoomlevel 8 */,
	wkt_7                          	text /* Wellknown text for zoomlevel 7 */,
	wkt_6                          	text /* Wellknown text for zoomlevel 6 */);
GO

-- SQL statement 158: Comment geospatial data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4';
GO

-- SQL statement 159: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Unique geographic index', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 160: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL4): Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID (LEVEL4): Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 161: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL4): Level 4 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area name (LEVEL4): Level 4 ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 162: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'area_km2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'area_km2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area in square km', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'area_km2';
GO

-- SQL statement 163: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'geographic_centroid_wkt';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid_wkt';
GO

-- SQL statement 164: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_6';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_6'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 6', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_6';
GO

-- SQL statement 165: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_7';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_7'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 7', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_7';
GO

-- SQL statement 166: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_8';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_8'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 8', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_8';
GO

-- SQL statement 167: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_9';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_9'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 9', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_9';
GO

-- SQL statement 168: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_10';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_10'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 10', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_10';
GO

-- SQL statement 169: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'wkt_11';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_11'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Wellknown text for zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'wkt_11';
GO

-- SQL statement 170: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'perimeter';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Perimeter', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'perimeter'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Perimeter', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'perimeter';
GO

-- SQL statement 171: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level4';
GO

-- SQL statement 172: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level2';
GO

-- SQL statement 173: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level1';
GO

-- SQL statement 174: Comment geospatial data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).sahsu_grd_level4';
SELECT @columnName  = 'level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'level3';
GO

-- SQL statement 175: Load table from CSV file >>>
BULK INSERT sahsu_grd_level4
FROM '$(pwd)/sahsu_grd_level4.csv'	-- Note use of pwd; set via -v pwd="%cd%" in the sqlcmd command line
WITH
(
	FORMATFILE = '$(pwd)/mssql_sahsu_grd_level4.fmt',		-- Use a format file
	TABLOCK,					-- Table lock
    DATAFILETYPE = 'widechar' -- Handle Unicode
);
GO

-- SQL statement 176: Row check: 1230 >>>
DECLARE c1 CURSOR FOR SELECT COUNT(gid) AS total FROM sahsu_grd_level4;
/*
 * SQL statement name: 	csvfile_rowcheck.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: Expected number of rows; e.g. 3233
 *						3: Column to count; e.g. gid
 *
 * Description:			Check number of rows in loaded CSV file is as expected
 * Note:				%% becomes % after substitution
 */
DECLARE @c1_total AS int;
OPEN c1;
FETCH NEXT FROM c1 INTO @c1_total;
IF @c1_total = 1230
	PRINT 'Table: sahsu_grd_level4 row check OK: ' + CAST(@c1_total AS VARCHAR);
ELSE
	RAISERROR('Table: sahsu_grd_level4 row check FAILED: expected: 1230 got: %i', 16, 1, @c1_total);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 177: Add primary key sahsu_grd_level4 >>>
ALTER TABLE sahsu_grd_level4 ADD PRIMARY KEY (gid);
GO

-- SQL statement 178: Add unique key sahsu_grd_level4 >>>
/*
 * SQL statement name: 	add_unique_key.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. cb_2014_us_nation_5m
 *						2: constraint name; e.g. cb_2014_us_nation_5m_uk
 *						3: fields; e.g. areaid
 *
 * Description:			Add unique key constraint
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level4 ADD CONSTRAINT sahsu_grd_level4_uk UNIQUE(areaid);
GO

--
-- Add geometric  data
--

-- SQL statement 180: Add geometry column: geographic centroid >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geographic_centroid geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geographic_centroid geography;
GO

-- SQL statement 181: Add geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE sahsu_grd_level4 ADD geom_orig geometry;
GO

-- SQL statement 182: Add geometry column for zoomlevel: 6 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_6 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_6 geography;
GO

-- SQL statement 183: Add geometry column for zoomlevel: 7 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_7 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_7 geography;
GO

-- SQL statement 184: Add geometry column for zoomlevel: 8 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_8 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_8 geography;
GO

-- SQL statement 185: Add geometry column for zoomlevel: 9 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_9 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_9 geography;
GO

-- SQL statement 186: Add geometry column for zoomlevel: 10 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_10 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_10 geography;
GO

-- SQL statement 187: Add geometry column for zoomlevel: 11 >>>
/*
 * SQL statement name: 	add_geometry_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. cb_2014_us_county_500k
 *						2: column name; e.g. geographic_centroid
 *						3: Column SRID; e.g. 4326
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON
 *
 * Description:			Add *** geography ***  column to table
 * Note:				%% becomes % after substitution
 *
 * May need to be swapped to geometry to be the same datatype as PostGIS (see: add_geometry_column2.sql):
 * ALTER TABLE sahsu_grd_level4 ADD geom_11 geometry
 */
ALTER TABLE sahsu_grd_level4 ADD geom_11 geography;
GO

-- SQL statement 188: Update geographic centroid, geometry columns, handle polygons and mutlipolygons, convert highest zoomlevel to original SRID >>>
UPDATE sahsu_grd_level4
   SET geographic_centroid = geography::STGeomFromText(geographic_centroid_wkt, 4326),
       geom_6 = geography::STGeomFromText(wkt_6, 4326).MakeValid(),
       geom_7 = geography::STGeomFromText(wkt_7, 4326).MakeValid(),
       geom_8 = geography::STGeomFromText(wkt_8, 4326).MakeValid(),
       geom_9 = geography::STGeomFromText(wkt_9, 4326).MakeValid(),
       geom_10 = geography::STGeomFromText(wkt_10, 4326).MakeValid(),
       geom_11 = geography::STGeomFromText(wkt_11, 4326).MakeValid(),
       geom_orig = geometry::STGeomFromText(geometry::STGeomFromText(wkt_11, 4326).MakeValid().STAsText(), 27700);
GO

--
-- Test geometry and make valid if required
--

-- SQL statement 190: Check validity of geometry columns >>>
DECLARE c1 CURSOR FOR
SELECT areaname,
       6 AS geolevel,
       geom_6.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_6.STIsValid() = 0
UNION
SELECT areaname,
       7 AS geolevel,
       geom_7.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_7.STIsValid() = 0
UNION
SELECT areaname,
       8 AS geolevel,
       geom_8.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_8.STIsValid() = 0
UNION
SELECT areaname,
       9 AS geolevel,
       geom_9.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_9.STIsValid() = 0
UNION
SELECT areaname,
       10 AS geolevel,
       geom_10.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_10.STIsValid() = 0
UNION
SELECT areaname,
       11 AS geolevel,
       geom_11.IsValidDetailed() AS reason
  FROM sahsu_grd_level4
 WHERE geom_11.STIsValid() = 0
ORDER BY 1, 2;
DECLARE @areaname AS VARCHAR(30);
DECLARE @geolevel AS int;
DECLARE @reason AS VARCHAR(90);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
	    PRINT 'Area: ' + @areaname + ', geolevel: ' + CAST(@geolevel AS VARCHAR) + ': ' +RTRIM(@reason);
       FETCH NEXT FROM c1 INTO @areaname, @geolevel, @reason;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level4 no invalid geometry check OK';
ELSE
	RAISERROR('Table: sahsu_grd_level4 no invalid geometry check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;
GO

--
-- Make all polygons right handed
--

-- SQL statement 192: Make all polygons right handed for zoomlevel: 6 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_6.STUnion(geom_6.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_6.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_6,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_6.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_6,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_6 = c.geom_6.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 193: Make all polygons right handed for zoomlevel: 7 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_7.STUnion(geom_7.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_7.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_7,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_7.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_7,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_7 = c.geom_7.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 194: Make all polygons right handed for zoomlevel: 8 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_8.STUnion(geom_8.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_8.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_8,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_8.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_8,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_8 = c.geom_8.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 195: Make all polygons right handed for zoomlevel: 9 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_9.STUnion(geom_9.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_9.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_9,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_9.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_9,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_9 = c.geom_9.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 196: Make all polygons right handed for zoomlevel: 10 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_10.STUnion(geom_10.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_10.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_10,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_10.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_10,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_10 = c.geom_10.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

-- SQL statement 197: Make all polygons right handed for zoomlevel: 11 >>>
/*
 * SQL statement name: 	force_rhr.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 * 						c.geom_11.STUnion(geom_11.STStartPoint()) is also possible from web comments, but DOES NOT work
 *						So always use c.geom_11.ReorientObject()
 */
WITH a AS (
	SELECT gid, geom_11,
		   CAST(area_km2 AS NUMERIC(21,6)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(21,6)) AS area_km2_calc
	  FROM sahsu_grd_level4
), b AS (
	SELECT a.gid,
	       a.geom_11,
           a.area_km2,
	       a.area_km2_calc,
          CASE WHEN a.area_km2 > 0 THEN CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(21,6))
				WHEN a.area_km2 = a.area_km2_calc THEN 0
	        	ELSE NULL
	   	   END AS pct_km2_diff 
  FROM a
)
UPDATE sahsu_grd_level4
   SET geom_11 = c.geom_11.ReorientObject()
  FROM sahsu_grd_level4 c
 JOIN b ON b.gid = c.gid
 WHERE b.pct_km2_diff > 200 /* Threshold test */;
GO

--
-- Test Turf and DB areas agree to within 1%
--

--
-- Create spatial indexes
--

-- SQL statement 200: Index geometry column for zoomlevel: 6 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_6_gix ON sahsu_grd_level4 (geom_6);
GO

-- SQL statement 201: Index geometry column for zoomlevel: 7 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_7_gix ON sahsu_grd_level4 (geom_7);
GO

-- SQL statement 202: Index geometry column for zoomlevel: 8 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_8_gix ON sahsu_grd_level4 (geom_8);
GO

-- SQL statement 203: Index geometry column for zoomlevel: 9 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_9_gix ON sahsu_grd_level4 (geom_9);
GO

-- SQL statement 204: Index geometry column for zoomlevel: 10 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_10_gix ON sahsu_grd_level4 (geom_10);
GO

-- SQL statement 205: Index geometry column for zoomlevel: 11 >>>
CREATE SPATIAL INDEX sahsu_grd_level4_geom_11_gix ON sahsu_grd_level4 (geom_11);
GO

-- SQL statement 206: Index geometry column for original SRID geometry >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX sahsu_grd_level4_geom_orig_gix ON sahsu_grd_level4 (geom_orig)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

--
-- Reports
--

-- SQL statement 208: Areas and centroids report >>>
/*
 * SQL statement name: 	area_centroid_report.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Area and centroids report
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT areaname, geom_11,
		   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
		   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc,
		   CONCAT(
				CAST(CAST(geographic_centroid.Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geographic_centroid.Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid,
		   CONCAT(
				CAST(CAST(geom_11.EnvelopeCenter().Long AS NUMERIC(15,7)) AS VARCHAR(30)),
				',',
				CAST(CAST(geom_11.EnvelopeCenter().Lat AS NUMERIC(15,7)) AS VARCHAR(30))
				) AS geographic_centroid_calc,
		   CAST((geom_11.EnvelopeCenter().STDistance(geographic_centroid))/1000 AS VARCHAR(30)) AS centroid_diff_km,
		   ROW_NUMBER() OVER (ORDER BY areaname) as nrow
	  FROM sahsu_grd_level4
)
SELECT SUBSTRING(a.areaname, 1, 30) AS areaname,
       a.area_km2,
	   a.area_km2_calc,
	   CASE WHEN area_km2 = 0 THEN NULL 
			ELSE CAST(100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2) AS NUMERIC(15,2)) 
			END AS pct_km2_diff,
	   a.geographic_centroid,
       a.geographic_centroid_calc,
	   a.centroid_diff_km
  FROM a
 WHERE nrow <= 100
 ORDER BY 1 ;
GO

--
-- Geography meta data
--

--
-- Drop dependent objects: tiles view and generate_series() [MS SQL Server only]
--

-- SQL statement 211: Drop generate_series() function >>>
/*
 * SQL statement name: 	drop_generate_series.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:			None
 * Description:			Drop generate_series() function (TF = SQL table-valued-function)
 */
IF OBJECT_ID (N'generate_series', N'TF') IS NOT NULL  
    DROP FUNCTION generate_series;  ;
GO

-- SQL statement 212: Drop dependent object - view tiles_sahsuland >>>
IF OBJECT_ID('tiles_sahsuland', 'V') IS NOT NULL DROP VIEW tiles_sahsuland;
GO

-- SQL statement 213: Drop dependent object - FK table geolevels_sahsuland >>>
IF OBJECT_ID('geolevels_sahsuland', 'U') IS NOT NULL DROP TABLE geolevels_sahsuland;
GO

-- SQL statement 214: Drop table geography_sahsuland >>>
IF OBJECT_ID('geography_sahsuland', 'U') IS NOT NULL DROP TABLE geography_sahsuland;
GO

-- SQL statement 215: Create generate_series() function >>>
/*
 * SQL statement name: 	generate_series.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:			None
 * Description:			Generate a series of values, from start to stop with a step size of step
 *						Original by: Simon Greener, Independent GeoSpatial Solutions Architect
 *						http://www.spatialdbadvisor.com/sql_server_blog/86/generate_series-for-sql-server-2008
 */
CREATE FUNCTION generate_series ( @p_start INT, @p_end INT, @p_step INT=1 )
RETURNS @Integers TABLE ( [IntValue] INT )
AS
BEGIN
    DECLARE
      @v_i                 INT,
      @v_step              INT,
      @v_terminating_value INT;
    BEGIN
      SET @v_i = CASE WHEN @p_start IS NULL THEN 1 ELSE @p_start END;
      SET @v_step  = CASE WHEN @p_step IS NULL OR @p_step = 0 THEN 1 ELSE @p_step END;
      SET @v_terminating_value =  @p_start + CONVERT(INT,ABS(@p_start-@p_end) / ABS(@v_step) ) * @v_step;
      -- Check for impossible combinations
      IF NOT ( ( @p_start > @p_end AND SIGN(@p_step) = 1 )
               OR
               ( @p_start < @p_end AND SIGN(@p_step) = -1 ))
      BEGIN
        -- Generate values
        WHILE ( 1 = 1 )
        BEGIN
           INSERT INTO @Integers ( [IntValue] ) VALUES ( @v_i )
           IF ( @v_i = @v_terminating_value )
              BREAK
           SET @v_i = @v_i + @v_step;
        END;
      END;
    END;
    RETURN
END;
GO

-- SQL statement 216: Create geography meta data table >>>
/*
 * SQL statement name: 	create_geography_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: geography table; e.g. geography_cb_2014_us_county_500k
 *
 * Description:			Create geography table compatible with RIF40_GEOGRAPHIES
 *
 *		CREATE TABLE rif40_geographies
 *		(
 *		  geography character varying(50) NOT NULL, -- Geography name
 *		  description character varying(250) NOT NULL, -- Description
 *		  hierarchytable character varying(30) NOT NULL, -- Hierarchy table
 *		  tiletable character varying(30) NOT NULL, -- Tile table
 *		  adjacencytable character varying(30) NOT NULL, -- Adjacency table
 *		  geometrytable character varying(30) NOT NULL, -- Geometry table
 *		  srid integer DEFAULT 0, -- Postgres projection SRID
 *		  defaultcomparea character varying(30), -- Default comparison area
 *		  defaultstudyarea character varying(30), -- Default study area
 *		  postal_population_table character varying(30), -- Postal population table. Table of postal points (e.g. postcodes, ZIP codes); geolevels; X and YCOORDINATES (in projection SRID); male, female and total populations. Converted to SRID points by loader [not in 4326 Web Mercator lat/long]. Used in creating population wieght centroids and in converting postal points to geolevels. Expected columns &lt;postal_point_column&gt;, XCOORDINATE, YCOORDINATE, 1+ &lt;GEOLEVEL_NAME&gt;, MALES, FEMALES, TOTAL
 *		  postal_point_column character varying(30), -- Column name for postal points (e.g. POSTCODE, ZIP_CODE)
 *		  partition smallint DEFAULT 0, -- Enable partitioning. Extract tables will be partition if the number of years >= 2x the RIF40_PARAMETERS parameters Parallelisation [which has a default of 4, so extracts covering 8 years or more will be partitioned].
 *		  max_geojson_digits smallint DEFAULT 8, -- Max digits in ST_AsGeoJson() [optimises file size by removing unecessary precision, the default value of 8 is normally fine.]
 *		  CONSTRAINT rif40_geographies_pk PRIMARY KEY (geography),
 *		  CONSTRAINT partition_ck CHECK (partition = ANY (ARRAY[0, 1])),
 *		  CONSTRAINT postal_population_table_ck CHECK (postal_population_table IS NOT NULL AND postal_point_column IS NOT NULL OR postal_population_table IS NULL AND postal_point_column IS NULL)
 *		)
 *		 
 * Note:				%% becomes % after substitution
 */
CREATE TABLE geography_sahsuland (
       geography               VARCHAR(50)  NOT NULL,
       description             VARCHAR(250) NOT NULL,
       hierarchytable          VARCHAR(30)  NOT NULL,
       geometrytable           VARCHAR(30)  NOT NULL,
       tiletable               VARCHAR(30)  NOT NULL,			/* New for DB */
	   adjacencytable 		   VARCHAR(30) NOT NULL,			/* New for DB */
       srid                    INTEGER      NOT NULL DEFAULT 0,
       defaultcomparea         VARCHAR(30)  NULL,
       defaultstudyarea        VARCHAR(30)  NULL,
       minzoomlevel       	   INTEGER      NOT NULL DEFAULT 6,  /* New for DB */
       maxzoomlevel       	   INTEGER      NOT NULL DEFAULT 11, /* New for DB */
       postal_population_table VARCHAR(30)  NULL,
       postal_point_column 	   VARCHAR(30)  NULL,
       partition 			   INTEGER      NOT NULL DEFAULT 0, 
       max_geojson_digits 	   INTEGER      NOT NULL DEFAULT 8, 	   
       CONSTRAINT geography_sahsuland_pk PRIMARY KEY(geography),
	   CONSTRAINT geography_sahsuland_part_ck CHECK (partition IN (0, 1)),
	   CONSTRAINT geography_sahsuland_ppt_ck CHECK (
			postal_population_table IS NOT NULL AND postal_point_column IS NOT NULL OR postal_population_table IS NULL AND postal_point_column IS NULL)
	);
GO

-- SQL statement 217: Comment geography meta data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchial geographies. Usually based on Census geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchial geographies. Usually based on Census geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland';
GO

-- SQL statement 218: Populate geography meta data table >>>
/*
 * SQL statement name: 	insert_geography.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOGRAPHY_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: geography description; e.g. United states to county level
 *						4: hierarchytable; e.g. HIERARCHY_CB_2014_US_500K
 *						5: geometrytable; e.g. GEOMETRY_CB_2014_US_500K
 *						6: tiletable; e.g. TILES_CB_2014_US_500K
 * 						7: SRID; e.g. 4269
 *						8: Default comparision area, e.g. GEOID
 *						9: Default study area, e.g. STATENS
 *						10: Min zoomlevel
 *						11: Max zoomlevel
 *           			12: Postal population table (quote enclosed or NULL)
 *      				13: Postal point column (quote enclosed or NULL)
 *						14: Partition (0/1)
 *						15: Max geojson digits
 *						16: adjacencytable; e.g. ADJACENCY_CB_2014_US_500K
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO geography_sahsuland (
geography, description, hierarchytable, geometrytable, tiletable, adjacencytable, srid, defaultcomparea, defaultstudyarea, minzoomlevel, maxzoomlevel,
		postal_population_table, postal_point_column, partition, max_geojson_digits)
SELECT 'SAHSULAND' AS geography,
       'SAHSU Example geography' AS description,
       'HIERARCHY_SAHSULAND' AS hierarchytable,
	   'GEOMETRY_SAHSULAND' AS geometrytable,
	   'TILES_SAHSULAND' AS tiletable,
	   'ADJACENCY_SAHSULAND' AS adjacencytable,
       27700   AS srid,
       NULL AS defaultcomparea,	/* See: update_geography.sql */
       NULL AS defaultstudyarea,
	   6  AS minzoomlevel,
	   11  AS maxzoomlevel,
	   NULL  AS postal_population_table,
       NULL  AS postal_point_column,
       0  AS partition, 
       6  AS max_geojson_digits;
GO

-- SQL statement 219: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'geography';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geography name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'geography'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geography name', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'geography';
GO

-- SQL statement 220: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'description';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Description', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'description'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Description', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'description';
GO

-- SQL statement 221: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'hierarchytable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'hierarchytable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'hierarchytable';
GO

-- SQL statement 222: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'geometrytable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'geometrytable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'geometrytable';
GO

-- SQL statement 223: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'tiletable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'tiletable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'tiletable';
GO

-- SQL statement 224: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'srid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Projection SRID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'srid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Projection SRID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'srid';
GO

-- SQL statement 225: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'defaultcomparea';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Default comparison area: lowest resolution geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'defaultcomparea'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Default comparison area: lowest resolution geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'defaultcomparea';
GO

-- SQL statement 226: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'defaultstudyarea';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Default study area: highest resolution geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'defaultstudyarea'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Default study area: highest resolution geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'defaultstudyarea';
GO

-- SQL statement 227: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'minzoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Min zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'minzoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Min zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'minzoomlevel';
GO

-- SQL statement 228: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'maxzoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Max zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'maxzoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Max zoomlevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'maxzoomlevel';
GO

-- SQL statement 229: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'postal_population_table';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Postal_population_table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'postal_population_table'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Postal_population_table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'postal_population_table';
GO

-- SQL statement 230: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'postal_point_column';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Postal_point_column', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'postal_point_column'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Postal_point_column', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'postal_point_column';
GO

-- SQL statement 231: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'partition';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Partition geometry and tile tables (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'partition'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Partition geometry and tile tables (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'partition';
GO

-- SQL statement 232: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'max_geojson_digits';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Maximum digits in geojson (topojson quantisation)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'max_geojson_digits'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Maximum digits in geojson (topojson quantisation)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'max_geojson_digits';
GO

-- SQL statement 233: Comment geography meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geography_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geography_sahsuland';
SELECT @columnName  = 'adjacencytable';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'adjacencytable'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geography_sahsuland',
		@level2type = N'Column', @level2name = 'adjacencytable';
GO

--
-- Geolevels meta data
--

-- SQL statement 235: Create geolevels meta data table >>>
/*
 * SQL statement name: 	create_geolevels_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: geolevels table; e.g. geolevels_cb_2014_us_county_500k
 *						2: geography table; e.g. geography_cb_2014_us_county_500k
 *
 * Description:			Create geography table compatible with RIF40_GEOGRAPHIES
 *
 *	CREATE TABLE t_rif40_geolevels
 *	(
 *	  geography character varying(50) NOT NULL, -- Geography (e.g EW2001)
 *	  geolevel_name character varying(30) NOT NULL, -- Name of geolevel. This will be a column name in the numerator/denominator tables
 *	  geolevel_id smallint NOT NULL, -- ID for ordering (1=lowest resolution). Up to 99 supported.
 *	  description character varying(250) NOT NULL, -- Description
 *	  lookup_table character varying(30) NOT NULL, -- Lookup table name. This is used to translate codes to the common names, e.g a LADUA of 00BK is &quot;Westminster&quot;
 *	  lookup_desc_column character varying(30) NOT NULL, -- Lookup table description column name.
 *	  centroidxcoordinate_column character varying(30), -- Lookup table centroid X co-ordinate column name. Can also use CENTROIDSFILE instead.
 *	  centroidycoordinate_column character varying(30), -- Lookup table centroid Y co-ordinate column name.
 *	  shapefile character varying(512), -- Location of the GIS shape file. NULL if PostGress/PostGIS used. Can also use SHAPEFILE_GEOMETRY instead,
 *	  centroidsfile character varying(512), -- Location of the GIS centroids file. Can also use CENTROIDXCOORDINATE_COLUMN, CENTROIDYCOORDINATE_COLUMN instead.
 *	  shapefile_table character varying(30), -- Table containing GIS shape file data (created using shp2pgsql).
 *	  shapefile_area_id_column character varying(30), -- Column containing the AREA_IDs in SHAPEFILE_TABLE
 *	  shapefile_desc_column character varying(30), -- Column containing the AREA_ID descriptions in SHAPEFILE_TABLE
 *	  centroids_table character varying(30), -- Table containing GIS shape file data with Arc GIS calculated population weighted centroids (created using shp2pgsql). PostGIS does not support population weighted centroids.
 *	  centroids_area_id_column character varying(30), -- Column containing the AREA_IDs in CENTROIDS_TABLE. X and Y co-ordinates ciolumns are asummed to be named after CENTROIDXCOORDINATE_COLUMN and CENTROIDYCOORDINATE_COLUMN.
 *	  covariate_table character varying(30), -- Name of table used for covariates at this geolevel
 *	  restricted smallint DEFAULT 0, -- Is geolevel access rectricted by Inforamtion Governance restrictions (0/1). If 1 (Yes) then a) students cannot access this geolevel and b) if the system parameter ExtractControl=1 then the user must be granted permission by a RIF_MANAGER to extract from the database the results, data extract and maps tables. This is enforced by the RIF application.
 *	  resolution smallint NOT NULL, -- Can use a map for selection at this resolution (0/1)
 *	  comparea smallint NOT NULL, -- Able to be used as a comparison area (0/1)
 *	  listing smallint NOT NULL, -- Able to be used in a disease map listing (0/1)
 *	  CONSTRAINT t_rif40_geolevels_pk PRIMARY KEY (geography, geolevel_name),
 *	  CONSTRAINT t_rif40_geol_comparea_ck CHECK (comparea IN (0, 1)),
 *	  CONSTRAINT t_rif40_geol_listing_ck CHECK (listing iN (0, 1)),
 *	  CONSTRAINT t_rif40_geol_resolution_ck CHECK (resolution IN (0, 1)),
 *	  CONSTRAINT t_rif40_geol_restricted_ck CHECK (restricted IN (0, 1))
 *	)
 *		 
 * Note:				%% becomes % after substitution
*/
CREATE TABLE geolevels_sahsuland (
       geography                       VARCHAR(50)  NOT NULL,
       geolevel_name                   VARCHAR(30)  NOT NULL,
       geolevel_id			           INTEGER	    NOT NULL,
       description                     VARCHAR(250) NOT NULL,
       lookup_table                    VARCHAR(30)  NOT NULL,
       lookup_desc_column              VARCHAR(30)  NOT NULL,
       shapefile                       VARCHAR(512) NOT NULL,
       shapefile_table                 VARCHAR(30)  NULL,
       shapefile_area_id_column        VARCHAR(30)  NOT NULL,
       shapefile_desc_column           VARCHAR(30)  NULL,
	   centroids_table 				   VARCHAR(30)  NULL, 
	   centroids_area_id_column 	   VARCHAR(30)  NULL,
	   covariate_table 				   VARCHAR(30)  NULL, 
       restricted 					   INTEGER      NULL DEFAULT 0,
       resolution                      INTEGER      NULL,
       comparea                        INTEGER      NULL,
       listing                         INTEGER      NULL,
	   areaid_count 				   INTEGER      NULL,
       CONSTRAINT geolevels_sahsuland_pk PRIMARY KEY(geography, geolevel_name),
	   CONSTRAINT geolevels_sahsuland_fk FOREIGN KEY (geography)
			REFERENCES geography_sahsuland (geography), 
	   CONSTRAINT geolevels_sahsuland_comparea_ck CHECK (comparea IN (0, 1)),
	   CONSTRAINT geolevels_sahsuland_listing_ck CHECK (listing iN (0, 1)),
	   CONSTRAINT geolevels_sahsuland_resolution_ck CHECK (resolution IN (0, 1)),
	   CONSTRAINT geolevels_sahsuland_restricted_ck CHECK (restricted IN (0, 1))
);
GO

-- SQL statement 236: Comment geolevels meta data table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevels: hierarchy of level within a geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geolevels: hierarchy of level within a geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland';
GO

-- SQL statement 237: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'geography';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geography (e.g EW2001)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geography'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geography (e.g EW2001)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geography';
GO

-- SQL statement 238: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'geolevel_name';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Name of geolevel. This will be a column name in the numerator/denominator tables', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_name'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Name of geolevel. This will be a column name in the numerator/denominator tables', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_name';
GO

-- SQL statement 239: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 240: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'description';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Description', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'description'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Description', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'description';
GO

-- SQL statement 241: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'lookup_table';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table name. This is used to translate codes to the common names, e.g a LADUA of 00BK is "Westminster"', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'lookup_table'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table name. This is used to translate codes to the common names, e.g a LADUA of 00BK is "Westminster"', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'lookup_table';
GO

-- SQL statement 242: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'lookup_desc_column';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table description column name.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'lookup_desc_column'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table description column name.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'lookup_desc_column';
GO

-- SQL statement 243: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'shapefile';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Location of the GIS shape file. NULL if PostGress/PostGIS used. Can also use SHAPEFILE_GEOMETRY instead', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Location of the GIS shape file. NULL if PostGress/PostGIS used. Can also use SHAPEFILE_GEOMETRY instead', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile';
GO

-- SQL statement 244: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'shapefile_table';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Table containing GIS shape file data.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_table'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Table containing GIS shape file data.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_table';
GO

-- SQL statement 245: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'shapefile_area_id_column';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Column containing the AREA_IDs in SHAPEFILE_TABLE', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_area_id_column'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Column containing the AREA_IDs in SHAPEFILE_TABLE', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_area_id_column';
GO

-- SQL statement 246: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'shapefile_desc_column';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Column containing the AREA_ID descriptions in SHAPEFILE_TABLE', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_desc_column'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Column containing the AREA_ID descriptions in SHAPEFILE_TABLE', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'shapefile_desc_column';
GO

-- SQL statement 247: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'resolution';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Can use a map for selection at this resolution (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'resolution'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Can use a map for selection at this resolution (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'resolution';
GO

-- SQL statement 248: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'comparea';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Able to be used as a comparison area (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'comparea'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Able to be used as a comparison area (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'comparea';
GO

-- SQL statement 249: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'listing';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Able to be used in a disease map listing (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'listing'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Able to be used in a disease map listing (0/1)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'listing';
GO

-- SQL statement 250: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'areaid_count';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of area IDs within the geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of area IDs within the geolevel', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count';
GO

-- SQL statement 251: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'centroids_table';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Centroids table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'centroids_table'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Centroids table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'centroids_table';
GO

-- SQL statement 252: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'centroids_area_id_column';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Centroids area id column', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'centroids_area_id_column'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Centroids area id column', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'centroids_area_id_column';
GO

-- SQL statement 253: Comment geolevels meta data column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geolevels_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geolevels_sahsuland';
SELECT @columnName  = 'covariate_table';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Covariate table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'covariate_table'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Covariate table', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geolevels_sahsuland',
		@level2type = N'Column', @level2name = 'covariate_table';
GO

-- SQL statement 254: Insert geolevels meta data for: sahsu_grd_level1 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO geolevels_sahsuland (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL1' AS geolevel_name,
       1 AS geolevel_id,
       'Level 1 (top level)' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL1' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level1.shp' AS shapefile,
       'SAHSU_GRD_LEVEL1' AS shapefile_table,
       'LEVEL1' AS shapefile_area_id_column,
       'LEVEL1' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   NULL AS covariate_table;
GO

-- SQL statement 255: Insert geolevels meta data for: sahsu_grd_level2 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO geolevels_sahsuland (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL2' AS geolevel_name,
       2 AS geolevel_id,
       'Level 2' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL2' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level2.shp' AS shapefile,
       'SAHSU_GRD_LEVEL2' AS shapefile_table,
       'LEVEL2' AS shapefile_area_id_column,
       'NAME' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL2' AS covariate_table;
GO

-- SQL statement 256: Insert geolevels meta data for: sahsu_grd_level3 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO geolevels_sahsuland (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL3' AS geolevel_name,
       3 AS geolevel_id,
       'Level 3' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL3' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level3.shp' AS shapefile,
       'SAHSU_GRD_LEVEL3' AS shapefile_table,
       'LEVEL3' AS shapefile_area_id_column,
       'LEVEL3' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL3' AS covariate_table;
GO

-- SQL statement 257: Insert geolevels meta data for: sahsu_grd_level4 >>>
/*
 * SQL statement name: 	insert_geolevel.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. GEOLEVELS_CB_2014_US_COUNTY_500K
 *						2: geography; e.g. CB_2014_US_500K
 *						3: Geolevel name; e.g. CB_2014_US_COUNTY_500K
 *						4: Geolevel id; e.g. 3
 *						5: Geolevel description; e.g. "The State-County at a scale of 1:500,000"
 *						6: lookup table; e.g. LOOKUP_CB_2014_US_COUNTY_500K
 * 						7: shapefile; e.g. cb_2014_us_county_500k.shp
 *						8: shapefile table; e.g. CB_2014_US_COUNTY_500K
 *						9: covariate_table; e.g. CB_2014_US_500K_COVARIATES_CB_2014_US_COUNTY_500K
 *						10: shapefile_area_id_column; e.g. COUNTYNS
 *						11: shapefile_desc_column; e.g. NAME
 * 						12: lookup_desc_column; e.g. AREANAME
 *						13: resolution: Can use a map for selection at this resolution (0/1)
 *						14: comparea: Able to be used as a comparison area (0/1)
 *						15: listing: Able to be used in a disease map listing (0/1)
 *
 * Description:			Insert into geography table
 * Note:				%% becomes % after substitution
 */
INSERT INTO geolevels_sahsuland (
   geography, geolevel_name, geolevel_id, description, lookup_table,
   lookup_desc_column, shapefile, shapefile_table, shapefile_area_id_column, shapefile_desc_column,
   resolution, comparea, listing, covariate_table)
SELECT 'SAHSULAND' AS geography,
       'SAHSU_GRD_LEVEL4' AS geolevel_name,
       4 AS geolevel_id,
       'Level 4' AS description,
       'LOOKUP_SAHSU_GRD_LEVEL4' AS lookup_table,
       'AREANAME' AS lookup_desc_column,
       'SAHSU_GRD_Level4.shp' AS shapefile,
       'SAHSU_GRD_LEVEL4' AS shapefile_table,
       'LEVEL4' AS shapefile_area_id_column,
       'LEVEL4' AS shapefile_desc_column,
       1 AS resolution,
       1 AS comparea,
       1 AS listing,
	   'COV_SAHSU_GRD_LEVEL4' AS covariate_table;
GO

--
-- Create Geolevels lookup tables
--

-- SQL statement 259: Drop table lookup_sahsu_grd_level1 >>>
IF OBJECT_ID('lookup_sahsu_grd_level1', 'U') IS NOT NULL DROP TABLE lookup_sahsu_grd_level1;
GO

-- SQL statement 260: Create table lookup_sahsu_grd_level1 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE lookup_sahsu_grd_level1 (
	sahsu_grd_level1			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level1)
);
GO

-- SQL statement 261: Comment table lookup_sahsu_grd_level1 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1';
GO

-- SQL statement 262: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1';
GO

-- SQL statement 263: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 264: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 265: Comment lookup_sahsu_grd_level1 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level1'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level1';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level1',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 266: Drop table lookup_sahsu_grd_level2 >>>
IF OBJECT_ID('lookup_sahsu_grd_level2', 'U') IS NOT NULL DROP TABLE lookup_sahsu_grd_level2;
GO

-- SQL statement 267: Create table lookup_sahsu_grd_level2 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE lookup_sahsu_grd_level2 (
	sahsu_grd_level2			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level2)
);
GO

-- SQL statement 268: Comment table lookup_sahsu_grd_level2 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2';
GO

-- SQL statement 269: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2';
GO

-- SQL statement 270: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 271: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 272: Comment lookup_sahsu_grd_level2 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level2'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level2';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level2',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 273: Drop table lookup_sahsu_grd_level3 >>>
IF OBJECT_ID('lookup_sahsu_grd_level3', 'U') IS NOT NULL DROP TABLE lookup_sahsu_grd_level3;
GO

-- SQL statement 274: Create table lookup_sahsu_grd_level3 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE lookup_sahsu_grd_level3 (
	sahsu_grd_level3			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level3)
);
GO

-- SQL statement 275: Comment table lookup_sahsu_grd_level3 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3';
GO

-- SQL statement 276: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3';
GO

-- SQL statement 277: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 278: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 279: Comment lookup_sahsu_grd_level3 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level3'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level3';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level3',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

-- SQL statement 280: Drop table lookup_sahsu_grd_level4 >>>
IF OBJECT_ID('lookup_sahsu_grd_level4', 'U') IS NOT NULL DROP TABLE lookup_sahsu_grd_level4;
GO

-- SQL statement 281: Create table lookup_sahsu_grd_level4 >>>
/*
 * SQL statement name: 	create_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: table; e.g. lookup_sahsu_grd_level1
 * 						2: Lookup column - shapefile table name, e.g. sahsu_grd_level1
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create lookup table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE lookup_sahsu_grd_level4 (
	sahsu_grd_level4			NVARCHAR(100)  NOT NULL,
	areaname	NVARCHAR(1000),
	gid			INTEGER		  NOT NULL,
	geographic_centroid		VARCHAR(1000),
	PRIMARY KEY (sahsu_grd_level4)
);
GO

-- SQL statement 282: Comment table lookup_sahsu_grd_level4 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Lookup table for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4';
GO

-- SQL statement 283: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4';
GO

-- SQL statement 284: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'gid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'GID field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'gid';
GO

-- SQL statement 285: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'areaname';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Name field', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'areaname';
GO

-- SQL statement 286: Comment lookup_sahsu_grd_level4 columns >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.lookup_sahsu_grd_level4'
ELSE
	SELECT @tableName = '$(SchemaName).lookup_sahsu_grd_level4';
SELECT @columnName  = 'geographic_centroid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geographic centroid', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'lookup_sahsu_grd_level4',
		@level2type = N'Column', @level2name = 'geographic_centroid';
GO

--
-- Insert Geolevels lookup tables
--

-- SQL statement 288: Insert table lookup_sahsu_grd_level1 >>>
/*
 * SQL statement name: 	insert_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: lookup table; e.g. lookup_sahsu_grd_level1
 *						2: shapefile table; e.g. sahsu_grd_level4
 *
 * Description:			Insert data into lookup table
 *						Centroid JSON: {"type":"Point","coordinates":[-6.36447811663261,55.1846108882703]}
 * Note:				%% becomes % after substitution
 */
INSERT INTO lookup_sahsu_grd_level1(sahsu_grd_level1, areaname, gid, geographic_centroid)
SELECT areaid, areaname, ROW_NUMBER() OVER(ORDER BY areaid) AS gid, 
	   '{"type":"Point","coordinates":[' + CAST(geographic_centroid.Long AS VARCHAR) +  ',' + 
			CAST(geographic_centroid.Lat AS VARCHAR) + ']}' AS geographic_centroid
  FROM sahsu_grd_level1
 ORDER BY 1;
GO

-- SQL statement 289: Insert table lookup_sahsu_grd_level2 >>>
/*
 * SQL statement name: 	insert_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: lookup table; e.g. lookup_sahsu_grd_level1
 *						2: shapefile table; e.g. sahsu_grd_level4
 *
 * Description:			Insert data into lookup table
 *						Centroid JSON: {"type":"Point","coordinates":[-6.36447811663261,55.1846108882703]}
 * Note:				%% becomes % after substitution
 */
INSERT INTO lookup_sahsu_grd_level2(sahsu_grd_level2, areaname, gid, geographic_centroid)
SELECT areaid, areaname, ROW_NUMBER() OVER(ORDER BY areaid) AS gid, 
	   '{"type":"Point","coordinates":[' + CAST(geographic_centroid.Long AS VARCHAR) +  ',' + 
			CAST(geographic_centroid.Lat AS VARCHAR) + ']}' AS geographic_centroid
  FROM sahsu_grd_level2
 ORDER BY 1;
GO

-- SQL statement 290: Insert table lookup_sahsu_grd_level3 >>>
/*
 * SQL statement name: 	insert_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: lookup table; e.g. lookup_sahsu_grd_level1
 *						2: shapefile table; e.g. sahsu_grd_level4
 *
 * Description:			Insert data into lookup table
 *						Centroid JSON: {"type":"Point","coordinates":[-6.36447811663261,55.1846108882703]}
 * Note:				%% becomes % after substitution
 */
INSERT INTO lookup_sahsu_grd_level3(sahsu_grd_level3, areaname, gid, geographic_centroid)
SELECT areaid, areaname, ROW_NUMBER() OVER(ORDER BY areaid) AS gid, 
	   '{"type":"Point","coordinates":[' + CAST(geographic_centroid.Long AS VARCHAR) +  ',' + 
			CAST(geographic_centroid.Lat AS VARCHAR) + ']}' AS geographic_centroid
  FROM sahsu_grd_level3
 ORDER BY 1;
GO

-- SQL statement 291: Insert table lookup_sahsu_grd_level4 >>>
/*
 * SQL statement name: 	insert_lookup_table.sql
 * Type:				Microsoft SQL Server T/sql
 * Parameters:
 *						1: lookup table; e.g. lookup_sahsu_grd_level1
 *						2: shapefile table; e.g. sahsu_grd_level4
 *
 * Description:			Insert data into lookup table
 *						Centroid JSON: {"type":"Point","coordinates":[-6.36447811663261,55.1846108882703]}
 * Note:				%% becomes % after substitution
 */
INSERT INTO lookup_sahsu_grd_level4(sahsu_grd_level4, areaname, gid, geographic_centroid)
SELECT areaid, areaname, ROW_NUMBER() OVER(ORDER BY areaid) AS gid, 
	   '{"type":"Point","coordinates":[' + CAST(geographic_centroid.Long AS VARCHAR) +  ',' + 
			CAST(geographic_centroid.Lat AS VARCHAR) + ']}' AS geographic_centroid
  FROM sahsu_grd_level4
 ORDER BY 1;
GO

--
-- Hierarchy table
--

-- SQL statement 293: Drop table hierarchy_sahsuland >>>
IF OBJECT_ID('hierarchy_sahsuland', 'U') IS NOT NULL DROP TABLE hierarchy_sahsuland;
GO

-- SQL statement 294: Create table hierarchy_sahsuland >>>
CREATE TABLE hierarchy_sahsuland (
	sahsu_grd_level1	VARCHAR(100)  NOT NULL,
	sahsu_grd_level2	VARCHAR(100)  NOT NULL,
	sahsu_grd_level3	VARCHAR(100)  NOT NULL,
	sahsu_grd_level4	VARCHAR(100)  NOT NULL);
GO

-- SQL statement 295: Add primary key hierarchy_sahsuland >>>
ALTER TABLE hierarchy_sahsuland ADD PRIMARY KEY (sahsu_grd_level4);
GO

-- SQL statement 296: Add index key hierarchy_sahsuland_sahsu_grd_level2 >>>
CREATE INDEX hierarchy_sahsuland_sahsu_grd_level2 ON hierarchy_sahsuland (sahsu_grd_level2);
GO

-- SQL statement 297: Add index key hierarchy_sahsuland_sahsu_grd_level3 >>>
CREATE INDEX hierarchy_sahsuland_sahsu_grd_level3 ON hierarchy_sahsuland (sahsu_grd_level3);
GO

-- SQL statement 298: Comment table: hierarchy_sahsuland >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland';
GO

-- SQL statement 299: Comment column: hierarchy_sahsuland.sahsu_grd_level1 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level1';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 1 (top level)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level1';
GO

-- SQL statement 300: Comment column: hierarchy_sahsuland.sahsu_grd_level2 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level2';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 2', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level2';
GO

-- SQL statement 301: Comment column: hierarchy_sahsuland.sahsu_grd_level3 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level3';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 3', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level3';
GO

-- SQL statement 302: Comment column: hierarchy_sahsuland.sahsu_grd_level4 >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.hierarchy_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).hierarchy_sahsuland';
SELECT @columnName  = 'sahsu_grd_level4';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Hierarchy lookup for Level 4', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'hierarchy_sahsuland',
		@level2type = N'Column', @level2name = 'sahsu_grd_level4';
GO

-- SQL statement 303: Create function check_hierarchy_sahsuland >>>
IF OBJECT_ID(N'check_hierarchy_sahsuland', N'P') IS NOT NULL  
    DROP PROCEDURE check_hierarchy_sahsuland;  
GO
SELECT name, type, type_desc FROM sys.objects WHERE name = 'check_hierarchy_sahsuland';
GO

CREATE PROCEDURE check_hierarchy_sahsuland(
	@l_geography 		VARCHAR(30), 
	@l_hierarchytable 	VARCHAR(200), 
	@l_type 			VARCHAR(30),
	@error_count 		INTEGER OUTPUT)
AS
/*
 * SQL statement name: 	check_hierarchy_function.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: function name; e.g. check_hierarchy_cb_2014_us_500k
 *
 * Description:			Create hierarchy check function
 * Note:				% becomes % after substitution
 */
 
/*
Function: 		check_hierarchy_sahsuland()
Parameters:		Geography, hierarchy table, type: 'missing', 'spurious additional' or 'multiple hierarchy'
Returns:		Nothing
Description:	Diff geography hierarchy table using dynamic method 4
				Also tests the hierarchy, i.e. all a higher resolutuion is contained by one of the next higher and so on

WITH /- multiple hierarchy -/ a2 AS (
        SELECT COUNT(*) AS cb_2014_us_state_500k_total
          FROM (
                SELECT cb_2014_us_state_500k, COUNT(DISTINCT(cb_2014_us_nation_5m)) AS total
                  FROM hierarchy_cb_2014_us_500k
                 GROUP BY cb_2014_us_state_500k
                HAVING COUNT(DISTINCT(cb_2014_us_nation_5m)) > 1) as2
), a3 AS (
        SELECT COUNT(*) AS cb_2014_us_county_500k_total
          FROM (
                SELECT cb_2014_us_county_500k, COUNT(DISTINCT(cb_2014_us_state_500k)) AS total
                  FROM hierarchy_cb_2014_us_500k
                 GROUP BY cb_2014_us_county_500k
                HAVING COUNT(DISTINCT(cb_2014_us_state_500k)) > 1) as3
)
SELECT CAST('cb_2014_us_state_500k' AS VARCHAR) AS col,
			a2.cb_2014_us_state_500k_total AS val
  FROM a2
UNION
SELECT CAST('cb_2014_us_county_500k' AS VARCHAR) AS col,
			a3.cb_2014_us_county_500k_total AS val
  FROM a3;
  
*/
BEGIN 
	DECLARE c2 CURSOR FOR
		SELECT geolevel_id, geolevel_name, lookup_table		
		  FROM geolevels_sahsuland
		 WHERE geography = @l_geography
		 ORDER BY geolevel_id;
--
	DECLARE @sql_stmt 				AS NVARCHAR(max)='XXX';
	DECLARE @i 						AS INTEGER=0;	
--
	DECLARE @crlf					AS VARCHAR(2)=CHAR(10)+CHAR(13);
	DECLARE @tab					AS VARCHAR(1)=CHAR(9);
--
	DECLARE @geolevel_id 			AS INTEGER;
	DECLARE @geolevel_name		 	AS VARCHAR(200);
	DECLARE @lookup_table 			AS VARCHAR(200);
	DECLARE @previous_geolevel_name AS VARCHAR(200);
--
	SET @error_count=0;
	SET @sql_stmt='WITH /* ' + @l_type + ' */ ';
--
	OPEN c2;
	FETCH NEXT FROM c2 INTO @geolevel_id, @geolevel_name, @lookup_table;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;
--
		IF @l_type = 'multiple hierarchy' 
			BEGIN
				IF @i = 1 
					noop:
				ELSE IF @i > 2
					SET @sql_stmt+=', ' + 'a' + CAST(@geolevel_id AS VARCHAR) + ' AS (' + @crlf +
							@tab + 'SELECT COUNT(*) AS ' + LOWER(@geolevel_name) + '_total' + @crlf +
							@tab + '  FROM (' + @crlf;
				ELSE
					SET @sql_stmt+='a' + CAST(@geolevel_id AS VARCHAR) + ' AS (' + @crlf +
							@tab + 'SELECT COUNT(*) AS ' + LOWER(@geolevel_name) + '_total' + @crlf +
							@tab + '  FROM (' + @crlf;
			END;
		ELSE
			BEGIN
				IF @i != 1
					SET @sql_stmt+=', ' + 'a' + CAST(@geolevel_id AS VARCHAR) + ' AS (' + @crlf;
				ELSE
					SET @sql_stmt+='a' + CAST(@geolevel_id AS VARCHAR) + ' AS (' + @crlf;
				SET @sql_stmt+=@tab + 'SELECT COUNT(*) AS ' + LOWER(@geolevel_name) + '_total' + @crlf +
					@tab + '  FROM (' + @crlf;
			END;
--
		IF @l_type = 'missing'
			SET @sql_stmt+=@tab + @tab + 'SELECT ' + LOWER(@geolevel_name) + 
				' FROM ' + LOWER(@l_hierarchytable) + @crlf +
				@tab + @tab + 'EXCEPT' + @crlf +
				@tab + @tab + 'SELECT ' + LOWER(@geolevel_name) + ' FROM ' + LOWER(@lookup_table) + 
				') as' + CAST(@geolevel_id AS VARCHAR) + ')' + @crlf;
		ELSE IF @l_type = 'spurious additional' 
			SET @sql_stmt+=@tab + @tab + 'SELECT ' + LOWER(@geolevel_name) + 
				' FROM ' + LOWER(@lookup_table) + @crlf +
				@tab + @tab + 'EXCEPT' + @crlf +
				@tab + @tab + 'SELECT ' + LOWER(@geolevel_name) + ' FROM ' + LOWER(@l_hierarchytable) + 
				') as' + CAST(@geolevel_id AS VARCHAR) + ')' + @crlf;
		ELSE IF @l_type = 'multiple hierarchy' 
			BEGIN
				IF @previous_geolevel_name IS NOT NULL 
					SET @sql_stmt+=@tab + @tab + 'SELECT ' + LOWER(@geolevel_name) + 
						', COUNT(DISTINCT(' + @previous_geolevel_name + ')) AS total' + @crlf +
						@tab + @tab + '  FROM ' + LOWER(@l_hierarchytable) + @crlf +
						@tab + @tab + ' GROUP BY ' + LOWER(@geolevel_name) + @crlf +
						@tab + @tab + 'HAVING COUNT(DISTINCT(' + @previous_geolevel_name + ')) > 1' + 
						') as' + CAST(@geolevel_id AS VARCHAR) + ')' + @crlf;
			END;
		ELSE
			RAISERROR('Invalid check type: %s, valid types are: ''missing'', ''spurious additional'', or ''multiple hierarchy''', 
				1, 16, @l_type 	/* Check type */);
		SET @previous_geolevel_name=LOWER(@geolevel_name);
--
		FETCH NEXT FROM c2 INTO @geolevel_id, @geolevel_name, @lookup_table;
	END;
	CLOSE c2;
--
	SET @i=0;
	OPEN c2;
	FETCH NEXT FROM c2 INTO @geolevel_id, @geolevel_name, @lookup_table;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;
		IF @l_type = 'multiple hierarchy' 
			BEGIN
			IF @i = 1
				noop2:
			ELSE IF @i > 2
				SET @sql_stmt+=@crlf + 'UNION' + @crlf + 'SELECT CAST(''' + LOWER(@geolevel_name) + 
					''' AS VARCHAR) AS col, ' + @crlf + 
					@tab + 'a' + CAST(@geolevel_id AS VARCHAR) + '.' + 
					LOWER(@geolevel_name) + '_total AS val' + @crlf +
					'  FROM a' + CAST(@geolevel_id AS VARCHAR);
			ELSE
				SET @sql_stmt+='SELECT CAST(''' + LOWER(@geolevel_name) + ''' AS VARCHAR) AS col,' + @crlf + 
					@tab + 'a' + CAST(@geolevel_id AS VARCHAR) + '.' + LOWER(@geolevel_name) + 
					'_total AS val' + @crlf +
					'  FROM a' + CAST(@geolevel_id AS VARCHAR);
			END;
		ELSE
			BEGIN
			IF @i != 1 
				SET @sql_stmt+=@crlf + 'UNION' + @crlf + 'SELECT CAST(''' + LOWER(@geolevel_name) + 
					''' AS VARCHAR) AS col, ' + @crlf + 
					@tab + 'a' + CAST(@geolevel_id AS VARCHAR) + '.' + 
					LOWER(@geolevel_name) + '_total AS val' + @crlf +
					'  FROM a' + CAST(@geolevel_id AS VARCHAR);
			ELSE
				SET @sql_stmt+='SELECT CAST(''' + LOWER(@geolevel_name) + ''' AS VARCHAR) AS col,' + @crlf + 
					@tab + 'a' + CAST(@geolevel_id AS VARCHAR) + '.' + LOWER(@geolevel_name) + 
					'_total AS val' + @crlf +
					'  FROM a' + CAST(@geolevel_id AS VARCHAR);
			END;	
--
		FETCH NEXT FROM c2 INTO @geolevel_id, @geolevel_name, @lookup_table;
	END;
	CLOSE c2;
--
	DEALLOCATE c2;
--	
	PRINT 'SQL> ' + @sql_stmt;
    DECLARE @results AS TABLE (
		col VARCHAR(200), val NUMERIC) 
	INSERT into @results EXECUTE sp_executesql @sql_stmt;
--
-- Process results table
--	
	DECLARE @col AS VARCHAR(200);
	DECLARE @val AS NUMERIC;
	DECLARE c1 CURSOR FOR
		SELECT col, val
		  FROM @results;
	OPEN c1;
	FETCH NEXT FROM c1 INTO @col, @val;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		PRINT 'Geography: ' + @l_geography + ' geolevel: ' + @col + ' has ' + CAST(@val AS VARCHAR) + 
			' ' + @l_type + ' codes';
		IF @val != 0
			SET @error_count+=1;	
--
		FETCH NEXT FROM c1 INTO @col, @val;
	END;
	CLOSE c1;  
--
	DEALLOCATE c1;
END;;
GO

-- SQL statement 304: Comment function check_hierarchy_sahsuland >>>
DECLARE @CurrentUser sysname  /*
 * SQL statement name: 	check_hierarchy_function_comment.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: function name; e.g. check_hierarchy_cb_2014_us_500k
 *
 * Description:			Create hierarchy check function comment
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty 'MS_Description',   
   'Procedure: 		check_hierarchy_check_hierarchy_sahsuland()
Parameters:		Geography, hierarchy table, type: "missing", "spurious additional" or "multiple hierarchy", 
				Error count (OUT)
Returns:		Nothing
Description:	Diff geography hierarchy table using dynamic method 4
				Also tests the hierarchy, i.e. all a higher resolutuion is contained by one of the next higher and so on

Example of dynamic SQL. Note the use of an array return type to achieve method 4

WITH /* missing */ a1 AS (
        SELECT COUNT(*) AS cb_2014_us_nation_5m_total
          FROM (
                SELECT cb_2014_us_nation_5m FROM hierarchy_cb_2014_us_500k
                EXCEPT
                SELECT cb_2014_us_nation_5m FROM lookup_cb_2014_us_nation_5m) as1)
, a2 AS (
        SELECT COUNT(*) AS cb_2014_us_state_500k_total
          FROM (
                SELECT cb_2014_us_state_500k FROM hierarchy_cb_2014_us_500k
                EXCEPT
                SELECT cb_2014_us_state_500k FROM lookup_cb_2014_us_state_500k) as2)
, a3 AS (
        SELECT COUNT(*) AS cb_2014_us_county_500k_total
          FROM (
                SELECT cb_2014_us_county_500k FROM hierarchy_cb_2014_us_500k
                EXCEPT
                SELECT cb_2014_us_county_500k FROM lookup_cb_2014_us_county_500k) as3)
SELECT ARRAY[a1.cb_2014_us_nation_5m_total, a2.cb_2014_us_state_500k_total, a3.cb_2014_us_county_500k_total] AS res_array
FROM a1, a2, a3;

Or: 

WITH /* multiple hierarchy */ a2 AS (
        SELECT COUNT(*) AS cb_2014_us_state_500k_total
          FROM (
                SELECT cb_2014_us_state_500k, COUNT(DISTINCT(cb_2014_us_nation_5m)) AS total
                  FROM hierarchy_cb_2014_us_500k
                 GROUP BY cb_2014_us_state_500k
                HAVING COUNT(DISTINCT(cb_2014_us_nation_5m)) > 1) as2)
, a3 AS (
        SELECT COUNT(*) AS cb_2014_us_county_500k_total
          FROM (
                SELECT cb_2014_us_county_500k, COUNT(DISTINCT(cb_2014_us_state_500k)) AS total
                  FROM hierarchy_cb_2014_us_500k
                 GROUP BY cb_2014_us_county_500k
                HAVING COUNT(DISTINCT(cb_2014_us_state_500k)) > 1) as3)
SELECT ARRAY[a2.cb_2014_us_state_500k_total, a3.cb_2014_us_county_500k_total] AS res_array
FROM a2, a3;
',
   'user', @CurrentUser,   
   'procedure', 'check_hierarchy_sahsuland';
GO

-- SQL statement 305: Insert into hierarchy_sahsuland >>>
DECLARE @l_geography AS VARCHAR(200)='SAHSULAND';
/*
 * SQL statement name: 	insert_hierarchy.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geography; e.g. cb_2014_us_500k
 *						2: Max zoomlevel
 *
 * Description:			Create insert statement into hierarchy table
 * Note:				%% becomes % after substitution
 *
 * Output for SAHSULAND:
 
Populating SAHSULAND geography hierarchy table: HIERARCHY_SAHSULAND; spid: 52
SQL> SELECT /- Subqueries x12 ... x34: intersection aggregate geometries starting from the lowest resolution.
               Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.
               Calculate the area of the higher resolution geolevel and the area of the intersected area -/
       a1.areaid AS SAHSU_GRD_LEVEL1,
       a2.areaid AS SAHSU_GRD_LEVEL2,
       a2.geom_orig.STArea() AS a2_area,
       a1.geom_orig.STIntersection(a2.geom_orig).STArea() AS a12_area
  INTO ##x12_52
  FROM SAHSU_GRD_LEVEL1 a1 CROSS JOIN SAHSU_GRD_LEVEL2 a2
 WHERE a1.geom_orig.STIntersects(a2.geom_orig) = 1

(17 rows affected)
SQL> SELECT /- Subqueries x23 ... x34: intersection aggregate geometries starting from the lowest resolution.
               Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.
               Calculate the area of the higher resolution geolevel and the area of the intersected area -/
       a2.areaid AS SAHSU_GRD_LEVEL2,
       a3.areaid AS SAHSU_GRD_LEVEL3,
       a3.geom_orig.STArea() AS a3_area,
       a2.geom_orig.STIntersection(a3.geom_orig).STArea() AS a23_area
  INTO ##x23_52
  FROM SAHSU_GRD_LEVEL2 a2 CROSS JOIN SAHSU_GRD_LEVEL3 a3
 WHERE a2.geom_orig.STIntersects(a3.geom_orig) = 1

(331 rows affected)
SQL> SELECT /- Subqueries x34 ... x34: intersection aggregate geometries starting from the lowest resolution.
               Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.
               Calculate the area of the higher resolution geolevel and the area of the intersected area -/
       a3.areaid AS SAHSU_GRD_LEVEL3,
       a4.areaid AS SAHSU_GRD_LEVEL4,
       a4.geom_orig.STArea() AS a4_area,
       a3.geom_orig.STIntersection(a4.geom_orig).STArea() AS a34_area
  INTO ##x34_52
  FROM SAHSU_GRD_LEVEL3 a3 CROSS JOIN SAHSU_GRD_LEVEL4 a4
 WHERE a3.geom_orig.STIntersects(a4.geom_orig) = 1

(50954 rows affected)
SQL>
SELECT /- Join x45 ... x34intersections, pass through the computed areas, compute intersected area/higher resolution geolevel area,
             compute maximum intersected area/higher resolution geolevel area using an analytic partition of all
             duplicate higher resolution geolevels -/
               x12.SAHSU_GRD_LEVEL1,
               x12.SAHSU_GRD_LEVEL2,
               x23.SAHSU_GRD_LEVEL3,
               x34.SAHSU_GRD_LEVEL4,
               CASE WHEN x12.a2_area > 0 THEN x12.a12_area/x12.a2_area ELSE NULL END test12,
               MAX(x12.a12_area/x12.a2_area) OVER (PARTITION BY x12.SAHSU_GRD_LEVEL2) AS max12,
               CASE WHEN x23.a3_area > 0 THEN x23.a23_area/x23.a3_area ELSE NULL END test23,
               MAX(x23.a23_area/x23.a3_area) OVER (PARTITION BY x23.SAHSU_GRD_LEVEL3) AS max23,
               CASE WHEN x34.a4_area > 0 THEN x34.a34_area/x34.a4_area ELSE NULL END test34,
               MAX(x34.a34_area/x34.a4_area) OVER (PARTITION BY x34.SAHSU_GRD_LEVEL4) AS max34
  INTO ##y_52
  FROM ##x12_52 x12, ##x23_52 x23, ##x34_52 x34
 WHERE x12.SAHSU_GRD_LEVEL2 = x23.SAHSU_GRD_LEVEL2
   AND x23.SAHSU_GRD_LEVEL3 = x34.SAHSU_GRD_LEVEL3

(84488 rows affected)
SQL> DROP TABLE ##x12_52
SQL> DROP TABLE ##x23_52
SQL> DROP TABLE ##x34_52
SQL> INSERT INTO hierarchy_sahsuland (sahsu_grd_level1, sahsu_grd_level2, sahsu_grd_level3, sahsu_grd_level4)
SELECT /- Select y intersection, eliminating duplicates using selecting the lower geolevel resolution
         with the largest intersection by area for each (higher resolution) geolevel -/
       sahsu_grd_level1, sahsu_grd_level2, sahsu_grd_level3, sahsu_grd_level4
  FROM ##y_52
 WHERE max12 = test12
   AND max12 > 0.5 /- >50% overlap -/
   AND max23 = test23
   AND max23 > 0.5 /- >50% overlap -/
   AND max34 = test34
   AND max34 > 0.5 /- >50% overlap -/
 ORDER BY 1, 2, 3, 4

(1230 rows affected)
SQL> DROP TABLE ##y_52
name
--------------------------------------------------------------------------------------------------------------------------------

(0 rows affected)
SQL> ALTER INDEX hierarchy_sahsuland_sahsu_grd_level2 ON hierarchy_sahsuland REORGANIZE
SQL> ALTER INDEX hierarchy_sahsuland_sahsu_grd_level3 ON hierarchy_sahsuland REORGANIZE
SQL> ALTER INDEX PK__hierarch__61FEBAD4794A035D ON hierarchy_sahsuland REORGANIZE
SQL> UPDATE STATISTICS hierarchy_sahsuland
 
 */
--
	
--
DECLARE c1_hier CURSOR FOR
		SELECT geolevel_id, geolevel_name, shapefile_table, shapefile_area_id_column, shapefile_desc_column 
		  FROM geolevels_SAHSULAND
		 WHERE geography = @l_geography
		 ORDER BY geography, geolevel_id;
DECLARE c2_hier CURSOR FOR
		SELECT i.name AS index_name, 
		       object_name(object_id) AS table_name
  		  FROM sys.indexes i
		 WHERE i.object_id = (
					 SELECT object_id(LOWER(hierarchytable))
				       FROM geography_SAHSULAND
				      WHERE geography = @l_geography)
		 ORDER BY 1;		 
DECLARE c4_hier CURSOR FOR		 
	SELECT geography, hierarchytable
		  FROM geography_SAHSULAND
		 WHERE geography = @l_geography;
DECLARE @c3 CURSOR;
DECLARE @geography		AS	VARCHAR(200);
DECLARE @hierarchytable AS 	VARCHAR(200);
--
DECLARE @columns		AS	VARCHAR(200);
DECLARE @sql_stmt	 	AS	NVARCHAR(max);
DECLARE @num_geolevels	AS	INTEGER=0;
--
DECLARE @geolevel_id 				AS INTEGER;
DECLARE @geolevel_name 				AS VARCHAR(200);
DECLARE @shapefile_table		 	AS VARCHAR(200);
DECLARE @shapefile_area_id_column 	AS VARCHAR(200);
DECLARE @shapefile_desc_column 		AS VARCHAR(200);
DECLARE @n_geolevel_name 			AS VARCHAR(200);
DECLARE @n_shapefile_table		 	AS VARCHAR(200);
DECLARE @n_shapefile_area_id_column AS VARCHAR(200);
DECLARE @n_shapefile_desc_column 	AS VARCHAR(200);
--
DECLARE @tablename	 	AS VARCHAR(200);
DECLARE @indexname	 	AS VARCHAR(200);

DECLARE @i 				AS INTEGER=0;
--
DECLARE @crlf			AS VARCHAR(2)=CHAR(10)+CHAR(13);
DECLARE @tab			AS VARCHAR(1)=CHAR(9);
--
DECLARE @rowcount		AS INTEGER=0;

--
BEGIN
--
	OPEN c4_hier;
	FETCH c4_hier INTO @geography, @hierarchytable;
	CLOSE c4_hier;
	DEALLOCATE c4_hier;
--
	IF @geography IS NULL
		RAISERROR('geography: %s not found', 16, 1, @l_geography	/* Geography */);
--
	 PRINT 'Populating ' + @l_geography + ' geography hierarchy table: ' + @hierarchytable + 
		'; spid: ' + CAST(@@spid AS VARCHAR);

	SET @num_geolevels=0;
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @num_geolevels+=1;	
		IF @num_geolevels = 1 
			SET @columns=LOWER(@geolevel_name);
		ELSE
			SET @columns+=', ' + LOWER(@geolevel_name);
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;
--	
	IF @num_geolevels = 0 
		RAISERROR('No rows found in: geolevels_%s for geography %s', 16, 1, @l_geography, @l_geography);
--
-- CTE x<n><n+1> - CROSS JOINs with intersections
--
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;

		DECLARE c1a_hier CURSOR FOR
				SELECT geolevel_name, shapefile_table, shapefile_area_id_column, shapefile_desc_column 
				  FROM geolevels_SAHSULAND
				 WHERE geography   = @l_geography
				   AND geolevel_id = @geolevel_id+1
				 ORDER BY geography, geolevel_id;		
		OPEN c1a_hier;
		FETCH NEXT FROM c1a_hier INTO @n_geolevel_name, @n_shapefile_table, 
									  @n_shapefile_area_id_column, @n_shapefile_desc_column;
		CLOSE c1a_hier;
		DEALLOCATE c1a_hier;

--		PRINT 'i: ' + CAST(@i AS VARCHAR) + '; num_geolevels: ' + CAST(@num_geolevels AS VARCHAR) + 
--			'; geolevel_name: ' + @geolevel_name + '; n_geolevel_name: ' + @n_geolevel_name;
		IF @i = 1
/* E.g

SELECT a1.areaid AS cb_2014_us_nation_5m,
	   a2.areaid AS cb_2014_us_state_500k,
	   a2.geom_orig.STArea() AS a2_area,
	   a1.geom_orig.STIntersection(a2.geom_orig).STArea() AS a12_area
  INTO dbo.#x12
  FROM cb_2014_us_nation_5m a1   CROSS JOIN cb_2014_us_state_500k a2
 WHERE a1.geom_orig.STIntersects(a2.geom_orig) = 1;
	
Postgres Original: 
	
x23 AS (
	SELECT a2.areaid AS level2,
       	   a3.areaid AS level3,
  	       ST_Area(a3.geom) AS a3_area,
	       ST_Area(ST_Intersection(a2.geom, a3.geom)) AS a23_area
          FROM a2 CROSS JOIN a3
	 WHERE ST_Intersects(a2.geom, a3.geom)
	 
SQL Server:

SELECT a1.areaid AS SAHSU_GRD_LEVEL1,
       a2.areaid AS SAHSU_GRD_LEVEL2,
       a2.geom_orig.STArea() AS a2_area,
       a1.geom_orig.STIntersection(a2.geom_orig).STArea() AS a12_area
  INTO x12_52
  FROM SAHSU_GRD_LEVEL1 a1 CROSS JOIN SAHSU_GRD_LEVEL2 a2
 WHERE a1.geom_orig.STIntersects(a2.geom_orig) = 1
   AND a1.geom_orig.STIntersection(a2.geom_orig).STArea() > 0;	 
	 
 */		
			BEGIN
				SET @sql_stmt=			
					'SELECT /* Subqueries x' +
						CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ' ... x' +
						CAST(@num_geolevels-1 AS VARCHAR) + CAST(@num_geolevels AS VARCHAR) +
						': intersection aggregate geometries starting from the lowest resolution.' + @crlf + 
						@tab + '       Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.' + @crlf +
						@tab + '       Calculate the area of the higher resolution geolevel and the area of the intersected area */' + @crlf +
					'       a' + CAST(@i AS VARCHAR) + '.areaid AS ' + @geolevel_name + ',' + @crlf + 
					'       a' + CAST(@i+1 AS VARCHAR) + '.areaid AS ' + @n_geolevel_name + ',' + @crlf +
					'       a' + CAST(@i+1 AS VARCHAR) + '.geom_orig.STArea() AS a' + CAST(@i+1 AS VARCHAR) + '_area,' + @crlf + 
					'       a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersection(a' + CAST(@i+1 AS VARCHAR) + '.geom_orig).STArea() AS a' + 
						CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_area' + @crlf + 
				    '  INTO ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_' + CAST(@@spid AS VARCHAR) + @crlf + 
					'  FROM ' + @shapefile_table + ' a' + CAST(@i AS VARCHAR) + 
					' CROSS JOIN ' + @n_shapefile_table + ' a' + CAST(@i+1 AS VARCHAR) + '' + @crlf + 
					' WHERE a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersects(a' + CAST(@i+1 AS VARCHAR) + '.geom_orig) = 1' + @crlf + 		
					'   AND a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersection(a' + CAST(@i+1 AS VARCHAR) + '.geom_orig).STArea() > 0';
				PRINT 'SQL> ' + @sql_stmt;
				EXECUTE @rowcount = sp_executesql @sql_stmt;	
			END;			
		ELSE IF @i < (@num_geolevels-1) 
/* E.g

SELECT a2.areaid AS cb_2014_us_state_500k,
	   a3.areaid AS cb_2014_us_county_500k,
	   a3.geom_orig.STArea() AS a3_area,
	   a2.geom_orig.STIntersection(a3.geom_orig).ST_Area() AS a23_area
  INTO dbo.#x23
  FROM cb_2014_us_state_500k a2  CROSS JOIN cb_2014_us_county_500k a3
 WHERE a2.geom_orig.STntersects(a3.geom_orig) = 1;

*/
			BEGIN
				SET @sql_stmt=
					'SELECT /* Subqueries x' + 
						CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ' ... x' + 
						CAST(@num_geolevels-1 AS VARCHAR) + CAST(@num_geolevels AS VARCHAR) + 
						': intersection aggregate geometries starting from the lowest resolution.' + @crlf + 
						@tab + '       Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.' + @crlf + 
						@tab + '       Calculate the area of the higher resolution geolevel and the area of the intersected area */' + @crlf + 
					'       a' + CAST(@i AS VARCHAR) + '.areaid AS ' + @geolevel_name + ',' + @crlf + 
					'       a' + CAST(@i+1 AS VARCHAR) + '.areaid AS ' + @n_geolevel_name + ',' + @crlf + 
					'       a' + CAST(@i+1 AS VARCHAR) + '.geom_orig.STArea() AS a' + CAST(@i+1 AS VARCHAR) + '_area,' + @crlf + 
					'       a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersection(a' + CAST(@i+1 AS VARCHAR) + '.geom_orig).STArea() AS a' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_area' + @crlf + 
				    '  INTO ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_' + CAST(@@spid AS VARCHAR) + @crlf + 
					'  FROM ' + @shapefile_table + ' a' + CAST(@i AS VARCHAR) + 
					' CROSS JOIN ' + @n_shapefile_table + ' a' + CAST(@i+1 AS VARCHAR) + '' + @crlf + 
					' WHERE a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersects(a' + CAST(@i+1 AS VARCHAR) + 
						'.geom_orig) = 1';
				PRINT 'SQL> ' + @sql_stmt;
				EXECUTE @rowcount = sp_executesql @sql_stmt;
			END;
		ELSE IF @i < @num_geolevels
/* E.g.

SELECT a2.areaid AS cb_2014_us_state_500k,
	   a3.areaid AS cb_2014_us_county_500k,
	   a3.geom_orig.STArea() AS a3_area,
	   a2.geom_orig.STIntersection(a3.geom_orig).STArea() AS a23_area
  INTO dbo.#x23
  FROM cb_2014_us_state_500k a2 CROSS JOIN cb_2014_us_county_500k a3
 WHERE a2.geom_orig.STIntersects(a3.geom_orig) = 1;
		
Postgres Original: 

 x34 AS (
	SELECT a3.level3, 
	       a4.level4,
  	       ST_Area(a4.geom) AS a4_area,
	       ST_Area(ST_Intersection(a3.geom, a4.geom)) a34_area
          FROM a3 CROSS JOIN a4
	 WHERE ST_Intersects(a3.geom, a4.geom)
*/
			BEGIN
				SET @sql_stmt=
					'SELECT /* Subqueries x' + 
						CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ' ... x' + 
						CAST(@num_geolevels-1 AS VARCHAR) + CAST(@num_geolevels AS VARCHAR) + 
						': intersection aggregate geometries starting from the lowest resolution.' + @crlf + 
						@tab + '       Created using N-1 geoevels cross joins rather than 1 to minimise cross join size and hence improve performance.' + @crlf + 
						@tab + '       Calculate the area of the higher resolution geolevel and the area of the intersected area */' + @crlf + 
					'       a' + CAST(@i AS VARCHAR) + '.areaid AS ' + @geolevel_name + ',' + @crlf + 
					'       a' + CAST(@i+1 AS VARCHAR) + '.areaid AS ' + @n_geolevel_name + ',' + @crlf + 
					'       a' + CAST(@i+1 AS VARCHAR) + '.geom_orig.STArea() AS a' + CAST(@i+1 AS VARCHAR) + '_area,' + @crlf + 
					'       a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersection(a' + CAST(@i+1 AS VARCHAR) + '.geom_orig).STArea() AS a' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_area' + @crlf + 
				    '  INTO ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_' + CAST(@@spid AS VARCHAR) + @crlf + 
					'  FROM ' + @shapefile_table + ' a' + CAST(@i AS VARCHAR) + ' CROSS JOIN ' + @n_shapefile_table + ' a' + CAST(@i+1 AS VARCHAR) + '' + @crlf + 
					' WHERE a' + CAST(@i AS VARCHAR) + '.geom_orig.STIntersects(a' + CAST(@i+1 AS VARCHAR) + 
						'.geom_orig) = 1';
				PRINT 'SQL> ' + @sql_stmt;
				EXECUTE @rowcount = sp_executesql @sql_stmt;
			END;
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;
--
-- CTE: y - compute intersected area, order analytically
--

/*
	SELECT x12.level1, x12.level2, x23.level3, x34.level4, 
	       CASE WHEN a2_area > 0 THEN a12_area/a2_area ELSE NULL END test12,
	       CASE WHEN a3_area > 0 THEN a23_area/a3_area ELSE NULL END test23,
	       CASE WHEN a4_area > 0 THEN a34_area/a4_area ELSE NULL END test34,
	       MAX(a12_area/a2_area) OVER (PARTITION BY x12.level2) AS max12,
	       MAX(a23_area/a3_area) OVER (PARTITION BY x23.level3) AS max23,
	       MAX(a34_area/a4_area) OVER (PARTITION BY x34.level4) AS max34
	  INTO #y
	  FROM x12, x23, x34
	 WHERE x12.level2 = x23.level2
   	   AND x23.level3 = x34.level3;
)
 */
	SET @sql_stmt=@crlf + 
		'SELECT /* Join x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ' ... x' + CAST(@num_geolevels-1 AS VARCHAR) + CAST(@num_geolevels AS VARCHAR) + 
			'intersections, pass through the computed areas, compute intersected area/higher resolution geolevel area,' + @crlf + 
		@tab + '     compute maximum intersected area/higher resolution geolevel area using an analytic partition of all' + @crlf + 
		@tab + '     duplicate higher resolution geolevels */' + @crlf;
--
-- First line of SELECT statement
--
	SET @i=0;
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;	
									 
		DECLARE c1a_hier CURSOR FOR
				SELECT geolevel_name, shapefile_table, shapefile_area_id_column, shapefile_desc_column 
				  FROM geolevels_SAHSULAND
				 WHERE geography   = @l_geography
				   AND geolevel_id = @geolevel_id+1
				 ORDER BY geography, geolevel_id;		
		OPEN c1a_hier;
		FETCH NEXT FROM c1a_hier INTO @n_geolevel_name, @n_shapefile_table, 
									  @n_shapefile_area_id_column, @n_shapefile_desc_column;
		CLOSE c1a_hier;
		DEALLOCATE c1a_hier;
		
--		PRINT 'i: ' + CAST(@i AS VARCHAR) + '; num_geolevels: ' + CAST(@num_geolevels AS VARCHAR) + 
--			'; geolevel_name: ' + @geolevel_name + '; n_geolevel_name: ' + @n_geolevel_name;
			
		IF @i < @num_geolevels 
		BEGIN
			IF @i = 1
				SET @sql_stmt+=
					@tab + '       x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.' + 
						@geolevel_name + ', ' + @crlf;
			SET @sql_stmt+=
				@tab + '       x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.' + 
					@n_geolevel_name + ', ' + @crlf;
		END;
		
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;
--
-- Add CASE, MAX lines
-- 
	SET @i=0;
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;	
									 
		DECLARE c1a_hier CURSOR FOR
				SELECT geolevel_name, shapefile_table, shapefile_area_id_column, shapefile_desc_column 
				  FROM geolevels_SAHSULAND
				 WHERE geography   = @l_geography
				   AND geolevel_id = @geolevel_id+1
				 ORDER BY geography, geolevel_id;		
		OPEN c1a_hier;
		FETCH NEXT FROM c1a_hier INTO @n_geolevel_name, @n_shapefile_table, 
									  @n_shapefile_area_id_column, @n_shapefile_desc_column;
		CLOSE c1a_hier;
		DEALLOCATE c1a_hier;
		
--		PRINT 'i: ' + CAST(@i AS VARCHAR) + '; num_geolevels: ' + CAST(@num_geolevels AS VARCHAR) + 
--			'; geolevel_name: ' + @geolevel_name + '; n_geolevel_name: ' + @n_geolevel_name;
			
		IF @i < @num_geolevels 
		BEGIN
			SET @sql_stmt+=
	    		@tab + '       CASE WHEN x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.a' + 
						CAST(@i+1 AS VARCHAR) + '_area > 0 THEN x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
						'.a' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_area/x' + 
						CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.a' + CAST(@i+1 AS VARCHAR) + 
					'_area ELSE NULL END test' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ',' + @crlf +
				@tab + '       MAX(x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.a' + 
					CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '_area/x' + 
					CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.a' + CAST(@i+1 AS VARCHAR) + '_area)' + 
					' OVER (PARTITION BY x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
					'.' + @n_geolevel_name + ') AS max' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ',' + @crlf;		
		END;
		
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;
--
-- Trim last CRLF
--
	SET @sql_stmt=SUBSTRING(@sql_stmt, 1, LEN(@sql_stmt)-LEN(','+@crlf)) /* Chop off last ",\r\n" */ + @crlf;
--
-- Add INTO clause
--
	SET @sql_stmt+='  INTO ##y' + '_' + CAST(@@spid AS VARCHAR) + @crlf;
--
-- Add FROM clause
-- 
	SET @i=0;
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;	
		
--		PRINT 'i: ' + CAST(@i AS VARCHAR) + '; num_geolevels: ' + CAST(@num_geolevels AS VARCHAR) + 
--			'; geolevel_name: ' + @geolevel_name + '; n_geolevel_name: ' + @n_geolevel_name;
			
		IF @i < @num_geolevels 
		BEGIN
			IF @i = 1 
				SET @sql_stmt+='  FROM ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) +
					'_' + CAST(@@spid AS VARCHAR) +
					' x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR);
			ELSE
				SET @sql_stmt+=', ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
					'_' + CAST(@@spid AS VARCHAR) +
					' x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR);
		END;
		
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;
--
-- Add WHERE clause
-- 
	SET @i=0;
	OPEN c1_hier;
	FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
								 @shapefile_area_id_column, @shapefile_desc_column;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @i+=1;	
									 
		DECLARE c1a_hier CURSOR FOR
				SELECT geolevel_name, shapefile_table, shapefile_area_id_column, shapefile_desc_column 
				  FROM geolevels_SAHSULAND
				 WHERE geography   = @l_geography
				   AND geolevel_id = @geolevel_id+1
				 ORDER BY geography, geolevel_id;		
		OPEN c1a_hier;
		FETCH NEXT FROM c1a_hier INTO @n_geolevel_name, @n_shapefile_table, 
									  @n_shapefile_area_id_column, @n_shapefile_desc_column;
		CLOSE c1a_hier;
		DEALLOCATE c1a_hier;
		
--		PRINT 'i: ' + CAST(@i AS VARCHAR) + '; num_geolevels: ' + CAST(@num_geolevels AS VARCHAR) + 
--			'; geolevel_name: ' + @geolevel_name + '; n_geolevel_name: ' + @n_geolevel_name;
			
		IF @i < (@num_geolevels-1) /* FOR i IN 1 .. (num_geolevels-2) LOOP */
		BEGIN
			IF @i = 1 
				SET @sql_stmt+=@crlf + 
					' WHERE x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.' + @n_geolevel_name + 
						' = x' + CAST(@i+1 AS VARCHAR) + CAST(@i+2 AS VARCHAR) + '.' + @n_geolevel_name;
			ELSE
				SET @sql_stmt+=@crlf + 
					'   AND x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + '.' + @n_geolevel_name + 
						' = x' + CAST(@i+1 AS VARCHAR) + CAST(@i+2 AS VARCHAR) + '.' + @n_geolevel_name;
		END;		
		FETCH NEXT FROM c1_hier INTO @geolevel_id, @geolevel_name, @shapefile_table, 
									 @shapefile_area_id_column, @shapefile_desc_column;
	END;
	CLOSE c1_hier;	
--
-- Run SQL to create Y
--
	PRINT 'SQL> ' + @sql_stmt;
	EXECUTE @rowcount = sp_executesql @sql_stmt;
--
-- Drop x_NN temporary tables
--
	SET @i=1;
	WHILE @i < @num_geolevels
	BEGIN
		SET @sql_stmt='DROP TABLE ##x' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
				 '_' + CAST(@@spid AS VARCHAR);
		PRINT 'SQL> ' + @sql_stmt;
		EXECUTE @rowcount = sp_executesql @sql_stmt;
		SET @i+=1;	
	END;
	
--
-- Insert statement and columns
--
	SET @sql_stmt='INSERT INTO ' + LOWER(@hierarchytable) + ' (' + @columns + ')' + @crlf;	
	
--	
-- Final SELECT
--
/*
SELECT level1, level2, level3, level4,
  FROM y
 WHERE max12 = test12
   AND max23 = test23
   AND max34 = test34
 ORDER BY 1, 2, 3, 4;  
 */
	SET @sql_stmt+='SELECT /* Select y intersection, eliminating duplicates using selecting the lower geolevel resolution' + @crlf + 
         @tab + ' with the largest intersection by area for each (higher resolution) geolevel */' + @crlf + '       ' + @columns + @crlf +
		'  FROM ##y_' + CAST(@@spid AS VARCHAR) + @crlf;
--
-- WHERE clause
--
	SET @i=1;
	WHILE @i < @num_geolevels
	BEGIN
		IF @i = 1
			SET @sql_stmt+=' WHERE max' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
				' = test' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + @crlf;
		ELSE
			SET @sql_stmt+='   AND max' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + 
				' = test' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + @crlf;
--
-- Remove all joins that have <50% overlap
--				
		SET @sql_stmt+='   AND max' + CAST(@i AS VARCHAR) + CAST(@i+1 AS VARCHAR) + ' > 0.5 /* >50% overlap */' + @crlf;
		
		SET @i+=1;	
	END;
--
-- ORDER BY clause
--	
	SET @sql_stmt+=' ORDER BY 1';
	SET @i=2;
	WHILE @i <= @num_geolevels /* FOR i IN 2 .. num_geolevels LOOP */
	BEGIN	
		SET @sql_stmt+=', ' + CAST(@i AS VARCHAR);
		SET @i+=1;	
	END;	
--
	DEALLOCATE c1_hier;
--
	PRINT 'SQL> ' + @sql_stmt;
--
-- Execute SQL statement
--
	EXECUTE @i=sp_executesql @sql_stmt
	SET @rowcount = @@ROWCOUNT;
--
-- Drop Y temp table
--	
	SET @sql_stmt='DROP TABLE ##y_' + CAST(@@spid AS VARCHAR);
	PRINT 'SQL> ' + @sql_stmt;
	EXECUTE sp_executesql @sql_stmt;
	SELECT name FROM tempdb.sys.objects;
--
-- Check rows were inserted
--	
	IF @rowcount = 0 
		RAISERROR('No rows found in %s geography hierarchy table: %s; sp_executesql rval: %d', 16, 1, 
			@l_geography 			/* Geography */,
			@hierarchytable			/* Hierarchy table */,
			@i						/* Return value from sp_executesql() */);
--
-- Re-index
--
	OPEN c2_hier;
	FETCH NEXT FROM c2_hier INTO @indexname, @tablename;
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @sql_stmt='ALTER INDEX ' + @indexname + ' ON ' + @tablename + ' REORGANIZE';
		PRINT 'SQL> ' + @sql_stmt;
		EXECUTE sp_executesql @sql_stmt;	
		FETCH NEXT FROM c2_hier INTO @indexname, @tablename;
	END;
	CLOSE c2_hier;
	DEALLOCATE c2_hier;
--
-- Analyze
--
	SET @sql_stmt='UPDATE STATISTICS ' + LOWER(@hierarchytable);
	PRINT 'SQL> ' + @sql_stmt;
	EXECUTE sp_executesql @sql_stmt;			
END;
GO

-- SQL statement 306: Check intersctions  for geograpy: sahsuland >>>
DECLARE @l_geography AS VARCHAR(200)='SAHSULAND';
/*
 * SQL statement name: 	check_intersections.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geography; e.g. cb_2014_us_500k
 *
 * Description:			Check intersections
 * Note:				% becomes % after substitution
 */
--
	DECLARE c1 CURSOR FOR
		SELECT geography, hierarchytable
		  FROM geography_SAHSULAND
		 WHERE geography = @l_geography;
--
	DECLARE @geography 		AS VARCHAR(30);
	DECLARE @hierarchytable AS VARCHAR(200);
--
	DECLARE @CurrentUser	AS VARCHAR(60);
	DECLARE @function_name	AS VARCHAR(200);
	DECLARE @l_type			AS VARCHAR(30);
--
	DECLARE @e AS INTEGER=0;
	DECLARE @f AS INTEGER=0;
	DECLARE @g AS INTEGER=0;
BEGIN
--
	OPEN c1;
	FETCH c1 INTO @geography, @hierarchytable;
	CLOSE c1;
	DEALLOCATE c1;
--
	IF @geography IS NULL
		RAISERROR('geography: % not found', 16, 1, @l_geography	/* Geography */);
--
-- Call diff and multiple hierarchy tests
--
	SELECT @CurrentUser = user_name(); 
	SET @function_name=@CurrentUser + '.check_hierarchy_SAHSULAND';
	SET @l_type='missing';
	EXECUTE @function_name @geography, @hierarchytable, @l_type, @e;
	SET @l_type='spurious additional';
	EXECUTE @function_name @geography, @hierarchytable, @l_type, @f;
	SET @l_type='multiple hierarchy';
	EXECUTE @function_name @geography, @hierarchytable, @l_type, @g;
--
	IF @e+@f > 0
		RAISERROR('Geography: %s codes check %d missing, %d spurious additional, %d hierarchy fails', 16, 1,  
			@geography	/* Geography */, 
			@e			/* Missing */, 
			@f			/* Spurious additional */, 
			@g			/* Multiple hierarchy */);
	ELSE
		PRINT 'Geography: ' + @geography + ' codes check OK';
END;;
GO

--
-- Create geometry table
--

-- SQL statement 308: Drop geometry table geometry_sahsuland >>>
IF OBJECT_ID('geometry_sahsuland', 'U') IS NOT NULL DROP TABLE geometry_sahsuland;
GO

-- SQL statement 309: Create geometry table geometry_sahsuland >>>
/*
 * SQL statement name: 	create_geometry_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. geometry_cb_2014_us_500k
 *						2: schema; e.g.rif_data. or ""
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE TABLE geometry_sahsuland (
	geolevel_id		INTEGER			NOT NULL,
	areaid			VARCHAR(200)	NOT NULL,
	zoomlevel		INTEGER			NOT NULL);
GO

-- SQL statement 310: Add geom geometry column >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE geometry_sahsuland ADD geom geometry;
GO

-- SQL statement 311: Add bbox geometry column >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE geometry_sahsuland ADD bbox geometry;
GO

-- SQL statement 312: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'bbox';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'bbox'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'bbox';
GO

-- SQL statement 313: Comment geometry table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'All geolevels geometry combined into a single table for a single geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'All geolevels geometry combined into a single table for a single geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland';
GO

-- SQL statement 314: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 315: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to maxoomlevel (11). Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to maxoomlevel (11). Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 316: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 317: Comment geometry table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.geometry_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).geometry_sahsuland';
SELECT @columnName  = 'geom';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry data in SRID 4326 (WGS84).', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geom'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry data in SRID 4326 (WGS84).', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'geometry_sahsuland',
		@level2type = N'Column', @level2name = 'geom';
GO

--
-- Insert geometry table
--

-- SQL statement 319: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        6 AS zoomlevel,
       geometry::STGeomFromWKB(geom_6.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 320: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        7 AS zoomlevel,
       geometry::STGeomFromWKB(geom_7.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 321: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        8 AS zoomlevel,
       geometry::STGeomFromWKB(geom_8.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 322: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        9 AS zoomlevel,
       geometry::STGeomFromWKB(geom_9.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 323: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        10 AS zoomlevel,
       geometry::STGeomFromWKB(geom_10.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 324: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 1 geolevel_id,
       areaid,
        11 AS zoomlevel,
       geometry::STGeomFromWKB(geom_11.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level1
ORDER BY 1, 3, 2;
GO

-- SQL statement 325: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        6 AS zoomlevel,
       geometry::STGeomFromWKB(geom_6.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 326: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        7 AS zoomlevel,
       geometry::STGeomFromWKB(geom_7.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 327: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        8 AS zoomlevel,
       geometry::STGeomFromWKB(geom_8.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 328: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        9 AS zoomlevel,
       geometry::STGeomFromWKB(geom_9.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 329: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        10 AS zoomlevel,
       geometry::STGeomFromWKB(geom_10.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 330: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 2 geolevel_id,
       areaid,
        11 AS zoomlevel,
       geometry::STGeomFromWKB(geom_11.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level2
ORDER BY 1, 3, 2;
GO

-- SQL statement 331: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        6 AS zoomlevel,
       geometry::STGeomFromWKB(geom_6.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 332: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        7 AS zoomlevel,
       geometry::STGeomFromWKB(geom_7.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 333: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        8 AS zoomlevel,
       geometry::STGeomFromWKB(geom_8.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 334: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        9 AS zoomlevel,
       geometry::STGeomFromWKB(geom_9.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 335: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        10 AS zoomlevel,
       geometry::STGeomFromWKB(geom_10.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 336: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 3 geolevel_id,
       areaid,
        11 AS zoomlevel,
       geometry::STGeomFromWKB(geom_11.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level3
ORDER BY 1, 3, 2;
GO

-- SQL statement 337: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        6 AS zoomlevel,
       geometry::STGeomFromWKB(geom_6.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 338: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        7 AS zoomlevel,
       geometry::STGeomFromWKB(geom_7.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 339: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        8 AS zoomlevel,
       geometry::STGeomFromWKB(geom_8.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 340: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        9 AS zoomlevel,
       geometry::STGeomFromWKB(geom_9.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 341: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        10 AS zoomlevel,
       geometry::STGeomFromWKB(geom_10.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 342: Insert into geometry table >>>
INSERT INTO geometry_sahsuland(geolevel_id, areaid, zoomlevel, geom)
SELECT 4 geolevel_id,
       areaid,
        11 AS zoomlevel,
       geometry::STGeomFromWKB(geom_11.STAsBinary(), 4326).MakeValid() AS geom
  FROM sahsu_grd_level4
ORDER BY 1, 3, 2;
GO

-- SQL statement 343: Update bounding box for implement PostGIS && operator >>>
/*
 * SQL statement name: 	geometry_bbox_update.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Geometry table geometry_cb_2014_us_500k
 *
 * Description:			Update bbox column in geometry table using STEnvelope
 * Note:				% becomes % after substitution
 */

UPDATE geometry_sahsuland
   SET bbox = geom.STEnvelope()
 WHERE bbox IS NULL ;
GO

--
-- No partitioning on SQL Server as it requires an Enterprise license; which
--

--
-- means you have to do it yourself using the generated scripts as a start.
--

-- SQL statement 346: Add primary key >>>
ALTER TABLE geometry_sahsuland ADD PRIMARY KEY (geolevel_id, areaid, zoomlevel);
GO

-- SQL statement 347: Create spatial index on geom >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX geometry_sahsuland_gix ON geometry_sahsuland (geom)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

-- SQL statement 348: Create spatial index on bbox >>>
/*
 * SQL statement name: 	create_spatial_geometry_index.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: index name;e.g. geometry_cb_2014_us_500k_gix
 *						2: table name; e.g. geometry_cb_2014_us_500k
 *						3: Geometry field name; e.g. geom
 *						4: Xmin (4326); e.g. -179.13729006727 
 *						5: Ymin (4326); e.g. -14.3737802873213 
 *						6: Xmax (4326); e.g.  179.773803959804  
 *						7: Ymax (4326); e.g. 71.352561 
 *
 * Description:			Create geometry table
 * Note:				% becomes % after substitution
 */
CREATE SPATIAL INDEX geometry_sahsuland_gix2 ON geometry_sahsuland (bbox)
	WITH ( BOUNDING_BOX = (xmin=-7.546294616103237, ymin=52.66328216508047, xmax=-5.036247072101617, ymax=55.56628680089157));
GO

-- SQL statement 349: Analyze table >>>
UPDATE STATISTICS geometry_sahsuland;
GO

-- SQL statement 350: Update areaid_count column in geolevels table using geometry table >>>
/*
 * SQL statement name: 	geolevels_areaid_update.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Geolevels table; e.g. geolevels_cb_2014_us_500k
 *						2: Geometry table geometry_cb_2014_us_500k
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Update areaid_count column in geolevels table using geometry table
 * Note:				% becomes % after substitution
 */
WITH b AS (
	SELECT geolevel_id, COUNT(DISTINCT(areaid)) AS areaid_count
	  FROM geometry_sahsuland
	 GROUP BY geolevel_id
)
UPDATE a
   SET areaid_count = b.areaid_count
  FROM geolevels_sahsuland a
  JOIN b ON a.geolevel_id = b.geolevel_id;
GO

-- SQL statement 351: Check areaid_count column in geolevels table using geometry table >>>
/*
 * SQL statement name: 	geolevels_areaid_check.sql
 * Type:				MS SQL Server SQL statement
 * Parameters:
 *						1: Geolevels table; e.g. geolevels_cb_2014_us_500k
 *						2: Schema; e.g. rif40. or ""
 *
 * Description:			Update areaid_count column in geolevels table using geometry table
 * Note:				% becomes % after substitution
 */
DECLARE c1 CURSOR FOR
		SELECT geolevel_id, geolevel_name, areaid_count
		  FROM geolevels_sahsuland;
--
DECLARE @c1_rec_geolevel_id 	INTEGER;
DECLARE @c1_rec_geolevel_name 	VARCHAR(30);
DECLARE @c1_rec_areaid_count 	INTEGER;
--
DECLARE @errors INTEGER=0;

OPEN c1;
FETCH NEXT FROM c1 INTO @c1_rec_geolevel_id, @c1_rec_geolevel_name, @c1_rec_areaid_count;
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @c1_rec_areaid_count > 0 
		PRINT 'geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
			' areaid_count: ' + CAST(@c1_rec_areaid_count AS VARCHAR)
	ELSE IF @c1_rec_areaid_count IS NULL BEGIN
			SET @errors=@errors+1;
			PRINT 'WARNING: geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
				' areaid_count IS NULL';	
		END;
	ELSE BEGIN
		PRINT 'WARNING: geolevel: ' + CAST(@c1_rec_geolevel_id AS VARCHAR) + ':' + @c1_rec_geolevel_name + 
			' errors is zero';
		SET @errors=@errors+1;
	END;
    FETCH NEXT FROM c1 INTO @c1_rec_geolevel_id, @c1_rec_geolevel_name, @c1_rec_areaid_count;
END;
CLOSE c1;
DEALLOCATE c1;
IF @errors = 0
	PRINT 'Geolevels table: geolevels_sahsuland no zero areaid_counts';
ELSE
	RAISERROR('Geolevels table: geolevels_sahsuland %i geolevels have zero areaid_counts', 16, 1, @errors);;
GO

--
-- Adjacency table
--

-- SQL statement 353: Drop table adjacency_sahsuland >>>
IF OBJECT_ID('adjacency_sahsuland', 'U') IS NOT NULL DROP TABLE adjacency_sahsuland;
GO

-- SQL statement 354: Create table adjacency_sahsuland >>>
/*
 * SQL statement name: 	create_adjacency_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: adjacency table; e.g. adjacency_cb_2014_us_500k
 *						2: schema; e.g.rif_data. or ""
 *
 * Description:			Create adjacency table
 * Note:				% becomes % after substitution
 */
CREATE TABLE adjacency_sahsuland (
	geolevel_id		INTEGER			NOT NULL,
	areaid			VARCHAR(200)	NOT NULL,
	num_adjacencies INTEGER			NOT NULL,
	adjacency_list	VARCHAR(8000)	NOT NULL,
	CONSTRAINT adjacency_sahsuland_pk PRIMARY KEY (geolevel_id, areaid)
);
GO

-- SQL statement 355: Comment table: adjacency_sahsuland >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacency lookup table for SAHSU Example geography', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland';
GO

-- SQL statement 356: Comment column: adjacency_sahsuland.geolevel_id >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 357: Comment column: adjacency_sahsuland.areaid >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Id', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area Id', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 358: Comment column: adjacency_sahsuland.num_adjacencies >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'num_adjacencies';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Number of adjacencies', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'num_adjacencies'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Number of adjacencies', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'num_adjacencies';
GO

-- SQL statement 359: Comment column: adjacency_sahsuland.adjacency_list >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.adjacency_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).adjacency_sahsuland';
SELECT @columnName  = 'adjacency_list';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacent area Ids', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'adjacency_list'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Adjacent area Ids', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'adjacency_sahsuland',
		@level2type = N'Column', @level2name = 'adjacency_list';
GO

-- SQL statement 360: Insert into adjacency_sahsuland >>>
/*
 * SQL statement name: 	insert_adjacency.sql
 * Type:				Microsoft SQL Server SQL
 * Parameters:
 *						1: adjacency table; e.g. adjacency_cb_2014_us_500k
 *						2: geometry table; e.g. geometry_cb_2014_us_500k
 *						3: Max zoomlevel
 *
 * Description:			Create insert statement into adjacency table
 * Note:				%% becomes % after substitution
 */
WITH a AS (
	SELECT a.geolevel_id, a.areaid, b.areaid AS adjacent_areaid
	  FROM geometry_sahsuland a, geometry_sahsuland b
	 WHERE a.zoomlevel                 = 11
	   AND b.zoomlevel                 = 11
	   AND a.geolevel_id               = b.geolevel_id
	   AND a.areaid                    != b.areaid
	   AND a.geom.STIntersects(b.geom) = 1
), b AS (
	SELECT a.geolevel_id, a.areaid,
		   c.adjacency_list 
	  FROM a OUTER APPLY (
		SELECT STUFF(( SELECT ',' + b.adjacent_areaid
		   FROM a AS b
		  WHERE a.areaid      = b.areaid
			AND a.geolevel_id = b.geolevel_id
		  ORDER BY b.adjacent_areaid
			FOR XML PATH('') ), 1,1,'') AS adjacency_list) AS c
)
INSERT INTO adjacency_sahsuland(geolevel_id, areaid, num_adjacencies, adjacency_list)
SELECT DISTINCT geolevel_id, areaid, LEN(adjacency_list)-LEN(REPLACE(adjacency_list, ',', ''))+1 AS num_adjacencies, adjacency_list
  FROM b
 ORDER BY 1, 2;
GO

--
-- Create tiles functions
--

-- SQL statement 362: Create function: longitude2tile.sql >>>
/*
 * SQL statement name: 	longitude2tile.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert longitude (WGS84 - 4326) to OSM tile x
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_longitude2tile', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_longitude2tile;  
GO 

CREATE FUNCTION tileMaker_longitude2tile(@longitude DOUBLE PRECISION, @zoom_level INTEGER)
RETURNS INTEGER AS
BEGIN
	DECLARE @tileX INTEGER;
	SET @tileX=CAST(
			FLOOR( (@longitude + 180) / 360 * POWER(2, @zoom_level) ) AS INTEGER);
	RETURN @tileX;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_longitude2tile()
Parameters:	 Longitude, zoom level
Returns:	 OSM Tile x
Description: Convert longitude (WGS84 - 4326) to OSM tile x

Derivation of the tile X/Y 

* Reproject the coordinates to the Mercator projection (from EPSG:4326 to EPSG:3857):

x = lon
y = arsinh(tan(lat)) = log[tan(lat) + sec(lat)]
(lat and lon are in radians)

* Transform range of x and y to 0 � 1 and shift origin to top left corner:

x = [1 + (x / p)] / 2
y = [1 - (y / p)] / 2

* Calculate the number of tiles across the map, n, using 2**zoom
* Multiply x and y by n. Round results down to give tilex and tiley.
',
   'user', @CurrentUser,   
   'function', 'tileMaker_longitude2tile';
GO

-- SQL statement 363: Create function: latitude2tile.sql >>>
/*
 * SQL statement name: 	latitude2tile.sql
 * Type:				Microsoft SQL Server T/sql function
 * Parameters:			None
 *
 * Description:			Convert latitude (WGS84 - 4326) to OSM tile y
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_latitude2tile', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_latitude2tile;  
GO 

CREATE FUNCTION tileMaker_latitude2tile(@latitude DOUBLE PRECISION, @zoom_level INTEGER)
RETURNS INTEGER 
AS
BEGIN
	DECLARE @tileY INTEGER;
	SET @tileY=CAST(
					FLOOR( 
						(1.0 - LOG /* Natural Log */ 
							(TAN(RADIANS(@latitude)) + 1.0 / COS(RADIANS(@latitude))) / PI()) / 2.0 * POWER(2, @zoom_level) 
						) 
					AS INTEGER);
	RETURN @tileY;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_latitude2tile()
Parameters:	 Latitude, zoom level
Returns:	 OSM Tile y
Description: Convert latitude (WGS84 - 4326) to OSM tile x

Derivation of the tile X/Y 

* Reproject the coordinates to the Mercator projection (from EPSG:4326 to EPSG:3857):

x = lon
y = arsinh(tan(lat)) = log[tan(lat) + sec(lat)]
(lat and lon are in radians)

* Transform range of x and y to 0 � 1 and shift origin to top left corner:

x = [1 + (x / p)] / 2
y = [1 - (y / p)] / 2

* Calculate the number of tiles across the map, n, using 2**zoom
* Multiply x and y by n. Round results down to give tilex and tiley.
',
   'user', @CurrentUser,   
   'function', 'tileMaker_latitude2tile';
GO

-- SQL statement 364: Create function: tile2longitude.sql >>>
/*
 * SQL statement name: 	tile2longitude.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert OSM tile x to longitude (WGS84 - 4326) 
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_tile2longitude', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_tile2longitude;  
GO 

CREATE FUNCTION tileMaker_tile2longitude(@x INTEGER, @zoom_level INTEGER)
RETURNS DOUBLE PRECISION AS
BEGIN
	DECLARE @longitude DOUBLE PRECISION;
	SET @longitude=CAST( ( (@x * 1.0) / POWER(2, @zoom_level) * 360.0) - 180.0 AS DOUBLE PRECISION);
	RETURN @longitude;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_tile2longitude()
Parameters:	 OSM Tile x, zoom level
Returns:	 Longitude
Description: Convert OSM tile x to longitude (WGS84 - 4326)
',
   'user', @CurrentUser,   
   'function', 'tileMaker_tile2longitude';
GO

-- SQL statement 365: Create function: tile2latitude.sql >>>
/*
 * SQL statement name: 	tileMaker_tile2latitude.sql
 * Type:				Postgres/PostGIS PL/pgsql function
 * Parameters:			None
 *
 * Description:			Convert OSM tile y to latitude (WGS84 - 4326)
 * Note:				% becomes % after substitution
 */
IF OBJECT_ID (N'tileMaker_tile2latitude', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_tile2latitude;  
GO 

CREATE FUNCTION tileMaker_tile2latitude(@y INTEGER, @zoom_level INTEGER)
RETURNS DOUBLE PRECISION AS
BEGIN
	DECLARE @latitude DOUBLE PRECISION;
	DECLARE @n FLOAT;
	DECLARE @sinh FLOAT;
	DECLARE @E FLOAT = 2.7182818284;
	
    SET @n = PI() - (2.0 * PI() * @y) / POWER(2.0, @zoom_level);
    SET @sinh = (1 - POWER(@E, -2*@n)) / (2 * POWER(@E, -@n));
    SET @latitude = DEGREES(ATAN(@sinh));
	RETURN @latitude;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_tile2latitude()
Parameters:	 OSM Tile y, zoom level
Returns:	 Latitude
Description: Convert OSM tile y to latitude (WGS84 - 4326)
',
   'user', @CurrentUser,   
   'function', 'tileMaker_tile2latitude';
GO

-- SQL statement 366: Tile check >>>
/*
 * SQL statement name: 	tile_check.sql
 * Type:				MS SQL Server function
 * Parameters:			
 *						1: Lowest resolution geolevels table
 *						2: Geography
 *						3: min_zoomlevel
 *						4: max_zoomlevel
 *						5: Geolevel id = 1 geometry table
 *
 * Description:			Convert OSM tile y to latitude (WGS84 - 4326)
 * Note:				% becomes % after substitution
 */
WITH a AS ( /* Geolevel summary */
		SELECT a1.geography, 
		       a1.geolevel_name AS min_geolevel_name,
               MIN(geolevel_id) AS min_geolevel_id,
               CAST(11 AS INTEGER) AS zoomlevel,
               a2.max_geolevel_id
          FROM geolevels_sahsuland a1, (
                        SELECT geography, MAX(geolevel_id) AS max_geolevel_id
  						  FROM geolevels_sahsuland 
						 GROUP BY geography
						) a2
         WHERE a1.geography     = 'SAHSULAND' 
           AND a1.geography     = a2.geography
         GROUP BY a1.geography, a1.geolevel_name, a2.max_geolevel_id
        HAVING MIN(geolevel_id) = 1
), b AS ( /* Get bounds of geography */		
	SELECT a2.geography,
		   a2.min_geolevel_id,
		   a2.max_geolevel_id,
		   a2.zoomlevel,
		   CASE
				WHEN a2.zoomlevel <= 6 THEN
					geometry::STGeomFromWKB(b.geom_6.STAsBinary(), b.geom_6.STSrid /* Cast to geometry */).STEnvelope()
				WHEN a2.zoomlevel BETWEEN (6+1) AND 11 THEN	
					geometry::STGeomFromWKB(b.geom_11.STAsBinary(), b.geom_11.STSrid /* Cast to geometry */).STEnvelope()
				ELSE NULL
           END AS geom_envelope
      FROM sahsu_grd_level1 b, a a2
)
SELECT b.geography,
	   b.min_geolevel_id,
	   b.max_geolevel_id,
	   b.zoomlevel,
	   CAST(b.geom_envelope.STPointN(1).STX AS numeric(8,5)) AS Xmin,
	   CAST(b.geom_envelope.STPointN(3).STX AS numeric(8,5)) AS Xmax,
	   CAST(b.geom_envelope.STPointN(1).STY AS numeric(8,5)) AS Ymin,
	   CAST(b.geom_envelope.STPointN(3).STY AS numeric(8,5)) AS Ymax,
	   $(USERNAME).tileMaker_latitude2tile(b.geom_envelope.STPointN(1).STY, zoomlevel) AS Y_mintile,
	   $(USERNAME).tileMaker_latitude2tile(b.geom_envelope.STPointN(3).STY, zoomlevel) AS Y_maxtile,
	   $(USERNAME).tileMaker_longitude2tile(b.geom_envelope.STPointN(1).STX, zoomlevel) AS X_mintile,
	   $(USERNAME).tileMaker_longitude2tile(b.geom_envelope.STPointN(3).STX, zoomlevel) AS X_maxtile
  FROM b;
GO

--
-- Create tiles tables
--

-- SQL statement 368: Drop table t_tiles_sahsuland >>>
IF OBJECT_ID('t_tiles_sahsuland', 'U') IS NOT NULL DROP TABLE t_tiles_sahsuland;
GO

-- SQL statement 369: Create tiles table >>>
/*
 * SQL statement name: 	create_tiles_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. t_tiles_cb_2014_us_county_500k
 *						2: JSON datatype (Postgres JSON, SQL server Text)
 *						3: Schema; e.g. rif_data. or ""
 *
 * Description:			Create tiles table
 * Note:				%% becomes % after substitution
 */
CREATE TABLE t_tiles_sahsuland (
	geolevel_id			INTEGER			NOT NULL,
	zoomlevel			INTEGER			NOT NULL,
	x					INTEGER			NOT NULL, 
	y					INTEGER			NOT NULL,
	optimised_topojson	NVARCHAR(MAX),
	tile_id				VARCHAR(200)	NOT NULL,
	areaid_count		INTEGER			NOT NULL,
	PRIMARY KEY (tile_id));
GO

-- SQL statement 370: Comment tiles table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Maptiles for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Maptiles for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland';
GO

-- SQL statement 371: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 372: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 373: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'x';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'x'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'x';
GO

-- SQL statement 374: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'y';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'y'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'y';
GO

-- SQL statement 375: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'optimised_topojson';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_topojson'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_topojson';
GO

-- SQL statement 376: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'tile_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'tile_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'tile_id';
GO

-- SQL statement 377: Comment tiles table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.t_tiles_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).t_tiles_sahsuland';
SELECT @columnName  = 'areaid_count';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of areaIDs (geoJSON features)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Total number of areaIDs (geoJSON features)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 't_tiles_sahsuland',
		@level2type = N'Column', @level2name = 'areaid_count';
GO

-- SQL statement 378: Add tiles index: t_tiles_sahsuland_x_tile >>>
CREATE INDEX t_tiles_sahsuland_x_tile ON t_tiles_sahsuland (geolevel_id, zoomlevel, x);
GO

-- SQL statement 379: Add tiles index: t_tiles_sahsuland_y_tile >>>
CREATE INDEX t_tiles_sahsuland_y_tile ON t_tiles_sahsuland (geolevel_id, zoomlevel, x);
GO

-- SQL statement 380: Add tiles index: t_tiles_sahsuland_xy_tile >>>
CREATE INDEX t_tiles_sahsuland_xy_tile ON t_tiles_sahsuland (geolevel_id, zoomlevel, x, y);
GO

-- SQL statement 381: Add tiles index: t_tiles_sahsuland_areaid_count >>>
CREATE INDEX t_tiles_sahsuland_areaid_count ON t_tiles_sahsuland (areaid_count);
GO

-- SQL statement 382: Create tiles view >>>
/*
 * SQL statement name: 	create_tiles_view.sql
 * Type:				Microsoft SQL Server SQL statement
 * Parameters:
 *						1: tiles view; e.g. tiles_cb_2014_us_county_500k
 *						2: geolevel table; e.g. geolevels_cb_2014_us_county_500k
 *						3: JSON datatype (Postgres JSON, SQL server VARCHAR) [No longer used]
 *						4: tiles table; e.g. t_tiles_cb_2014_us_500k
 *  					5: Max zoomlevel; e.g. 11
 *						6: Data schema; e.g. rif_data. or ""
 *						7: RIF or user schema; e.g. $(USERNAME) or rif40
 *						8: Geography; e.g. USA_2014
 *
 * Description:			Create tiles view
 * Note:				%% becomes % after substitution
 */
CREATE VIEW tiles_sahsuland AS 
WITH a AS (
        SELECT geography,
               MAX(geolevel_id) AS max_geolevel_id
          FROM $(USERNAME).geolevels_sahsuland
		 WHERE geography = 'SAHSULAND'
         GROUP BY geography
), b AS (
		SELECT a.geography, z.IntValue AS geolevel_id 
		  FROM a CROSS APPLY $(USERNAME).generate_series(0, CAST(a.max_geolevel_id AS INTEGER), 1) z
), c AS (
        SELECT b2.geolevel_name,
               b.geolevel_id,
               b.geography,
			   b2.areaid_count
          FROM b, $(USERNAME).geolevels_sahsuland b2
		 WHERE b.geolevel_id = b2.geolevel_id
		   AND b.geography   = b2.geography
), d AS (
        SELECT z.IntValue AS zoomlevel
		  FROM $(USERNAME).generate_series(0, 11, 1) z /* RIF or user schema; e.g. $(USERNAME) or rif40 */
), ex AS (
        SELECT d.zoomlevel, z.IntValue AS xy_series
          FROM d CROSS APPLY $(USERNAME).generate_series(0, CAST(POWER(2, d.zoomlevel) AS INTEGER) - 1, 1) z
), ey AS (
        SELECT c.geolevel_name,
			   c.areaid_count,
               c.geolevel_id,
               c.geography,
               ex.zoomlevel,
               ex.xy_series
          FROM c,
               ex 
)
SELECT z.geography,
       z.geolevel_id,
       z.geolevel_name,
       CASE
            WHEN h1.tile_id IS NULL AND h2.tile_id IS NULL THEN 1
            ELSE 0
       END AS no_area_ids, 
       COALESCE(h1.tile_id, 
				CAST(z.geolevel_id AS VARCHAR) + 
					'_' +
					z.geolevel_name +
					'_' +
					CAST(z.zoomlevel AS VARCHAR) +
					'_' + 
					CAST(z.x AS VARCHAR) +
					'_' +
					CAST(z.y AS VARCHAR)
				) AS tile_id,
       z.x,
       z.y,
       z.zoomlevel,
       COALESCE(h1.optimised_topojson, 
				h2.optimised_topojson, 
				'{"type": "FeatureCollection","features":[]}' /* NULL geojson */) AS optimised_topojson
  FROM ( 
		SELECT ey.geolevel_name,
			   ey.areaid_count,
               ey.geolevel_id,
               ey.geography,
               ex.zoomlevel,
               ex.xy_series AS x,
               ey.xy_series AS y
          FROM ey, ex /* Cross join */
         WHERE ex.zoomlevel = ey.zoomlevel
		) z
		 LEFT JOIN t_tiles_sahsuland h1 ON ( /* Multiple area ids in the geolevel */
				z.areaid_count > 1 AND
				z.zoomlevel    = h1.zoomlevel AND 
				z.x            = h1.x AND 
				z.y            = h1.y AND 
				z.geolevel_id  = h1.geolevel_id)
		 LEFT JOIN t_tiles_sahsuland h2 ON ( /* Single area ids in the geolevel */
				z.areaid_count = 1 AND
				h2.zoomlevel   = 0 AND 
				h2.x           = 0 AND 
				h2.y           = 0 AND 
				h2.geolevel_id = 1);
GO

-- SQL statement 383: Comment tiles view >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment view
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Maptiles view for geography; empty tiles are added to complete zoomlevels for zoomlevels 0 to 11. This view is efficent!', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland'   ;
GO

-- SQL statement 384: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Geography', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geography';
GO

-- SQL statement 385: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 386: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 387: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'x';
GO

-- SQL statement 388: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'y';
GO

-- SQL statement 389: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile multipolygon in TopoJSON format, optimised for zoomlevel N. The SRID is always 4326.', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'optimised_topojson';
GO

-- SQL statement 390: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile ID in the format <geolevel number>_<geolevel name>_<zoomlevel>_<X tile number>_<Y tile number>', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'tile_id';
GO

-- SQL statement 391: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Name of geolevel. This will be a column name in the numerator/denominator tables', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'geolevel_name';
GO

-- SQL statement 392: Comment tiles view column >>>
DECLARE @CurrentUser sysname /*
 * SQL statement name: 	comment_view_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: view; e.g. tiles_cb_2014_us_500k
 *						2: column; e.g. geography
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name();
EXECUTE sp_addextendedproperty
@name = N'MS_Description',   
@value = N'Tile contains no area_ids flag: 0/1', 
@level0type = N'Schema', @level0name = $(SchemaName),  
@level1type = N'View', @level1name = 'tiles_sahsuland',
@level2type = N'Column', @level2name = 'no_area_ids';
GO

--
-- Create tile limits table
--

-- SQL statement 394: Create tileMaker_STMakeEnvelope() >>>
/*
 * SQL statement name: 	tileMaker_STMakeEnvelope.sql
 * Type:				MS SQL Server SQL
 * Parameters:			None
 * Description:			geometry  ST_MakeEnvelope(double precision xmin, double precision ymin, double precision xmax, 
 *						double precision ymax, integer srid=4326);
 * Note:				% becomes % after substitution
 *
 *  zoomlevel |         xmin     |         xmax     |          ymin     |      ymax | 
 * -----------+------------------+------------------+-------------------+-----------+
 *          0 | -179.13729006727 | 179.773803959804 | -14.3737802873213 | 71.352561 |   
 * WITH a AS (
 *	SELECT ST_MakeEnvelope(-179.13729006727, -14.373780287321, 179.773803959804, 71.352561, 4326) AS bbox
 * )
 * SELECT ST_AsText(a.bbox) AS bbox
 *   FROM a;
 *                                                                               bbox
 * ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 *  POLYGON((-179.13729006727 -14.373780287321,-179.13729006727 71.352561,179.773803959804 71.352561,179.773803959804 -14.373780287321,-179.13729006727 -14.373780287321))
 * (1 row)
 *
 *  POLYGON((xmin ymin,xmin ymax,xmax ymax,xmax ymin,xmin ymin))
 */
IF OBJECT_ID (N'tileMaker_STMakeEnvelope', N'FN') IS NOT NULL  
    DROP FUNCTION tileMaker_STMakeEnvelope;  
GO 

CREATE FUNCTION tileMaker_STMakeEnvelope(@xmin DOUBLE PRECISION, @ymin DOUBLE PRECISION, @xmax DOUBLE PRECISION, @ymax DOUBLE PRECISION, @srid INTEGER=4326)
RETURNS GEOMETRY AS
BEGIN
	DECLARE @geom GEOMETRY;
	SET @geom=geometry::STGeomFromText('POLYGON(('+
	CAST(@xmin AS VARCHAR) + ' ' + 
	CAST(@ymin AS VARCHAR) + ',' +
	CAST(@xmin AS VARCHAR) + ' ' +
	CAST(@ymax AS VARCHAR) + ',' +
	CAST(@xmax AS VARCHAR) + ' ' +
	CAST(@ymax AS VARCHAR) + ',' +
	CAST(@xmax AS VARCHAR) + ' ' + 
	CAST(@ymin AS VARCHAR) + ',' + 
	CAST(@xmin AS VARCHAR) + ' ' +
	CAST(@ymin AS VARCHAR) + '))', @srid);
	RETURN @geom;
END;
GO
  
DECLARE @CurrentUser sysname;
SELECT @CurrentUser = user_name(); 
EXECUTE sp_addextendedproperty  'MS_Description', 'Function: 	 tileMaker_STMakeEnvelope()
Parameters:	 double precision xmin, double precision ymin, double precision xmax, double precision ymax, integer srid=4326
Returns:	 Geometry
Description: Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in the 
			 spatial reference system specified by the SRID.

Creates a rectangular Polygon formed from the minima and maxima. by the given shell. Input values must be in SRS specified 
by the SRID. If no SRID is specified the WGS 84 spatial reference system is assumed
',
   'user', @CurrentUser,   
   'function', 'tileMaker_STMakeEnvelope' ;
GO

-- SQL statement 395: Drop table tile_limits_sahsuland >>>
IF OBJECT_ID('tile_limits_sahsuland', 'U') IS NOT NULL DROP TABLE tile_limits_sahsuland;
GO

-- SQL statement 396: Create table tile_limits_sahsuland >>>
/*
 * SQL statement name: 	create_tile_limits_table.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Tile limits table; e.g. tile_limits_cb_2014_us_500k
 *						2: Geometry table; e.g. geometry_cb_2014_us_500k
 *						3: max_zoomlevel
 *
 * Description:			Create tile limits table
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT z.IntValue AS zoomlevel
	  FROM $(USERNAME).generate_series(0, 11, 1) z
), b AS ( /* Get bounds of geography */
        SELECT a.zoomlevel,
			   geometry::EnvelopeAggregate(b.geom).STPointN(1).STX AS Xmin,
			   geometry::EnvelopeAggregate(b.geom).STPointN(1).STY AS Ymin,
			   geometry::EnvelopeAggregate(b.geom).STPointN(3).STX AS Xmax,
			   geometry::EnvelopeAggregate(b.geom).STPointN(3).STY AS Ymax
      FROM a 
			LEFT OUTER JOIN geometry_sahsuland b ON (b.geolevel_id = 1 AND a.zoomlevel = b.zoomlevel)
	 GROUP BY a.zoomlevel
), c AS (
        SELECT b.zoomlevel,
			   geometry::EnvelopeAggregate(b.geom).STPointN(1).STX AS Xmin,
			   geometry::EnvelopeAggregate(b.geom).STPointN(1).STY AS Ymin,
			   geometry::EnvelopeAggregate(b.geom).STPointN(3).STX AS Xmax,
			   geometry::EnvelopeAggregate(b.geom).STPointN(3).STY AS Ymax
      FROM geometry_sahsuland b
	 WHERE b.geolevel_id  = 1
	   AND b.zoomlevel = 6
	 GROUP BY b.zoomlevel
), d AS ( /* Convert XY bounds to tile numbers */
        SELECT b.zoomlevel,
               COALESCE(b.Xmin, c.Xmin) AS x_min, 
			   COALESCE(b.Xmax, c.Xmax) AS x_max, 
			   COALESCE(b.Ymin, c.Ymin) AS y_min, 
			   COALESCE(b.Ymax, c.Ymax) AS y_max,
               $(USERNAME).tileMaker_latitude2tile(COALESCE(b.Ymax, c.Ymax), b.zoomlevel) AS Y_mintile,
               $(USERNAME).tileMaker_latitude2tile(COALESCE(b.Ymin, c.Ymin), b.zoomlevel) AS Y_maxtile,
               $(USERNAME).tileMaker_longitude2tile(COALESCE(b.Xmin, c.Xmin), b.zoomlevel) AS X_mintile,
               $(USERNAME).tileMaker_longitude2tile(COALESCE(b.Xmax, c.Xmax), b.zoomlevel) AS X_maxtile
      FROM b, c
)
SELECT d.*,
       $(USERNAME).tileMaker_STMakeEnvelope(d.x_min, d.y_min, d.x_max, d.y_max, 4326) AS bbox
  INTO tile_limits_sahsuland
  FROM d;
GO

-- SQL statement 397: Comment tile limits table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile limits', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile limits', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland';
GO

-- SQL statement 398: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at max zooomlevel (11)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at max zooomlevel (11)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 399: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'x_min';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Min X (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_min'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Min X (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_min';
GO

-- SQL statement 400: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'x_max';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Max X (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_max'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Max X (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_max';
GO

-- SQL statement 401: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'y_min';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Min Y (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_min'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Min Y (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_min';
GO

-- SQL statement 402: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'y_max';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Max Y (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_max'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Max Y (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_max';
GO

-- SQL statement 403: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'y_mintile';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Min Y tile number (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_mintile'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Min Y tile number (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_mintile';
GO

-- SQL statement 404: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'y_maxtile';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Max Y tile number (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_maxtile'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Max Y tile number (latitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'y_maxtile';
GO

-- SQL statement 405: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'x_mintile';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Min X tile number (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_mintile'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Min X tile number (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_mintile';
GO

-- SQL statement 406: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'x_maxtile';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Max X tile number (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_maxtile'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Max X tile number (longitude)', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'x_maxtile';
GO

-- SQL statement 407: Comment tile limits table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_limits_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_limits_sahsuland';
SELECT @columnName  = 'bbox';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box polygon for geolevel_id 1 area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'bbox'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box polygon for geolevel_id 1 area', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_limits_sahsuland',
		@level2type = N'Column', @level2name = 'bbox';
GO

-- SQL statement 408: Make primary key not null >>>
/*
 * SQL statement name: 	not_null.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Tile limits table; e.g. tile_limits_cb_2014_us_500k
 *						2: not null column; e.g. zoomlevel
 *
 * Description:			Make column not null
 * Note:				% becomes % after substitution
 */
ALTER TABLE tile_limits_sahsuland ALTER COLUMN zoomlevel INTEGER NOT NULL;
GO

-- SQL statement 409: Add primary key >>>
ALTER TABLE tile_limits_sahsuland ADD PRIMARY KEY (zoomlevel);
GO

-- SQL statement 410: Analyze table >>>
UPDATE STATISTICS tile_limits_sahsuland;
GO

-- SQL statement 411: Analyze table >>>
SELECT zoomlevel, x_min, x_max, y_min, y_max, y_mintile, y_maxtile, x_mintile, x_maxtile FROM tile_limits_sahsuland;
GO

-- SQL statement 412: Drop table tile_intersects_sahsuland >>>
IF OBJECT_ID('tile_intersects_sahsuland', 'U') IS NOT NULL DROP TABLE tile_intersects_sahsuland;
GO

-- SQL statement 413: Create tile intersects table >>>
/*
 * SQL statement name: 	create_tile_intersects_table.sql
 * Type:				Common SQL statement
 * Parameters:
 *						1: table; e.g. tile_intersects_cb_2014_us_500k
 *						2: JSON datatype (Postgres: JSON, MS SQL Server: Text)
 *						3: ST_Within()/STWithin() return datatype: bit (SQL Server: 0/1) or BOOLEAN (Postgres)
 *
 * Description:			Create tile intersects table
 * Note:				% becomes % after substitution
 */
CREATE TABLE tile_intersects_sahsuland (
	geolevel_id				INTEGER			NOT NULL,
	zoomlevel				INTEGER			NOT NULL, 
	areaid					VARCHAR(200)	NOT NULL,
	x						INTEGER			NOT NULL, 
	y						INTEGER			NOT NULL, 
    optimised_geojson		Text,
	within					bit				NOT NULL
);
GO

-- SQL statement 414: Add geometry column: bbox >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE tile_intersects_sahsuland ADD bbox geometry;
GO

-- SQL statement 415: Add geometry column: geom >>>
/*
 * SQL statement name: 	add_geometry_column2.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: Table name; e.g. geometry_cb_2014_us_500k
 *						2: column name; e.g. geom
 *						3: Column SRID; e.g. 4326 [NEVER USED IN SQL SERVER, set during WKT conversion]
 *						4: Spatial geometry type: e.g. POINT, MULTIPOLYGON [NEVER USED IN SQL SERVER]
 *                      5: Schema (rif_data. or "")
 *
 * Description:			Add *** geometry *** column to table
 * Note:				%% becomes % after substitution
 */
ALTER TABLE tile_intersects_sahsuland ADD geom geometry;
GO

-- SQL statement 416: Comment tile intersects table >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_table.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. cb_2014_us_county_500k
 *						2: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 *
 * Description:			Comment table
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name]     = N'MS_Description'
		   AND [minor_id] = 0)
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile area id intersects', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile area id intersects', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland';
GO

-- SQL statement 417: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'geolevel_id';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'ID for ordering (1=lowest resolution). Up to 99 supported.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'geolevel_id';
GO

-- SQL statement 418: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'zoomlevel';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Zoom level: 0 to 11. Number of tiles is 2**<zoom level> * 2**<zoom level>; i.e. 1, 2x2, 4x4 ... 2048x2048 at zoomlevel 11', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'zoomlevel';
GO

-- SQL statement 419: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'areaid';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'areaid'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Area ID', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'areaid';
GO

-- SQL statement 420: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'x';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'x'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'X tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'x';
GO

-- SQL statement 421: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'y';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'y'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Y tile number. From 0 to (2**<zoomlevel>)-1', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'y';
GO

-- SQL statement 422: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'optimised_geojson';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile areaid intersect multipolygon in GeoJSON format, optimised for zoomlevel N.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_geojson'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Tile areaid intersect multipolygon in GeoJSON format, optimised for zoomlevel N.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'optimised_geojson';
GO

-- SQL statement 423: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'within';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Defined as: ST_Within(bbox, geom). Used to exclude any tile bounding completely within the area.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'within'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Defined as: ST_Within(bbox, geom). Used to exclude any tile bounding completely within the area.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'within';
GO

-- SQL statement 424: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'bbox';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box of tile as a polygon.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'bbox'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Bounding box of tile as a polygon.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'bbox';
GO

-- SQL statement 425: Comment tile intersects table column >>>
DECLARE @CurrentUser sysname
DECLARE @columnName  sysname 
DECLARE @tableName   sysname  /*
 * SQL statement name: 	comment_column.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: table; e.g. geolevels_cb_2014_us_county_500k
 *						2: column; e.g. geolevel_name
 *						3: comment. Usual rules for comment text in SQK - single 
 *									quotes (') need to be double ('')
 *
 * 						SchemaName is set to either @CurrentUser (build) or 'rif_data' for rif40
 * Description:			Comment table column
 * Note:				%% becomes % after substitution
 */
SELECT @CurrentUser = user_name(); 
SELECT @tableName  = '$(SchemaName)';
IF (@tableName = '@CurrentUser')
	SELECT @tableName = @CurrentUser + '.tile_intersects_sahsuland'
ELSE
	SELECT @tableName = '$(SchemaName).tile_intersects_sahsuland';
SELECT @columnName  = 'geom';
IF EXISTS (
        SELECT class_desc
          FROM SYS.EXTENDED_PROPERTIES
		 WHERE [major_id] = OBJECT_ID(@tableName)
           AND [name] = N'MS_Description'
		   AND [minor_id] = (SELECT [column_id] FROM SYS.COLUMNS WHERE [name] = @columnName AND [object_id] = OBJECT_ID(@tableName)))
    EXECUTE sp_updateextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry of area.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'geom'
ELSE
	EXECUTE sp_addextendedproperty
		@name = N'MS_Description',   
		@value = N'Geometry of area.', 
		@level0type = N'Schema', @level0name = $(SchemaName),  
		@level1type = N'Table', @level1name = 'tile_intersects_sahsuland',
		@level2type = N'Column', @level2name = 'geom';
GO

-- SQL statement 426: INSERT into tile intersects table >>>
/*
 * SQL statement name: 	tile_intersects_insert.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Tile intersects table name; e.g. tile_intersects_cb_2014_us_500k
 *						2: Tile limits table name; e.g. tile_limits_cb_2014_us_500k
 *						3: Geometry table name; e.g. geometry_cb_2014_us_500k
 *
 * Description:			Insert into tile intersects table
 * Note:				% becomes % after substitution
 */
WITH a AS (
	SELECT zoomlevel, x_mintile, x_maxtile, y_mintile, y_maxtile	  
	  FROM tile_limits_sahsuland
	 WHERE zoomlevel = 0
), x AS (
	SELECT zoomlevel, z.IntValue AS x_series
	  FROM a CROSS APPLY $(USERNAME).generate_series(x_mintile, x_maxtile, 1) z
), y AS (	 
	SELECT zoomlevel, z.IntValue AS y_series	
	  FROM a CROSS APPLY $(USERNAME).generate_series(y_mintile, y_maxtile, 1) z      
), b AS (
	SELECT x.zoomlevel, 
	       x.x_series AS x, 
	       y.y_series AS y,      
	       $(USERNAME).tileMaker_tile2longitude(x.x_series, x.zoomlevel) AS xmin, 
		   $(USERNAME).tileMaker_tile2latitude(y.y_series, x.zoomlevel) AS ymin,
		   $(USERNAME).tileMaker_tile2longitude(x.x_series+1, x.zoomlevel) AS xmax, 
		   $(USERNAME).tileMaker_tile2latitude(y.y_series+1, x.zoomlevel) AS ymax
      FROM x, y
	 WHERE x.zoomlevel = y.zoomlevel
), c AS (
	SELECT b.zoomlevel, b.x, b.y, 
		   $(USERNAME).tileMaker_STMakeEnvelope(b.xmin, b.ymin, b.xmax, b.ymax, 4326) AS bbox,
		   c.geolevel_id,
		   c.areaid,
		   c.geom
	  FROM b, geometry_sahsuland c
	 WHERE c.zoomlevel = 6
	   AND $(USERNAME).tileMaker_STMakeEnvelope(b.xmin, b.ymin, b.xmax, b.ymax, 4326).STIntersects(c.geom) = 1 /* intersects */
), tile_intersects_temp AS (
	SELECT c.geolevel_id,
		   c.zoomlevel, 
		   c.areaid,
		   c.x, 
		   c.y, 
		   c.bbox,
		   c.geom,
		   NULL AS optimised_geojson,
		   c.bbox.STWithin(c.geom) AS within /* Used to exclude any tile boundary completely within the area, i.e. there are no bounaries in the tile */
	  FROM c
)
INSERT INTO tile_intersects_sahsuland (
	geolevel_id,
	zoomlevel, 
	areaid,
	x, 
	y, 
	bbox,
	geom,
    optimised_geojson,
	within
)
SELECT geolevel_id,
	   zoomlevel, 
	   areaid,
	   x, 
	   y, 
       bbox,
	   geom,
       optimised_geojson,
	   within
  FROM tile_intersects_temp
 ORDER BY geolevel_id, zoomlevel, x, y;
GO

-- SQL statement 427: Add non clustered primary key >>>
ALTER TABLE tile_intersects_sahsuland ADD PRIMARY KEY NONCLUSTERED (geolevel_id, zoomlevel, areaid, x, y) ;
GO

-- SQL statement 428: Analyze table >>>
UPDATE STATISTICS tile_intersects_sahsuland;
GO

-- SQL statement 429: SELECT from tile intersects table >>>
/*
 * SQL statement name: 	tile_intersects_select.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Tile intersects table name; e.g. tile_intersects_cb_2014_us_500k
 *
 * Description:			Select from tile intersects table
 
geolevel_id zoomlevel   areaid      x           y           within       bbox
----------- ----------- ----------- ----------- ----------- ----------- ---------------------------------------------------------
          1           0 US          0           0                     0 POLYGON ((-180 85.0511, -180 -85.0511, 180 -85.0511, 180 85.0511, -180 85.0511))


(1 rows affected)

 * Note:				% becomes % after substitution
 */
SELECT geolevel_id,
	   zoomlevel, 
	   areaid,
	   x, 
	   y, 
	   within,
	   bbox.STAsText() AS bbox
  FROM tile_intersects_sahsuland
 WHERE zoomlevel = 0 AND geolevel_id = 1;
GO

-- SQL statement 430: INSERT into tile intersects table (MSSQLServer tile manufacture) >>>
/*
 * SQL statement name: 	tile_intersects_insert2.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Geometry table name; e.g. geometry_cb_2014_us_500k
 *						2: Geolevels table name; e.g. geolevels_cb_2014_us_500k
 *						3: Tile intersects table name; e.g. tile_intersects_cb_2014_us_500k
 *						4: Tile limits table name; e.g. tile_limits_cb_2014_us_500k
 *
 * Description:			Insert into tile intersects table
 * Note:				% becomes % after substitution
 *
 * To performance trace add to script:
 *
 * SET STATISTICS PROFILE ON
 * SET STATISTICS TIME ON 
 *
 * You may need to change #temp to temp (i.e. make it a real table to profile it)
 */
--
-- For testing
--
--DECLARE @start_zoomlevel INTEGER=6;
--DECLARE @start_geolevel_id INTEGER=3;
DECLARE @start_zoomlevel INTEGER=1;
DECLARE @start_geolevel_id INTEGER=1;

DECLARE c1_maxgeolevel_id 	CURSOR FOR
		SELECT MAX(geolevel_id) AS max_geolevel_id,
	           MAX(zoomlevel) AS max_zoomlevel
	      FROM geometry_sahsuland;
DECLARE c2_areaid_count 	CURSOR FOR	
		SELECT areaid_count
		  FROM geolevels_sahsuland	
		 WHERE geolevel_id = 1;
--
DECLARE @max_geolevel_id INTEGER;
DECLARE @max_zoomlevel INTEGER;
DECLARE @areaid_count INTEGER;
DECLARE @l_use_zoomlevel INTEGER;
DECLARE @geolevel_id INTEGER;
DECLARE @zoomlevel INTEGER;
--
DECLARE @i INTEGER;
DECLARE @j INTEGER;
--
DECLARE @rowc INTEGER;
DECLARE @rowc2 INTEGER;
--
DECLARE @pstart DATETIME;
DECLARE @sstart DATETIME;
DECLARE @lstart DATETIME;
--
DECLARE @etime TIME;
--
DECLARE @isecs   NUMERIC;
DECLARE @cisecs  VARCHAR(40);
--
DECLARE @cesecs  VARCHAR(40);
DECLARE @esecs   NUMERIC;
DECLARE @cesecs1 VARCHAR(40);
DECLARE @cesecs2 VARCHAR(40);
DECLARE @cesecs3 VARCHAR(40);
DECLARE @cesecs4 VARCHAR(40);
DECLARE @cesecs5 VARCHAR(40);
--
BEGIN
	OPEN c1_maxgeolevel_id;
	FETCH c1_maxgeolevel_id INTO @max_geolevel_id, @max_zoomlevel;
	CLOSE c1_maxgeolevel_id;
	DEALLOCATE c1_maxgeolevel_id;
--
	OPEN c2_areaid_count;
	FETCH c2_areaid_count INTO @areaid_count;
	CLOSE c2_areaid_count;
	DEALLOCATE c2_areaid_count;
--
	IF @areaid_count = 1 	/* 0/0/0 tile only;  */			
		SET @start_geolevel_id=2;	
	ELSE
		SET @start_geolevel_id=1;
--
	SET @i=@start_geolevel_id;
	DELETE FROM tile_intersects_sahsuland
	 WHERE zoomlevel >= @start_zoomlevel;
--
-- Override for test purposes
--
--	SET @max_zoomlevel=7;
--
	SET @pstart = GETDATE();	
--
	WHILE @i <= @max_geolevel_id /* FOR i IN start_geolevel_id .. max_geolevel_id LOOP */
	BEGIN
		SET @geolevel_id=@i;	
		SET @j=@start_zoomlevel;	
		WHILE @j <= @max_zoomlevel /* FOR j IN 1 .. max_zoomlevel LOOP */
		BEGIN
			SET @sstart = GETDATE();
			SET @lstart = GETDATE();
			SET @zoomlevel=@j;			
--
			SET @l_use_zoomlevel=@zoomlevel;
			IF @zoomlevel<6  
				SET @l_use_zoomlevel=6;
--			
-- Intersector2: tile intersects table INSERT function. Zoomlevels <6 use zoomlevel 6 data
--				
-- Step 1: Calculate bounding box, parent X/Y min
--		   This is separate to prevent SQL Server unnesting the cross join because it thinks it is very inefficent
--		   This could probably be improved with manual statistics for the function, but there is no method for this in SQL Server
--  
			WITH a	AS (
				SELECT b.zoomlevel AS zoomlevel, b.x_mintile, b.x_maxtile, b.y_mintile, b.y_maxtile	  
				  FROM tile_limits_sahsuland b
				 WHERE @zoomlevel = b.zoomlevel
			), x AS (
				SELECT zoomlevel, z.IntValue AS x_series
				  FROM a CROSS APPLY $(USERNAME).generate_series(x_mintile, x_maxtile, 1) z
			), y AS (	 
				SELECT zoomlevel, z.IntValue AS y_series	
				  FROM a CROSS APPLY $(USERNAME).generate_series(y_mintile, y_maxtile, 1) z       
			), b AS (
				SELECT x.zoomlevel, 
					   x.x_series AS x, 
					   y.y_series AS y,      
					   $(USERNAME).tileMaker_tile2longitude(x.x_series, x.zoomlevel) AS xmin, 
					   $(USERNAME).tileMaker_tile2latitude(y.y_series, x.zoomlevel) AS ymin,
					   $(USERNAME).tileMaker_tile2longitude(x.x_series+1, x.zoomlevel) AS xmax, 
					   $(USERNAME).tileMaker_tile2latitude(y.y_series+1, x.zoomlevel) AS ymax
				  FROM x, y /* Explicit cross join */
				 WHERE x.zoomlevel = y.zoomlevel
			) /* Calculate bounding box, parent X/Y min */
			SELECT b.zoomlevel, 
				   b.x,
				   b.y, 
				   $(USERNAME).tileMaker_STMakeEnvelope(b.xmin, b.ymin, b.xmax, b.ymax, 4326) AS bbox,
				   $(USERNAME).tileMaker_latitude2tile(b.ymin, b.zoomlevel-1) AS parent_ymin,
				   $(USERNAME).tileMaker_longitude2tile(b.xmin, b.zoomlevel-1) AS parent_xmin
			  INTO #temp2
			  FROM b
			 ORDER BY b.zoomlevel, b.x, b.y;
--
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs1 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
			SET @lstart = GETDATE();
--				
-- Step 2: Join to parent tile from previous geolevel_id; i.e. exclude if not present, intersect by bounding box (this in combination 
--         removes most tiles not containing data efficiently). This was the cause of most performance problems when SQL Server decided to 
--         change this order. The COUNT(*) always returns 1; it is to prevent SQL Server unesting the query!
-- 		   This may cause problems in future if SQL Server becomes intelligent enough to spot this; although hopefully it will by then 
-- 	       spot the STIntersect() is an expensive operation even with indexes
--
			WITH d AS ( /* Get parent tiles */
				SELECT p.x, p.y, p.areaid, COUNT(p.x) AS total
				  FROM tile_intersects_sahsuland p /* Parent */
				 WHERE p.zoomlevel    = @zoomlevel -1 	/* previous geolevel_id: c.zoomlevel -1 */
				   AND p.geolevel_id  = @geolevel_id 
				 GROUP BY p.x, p.y, p.areaid
			), e AS (	
				SELECT c.zoomlevel, c.x, c.y, d.areaid, c.bbox
				  FROM #temp2 c, d
				 WHERE c.parent_xmin = d.x  			/* Join to parent tile from previous geolevel_id; i.e. exclude if not present */
				   AND c.parent_ymin = d.y
			)
			SELECT e.zoomlevel, e.x, e.y, e.areaid, e.bbox, e2.geom		
			  INTO #temp
			  FROM e, geometry_sahsuland e2
			 WHERE e2.zoomlevel    = @l_use_zoomlevel
			   AND e2.geolevel_id  = @geolevel_id
			   AND e2.areaid       = e.areaid
			   AND e.bbox.STIntersects(e2.bbox) = 1		/* Intersect by bounding box */	
			 ORDER BY e.zoomlevel, e.x, e.y, e.areaid;
			DROP TABLE #temp2;
--
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs5 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
			SET @lstart = GETDATE();
--
-- Do NOT index #temp; it i slower and gives the wrong answer
--
/*
			ALTER TABLE #temp ALTER COLUMN x INTEGER NOT NULL;
			ALTER TABLE #temp ALTER COLUMN y INTEGER NOT NULL;
			ALTER TABLE #temp ALTER COLUMN areaid INTEGER NOT NULL;
			ALTER TABLE #temp ADD PRIMARY KEY (x, y, areaid);
			CREATE SPATIAL INDEX #temp_gix ON #temp (geom)
				WITH ( BOUNDING_BOX = (xmin=-179.148909, ymin=-14.548699000000001, xmax=179.77847, ymax=71.36516200000001));	
			CREATE SPATIAL INDEX #temp_gix2 ON #temp (bbox)
				WITH ( BOUNDING_BOX = (xmin=-179.148909, ymin=-14.548699000000001, xmax=179.77847, ymax=71.36516200000001));			
--
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs6 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
			SET @lstart = GETDATE();
			*/
--		
-- Step 3: intersects tile bounding box with geometry, exclude any tile bounded completely within the area
--
			WITH f AS (
				SELECT @geolevel_id AS geolevel_id, e.zoomlevel, e.x, e.y, e.bbox, e.areaid, e.geom
				  FROM #temp e  
				 WHERE e.bbox.STIntersects(e.geom) = 1 /* intersects tile bounding box with geometry */ 
			)
			INSERT INTO tile_intersects_sahsuland(geolevel_id, zoomlevel, areaid, x, y, bbox, geom, optimised_geojson, within) 			
			SELECT f.geolevel_id, f.zoomlevel, f.areaid, f.x, f.y, f.bbox, f.geom, 
				   NULL AS optimised_geojson,
				   1 AS within 
			  FROM f
			 WHERE NOT f.bbox.STWithin(f.geom) = 1 /* Exclude any tile bounded completely within the area */
			 ORDER BY f.geolevel_id, f.zoomlevel, f.areaid, f.x, f.y;
--
			SET @rowc = @@ROWCOUNT;
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs2 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
--						
			DROP TABLE #temp;
--
-- Run 2
--
			SET @lstart = GETDATE();	
--			
-- Intersector2: tile intersects table INSERT function. Zoomlevels <6 use zoomlevel 6 data
--				Insert tile area id intersections missing where not in the previous layer; 
--				this is usually due to it being simplified out of existance.  
--	
			WITH a AS (
				SELECT DISTINCT geolevel_id, areaid
				  FROM geometry_sahsuland
				 WHERE geolevel_id = @geolevel_id
				   AND zoomlevel   = @zoomlevel
				EXCEPT 
				SELECT DISTINCT geolevel_id, areaid
				  FROM tile_intersects_sahsuland a
				 WHERE geolevel_id = @geolevel_id
				   AND zoomlevel   = @zoomlevel
			), b AS (
				SELECT a.geolevel_id, a.areaid, b.geom.STEnvelope() AS bbox, b.geom
				  FROM a, geometry_sahsuland b
				 WHERE a.geolevel_id = @geolevel_id
				   AND zoomlevel     = @zoomlevel
				   AND a.areaid      = b.areaid
				   AND NOT b.geom.STIsEmpty() = 1
			), c1 AS (
				SELECT @zoomlevel AS zoomlevel, 
					   b.geolevel_id, 
					   b.areaid,
					   $(USERNAME).tileMaker_latitude2tile(geometry::EnvelopeAggregate(bbox).STPointN(1).STY  /* Ymin */, @zoomlevel) AS y_mintile,
					   $(USERNAME).tileMaker_longitude2tile(geometry::EnvelopeAggregate(bbox).STPointN(1).STX /* Xmin */, @zoomlevel) AS x_mintile,
					   $(USERNAME).tileMaker_latitude2tile(geometry::EnvelopeAggregate(bbox).STPointN(3).STY  /* Ymax */, @zoomlevel) AS y_maxtile,
					   $(USERNAME).tileMaker_longitude2tile(geometry::EnvelopeAggregate(bbox).STPointN(3).STX /* Xmax */, @zoomlevel) AS x_maxtile
				   FROM b
				  GROUP BY b.geolevel_id, 
					   b.areaid
			), c AS (
				SELECT c1.zoomlevel,
					   c1.geolevel_id, 
					   c1.areaid,
					   c1.x_mintile,
					   c1.y_mintile,
					   c1.x_maxtile,
					   c1.y_maxtile,
					   b.geom
				  FROM c1, b
				 WHERE c1.areaid = b.areaid
			), x AS (
				SELECT c.zoomlevel, 
					   c.geolevel_id, 
					   c.areaid,
					   z.IntValue AS x_series
				  FROM c CROSS APPLY $(USERNAME).generate_series(x_mintile, x_maxtile, 1) z 
			), y AS (	 
				SELECT c.zoomlevel, 
					   c.geolevel_id, 
					   c.areaid,
					   z.IntValue AS y_series	
				  FROM c CROSS APPLY $(USERNAME).generate_series(y_mintile, y_maxtile, 1) z 
			), d AS (
				SELECT x.zoomlevel, 
					   x.geolevel_id, 
					   x.areaid,
					   x.x_series AS x, 
					   y.y_series AS y,      
					   $(USERNAME).tileMaker_tile2longitude(x.x_series, x.zoomlevel) AS xmin, 
					   $(USERNAME).tileMaker_tile2latitude(y.y_series, x.zoomlevel) AS ymin,
					   $(USERNAME).tileMaker_tile2longitude(x.x_series+1, x.zoomlevel) AS xmax, 
					   $(USERNAME).tileMaker_tile2latitude(y.y_series+1, x.zoomlevel) AS ymax
				  FROM x, y
				 WHERE x.zoomlevel   = y.zoomlevel	
				   AND x.geolevel_id = y.geolevel_id
				   AND x.areaid      = y.areaid
			), e AS (
				SELECT d.zoomlevel, 
					   d.geolevel_id, 
					   d.areaid,
					   d.x,
					   d.y, 
					   $(USERNAME).tileMaker_STMakeEnvelope(d.xmin, d.ymin, d.xmax, d.ymax, 4326) AS bbox
				  FROM d
			), f1 AS (
				SELECT DISTINCT e.zoomlevel, 
					   e.geolevel_id, 
					   e.areaid, 
					   e.x,
					   e.y
				  FROM e
				 WHERE NOT EXISTS (SELECT c2.areaid
									 FROM tile_intersects_sahsuland c2
									WHERE c2.geolevel_id = @geolevel_id
									  AND c2.zoomlevel   = @zoomlevel
									  AND c2.x           = e.x
									  AND c2.y           = e.y	
									  AND c2.areaid      = e.areaid)
			), f AS (
				SELECT f1.zoomlevel, 
					   f1.geolevel_id, 
					   f1.areaid, 
					   f1.x,
					   f1.y,
					   e.bbox
				  FROM f1, e
				 WHERE e.areaid      = f1.areaid
				   AND e.x           = f1.x
				   AND e.y           = f1.y
				   AND e.zoomlevel   = f1.zoomlevel
				   AND e.geolevel_id = f1.geolevel_id
			), g AS (
					SELECT f.zoomlevel, f.geolevel_id, f.x, f.y, f.bbox, e2.areaid, e2.geom
					  FROM f, geometry_sahsuland e2
					 WHERE e2.zoomlevel    = @l_use_zoomlevel
					   AND e2.geolevel_id  = @geolevel_id
					   AND e2.areaid       = f.areaid
				       AND f.bbox.STIntersects(e2.bbox) = 1	/* Intersect by bounding box */
					   AND f.bbox.STIntersects(e2.geom) = 1 /* intersects: (e.bbox && e.geom) is slower as it generates many more tiles */
			)
			INSERT INTO tile_intersects_sahsuland(geolevel_id, zoomlevel, areaid, x, y, bbox, geom, optimised_geojson, within) 
			SELECT geolevel_id, zoomlevel, areaid, x, y, bbox, geom,	
				   NULL AS optimised_geojson,
				   g.bbox.STWithin(g.geom) AS within
			  FROM g 
			 ORDER BY geolevel_id, zoomlevel, areaid, x, y;	
--			 
			SET @rowc2 = @@ROWCOUNT;	
--			
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs3 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
			SET @lstart = GETDATE();	
--
-- Rebuild tile intersects index
--
			ALTER INDEX ALL ON tile_intersects_sahsuland REORGANIZE; 
--			
			SET @etime = CAST(GETDATE() - @lstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs4 = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
--
-- Calculate overall time since start
--
			SET @etime = CAST(GETDATE() - @pstart AS TIME);
			SET @esecs = (DATEPART(MILLISECOND, @etime));
			SET @esecs = @esecs/10;
			SET @cesecs = CAST((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)) AS VARCHAR(40)) + 
					'.' + CAST(ROUND(@esecs, 1) AS VARCHAR(40));
--		
-- Calculate intersects/s for this geolevel/zoomlevel combination
--			
			SET @etime = CAST(GETDATE() - @sstart AS TIME); -- For all queries in fop loop
			IF (DATEPART(SECOND, @etime) > 0)
				SET @isecs=@rowc/((DATEPART(HOUR, @etime) * 3600) + (DATEPART(MINUTE, @etime) * 60) + (DATEPART(SECOND, @etime)));
			ELSE 
				SET @isecs=0;
			SET @cisecs=CAST(ROUND(@isecs, 1) AS VARCHAR(40))
--
-- Processed 57+0 total areaid intersects, 3 tiles for geolevel id 2/3 zoomlevel: 1/11 in 0.7+0.0s+0.3s, 1.9s total; 92.1 intesects/s
--
			RAISERROR('Processed %d+%d for geolevel id: %d/%d; zoomlevel: %d/%d; in #temp2: %s, #temp: %s, insert: %s, insert2: %s, re-index: %s, %s total; %s intesects/s)', 10, 1,
				@rowc, @rowc2, @geolevel_id, @max_geolevel_id, @zoomlevel, @max_zoomlevel, 
				@cesecs1, -- #temp2 create
				@cesecs5, -- #temp create
				@cesecs2, -- INSERT into tile intersects table
				@cesecs3, -- 2nd INSERT into tile intersects table (Insert tile area id intersections missing where not in the previous layer)
				@cesecs4, -- Re-index tile intersects table
				@cesecs, -- Overall running total
				@cisecs  -- Intersects/sec
				) WITH NOWAIT;
			SET @j+=1;	
		END;
		SET @i+=1;	
	END;
--				
END;
GO

-- SQL statement 431: Special index on tile intersects table for MS SQL tuning >>>
/*
 * SQL statement name: 	tile_intersects_usa_2014_tlidx.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: tile intersects table; e.g. tile_intersects_usa_2014
 *
 * Description:			Special index on tile intersects table for MS SQL tuning.
 *						SQL server is very inefficent otherwise
 * Note:				% becomes % after substitution
 */
CREATE NONCLUSTERED INDEX tile_intersects_sahsuland_tlidx
ON tile_intersects_sahsuland ([geolevel_id],[zoomlevel],[x],[y])
INCLUDE ([areaid],[geom]);
GO

-- SQL statement 432: Tile intersects table % savings >>>
/*
 * SQL statement name: 	tile_intersects_select2.sql
 * Type:				MS SQL Server SQL
 * Parameters:
 *						1: Tile intersects table name; e.g. tile_intersects_cb_2014_us_500k
 *
 * Description:			Select from tile intersects table
 
geolevel_id zoomlevel   areas       xmin        ymin        xmax        ymax        possible_tiles tiles       pct_saving
----------- ----------- ----------- ----------- ----------- ----------- ----------- -------------- ----------- ----------
          1           0           1           0           0           0           0              1           1         .0
          2           0          56           0           0           0           0              1           1         .0
          2           1          56           0           0           1           1              4           3       25.0
          2           2          56           0           0           3           2             12           5       58.3
          2           3          56           0           1           7           4             32          10       68.8
          2           4          56           0           3          15           8             96          22       77.1
          2           5          56           0           6          31          17            384          48       87.5
          2           6          56           0          13          63          34           1408         111       92.1
          2           7          56           0          27         127          69           5504         281       94.9
          2           8          56           0          54         255         135          20992         665       96.8
          3           0        3233           0           0           0           0              1           1         .0
          3           1        3233           0           0           1           1              4           3       25.0
          3           2        3233           0           0           3           2             12           5       58.3
          3           3        3233           0           1           7           4             32          10       68.8
          3           4        3233           0           3          15           8             96          22       77.1
          3           5        3233           0           6          31          17            384          49       87.2
          3           6        3233           0          13          63          34           1408         119       91.6
          3           7        3233           0          27         127          69           5504         333       94.0
          3           8        3233           0          54         255         138          21760         992       95.4

(19 rows affected)

 * Note:				% becomes % after substitution
 */
SELECT geolevel_id, zoomlevel, 
       COUNT(DISTINCT(areaid)) AS areas,
       MIN(x) AS xmin, MIN(y) AS ymin, 
       MAX(x) AS xmax, MAX(y) AS ymax, 
	   (MAX(x)-MIN(x)+1)*(MAX(y)-MIN(y)+1) AS possible_tiles,
       COUNT(DISTINCT(CAST(x AS VARCHAR) + CAST(y AS VARCHAR))) AS tiles,
	   CAST(ROUND((CAST( (((MAX(x)-MIN(x)+1)*(MAX(y)-MIN(y)+1)) /* possible_tiles */ - COUNT(DISTINCT(CAST(x AS VARCHAR) + CAST(y AS VARCHAR)))) AS NUMERIC)/
			((MAX(x)-MIN(x)+1)*(MAX(y)-MIN(y)+1)))*100, 2) AS DECIMAL(4,1)) AS pct_saving
  FROM tile_intersects_sahsuland
 GROUP BY geolevel_id, zoomlevel
 ORDER BY 1, 2;
GO

-- SQL statement 433: Commit transaction >>>
COMMIT;
GO

--
-- Analyze tables
--

-- SQL statement 435: Describe table sahsu_grd_level1 >>>
-- EXEC sp_help sahsu_grd_level1;
GO

-- SQL statement 436: Analyze table sahsu_grd_level1 >>>
UPDATE STATISTICS sahsu_grd_level1;
GO

-- SQL statement 437: Describe table lookup_sahsu_grd_level1 >>>
-- EXEC sp_help lookup_sahsu_grd_level1;
GO

-- SQL statement 438: Analyze table lookup_sahsu_grd_level1 >>>
UPDATE STATISTICS lookup_sahsu_grd_level1;
GO

-- SQL statement 439: Describe table sahsu_grd_level2 >>>
-- EXEC sp_help sahsu_grd_level2;
GO

-- SQL statement 440: Analyze table sahsu_grd_level2 >>>
UPDATE STATISTICS sahsu_grd_level2;
GO

-- SQL statement 441: Describe table lookup_sahsu_grd_level2 >>>
-- EXEC sp_help lookup_sahsu_grd_level2;
GO

-- SQL statement 442: Analyze table lookup_sahsu_grd_level2 >>>
UPDATE STATISTICS lookup_sahsu_grd_level2;
GO

-- SQL statement 443: Describe table sahsu_grd_level3 >>>
-- EXEC sp_help sahsu_grd_level3;
GO

-- SQL statement 444: Analyze table sahsu_grd_level3 >>>
UPDATE STATISTICS sahsu_grd_level3;
GO

-- SQL statement 445: Describe table lookup_sahsu_grd_level3 >>>
-- EXEC sp_help lookup_sahsu_grd_level3;
GO

-- SQL statement 446: Analyze table lookup_sahsu_grd_level3 >>>
UPDATE STATISTICS lookup_sahsu_grd_level3;
GO

-- SQL statement 447: Describe table sahsu_grd_level4 >>>
-- EXEC sp_help sahsu_grd_level4;
GO

-- SQL statement 448: Analyze table sahsu_grd_level4 >>>
UPDATE STATISTICS sahsu_grd_level4;
GO

-- SQL statement 449: Describe table lookup_sahsu_grd_level4 >>>
-- EXEC sp_help lookup_sahsu_grd_level4;
GO

-- SQL statement 450: Analyze table lookup_sahsu_grd_level4 >>>
UPDATE STATISTICS lookup_sahsu_grd_level4;
GO

-- SQL statement 451: Describe table geolevels_sahsuland >>>
-- EXEC sp_help geolevels_sahsuland;
GO

-- SQL statement 452: Analyze table geolevels_sahsuland >>>
UPDATE STATISTICS geolevels_sahsuland;
GO

-- SQL statement 453: Describe table geography_sahsuland >>>
-- EXEC sp_help geography_sahsuland;
GO

-- SQL statement 454: Analyze table geography_sahsuland >>>
UPDATE STATISTICS geography_sahsuland;
GO

-- SQL statement 455: Describe table hierarchy_sahsuland >>>
-- EXEC sp_help hierarchy_sahsuland;
GO

-- SQL statement 456: Analyze table hierarchy_sahsuland >>>
UPDATE STATISTICS hierarchy_sahsuland;
GO

-- SQL statement 457: Describe table geometry_sahsuland >>>
-- EXEC sp_help geometry_sahsuland;
GO

-- SQL statement 458: Analyze table geometry_sahsuland >>>
UPDATE STATISTICS geometry_sahsuland;
GO

-- SQL statement 459: Describe table tile_intersects_sahsuland >>>
-- EXEC sp_help tile_intersects_sahsuland;
GO

-- SQL statement 460: Analyze table tile_intersects_sahsuland >>>
UPDATE STATISTICS tile_intersects_sahsuland;
GO

-- SQL statement 461: Describe table tile_limits_sahsuland >>>
-- EXEC sp_help tile_limits_sahsuland;
GO

-- SQL statement 462: Analyze table tile_limits_sahsuland >>>
UPDATE STATISTICS tile_limits_sahsuland;
GO

-- SQL statement 463: Describe table t_tiles_sahsuland >>>
-- EXEC sp_help t_tiles_sahsuland;
GO

-- SQL statement 464: Analyze table t_tiles_sahsuland >>>
UPDATE STATISTICS t_tiles_sahsuland;
GO

--
-- Check areas
--

-- SQL statement 466: Test Turf and DB areas agree to within 1% (Postgres)/5% (SQL server) >>>
DECLARE c1 CURSOR FOR
/*
 * SQL statement name: 	area_check.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Check Turf araa (area_km2) compared to SQL Server calculated area (area_km2_calc)
 *						Allow for 5% error
 *						Ignore small areas <= 15 km2
 * Note:				%% becomes % after substitution
 */
	WITH a AS (
		SELECT areaname,
			   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
			   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc
		  FROM sahsu_grd_level1
	), b AS (
	SELECT a.areaname,
		   a.area_km2,
		   a.area_km2_calc,
		   CASE WHEN a.area_km2 > 0 THEN 100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2)
				WHEN a.area_km2 = a.area_km2_calc THEN 0
				ELSE NULL
		   END AS pct_km2_diff 
	  FROM a
	), c AS (
		SELECT COUNT(areaname) AS total_areas
		  FROM a
	), d AS (
		SELECT b.areaname, b.area_km2, b.area_km2_calc, b.pct_km2_diff
		  FROM b, c
		 WHERE b.pct_km2_diff > 5 /* Allow for 5% error */
		   AND b.area_km2_calc > 15 /* Ignore small areas <= 15 km2 */
	), e AS (
		SELECT COUNT(areaname) AS total_areas_in_error
		  FROM d
	)
	SELECT d.areaname, d.area_km2, d.area_km2_calc, d.pct_km2_diff, c.total_areas AS total_areas, e.total_areas_in_error AS total_areas_in_error, 
		   ROUND((100*CAST(e.total_areas_in_error AS NUMERIC)/CAST(c.total_areas AS NUMERIC)), 2) AS pct_in_error
	  FROM d, c, e;
DECLARE @areaname AS VARCHAR(30);
DECLARE @area_km2 AS NUMERIC(15,2);
DECLARE @area_km2_calc AS NUMERIC(15,2);
DECLARE @pct_km2_diff AS NUMERIC(15,2);
DECLARE @total_areas AS NUMERIC(15,2);
DECLARE @total_areas_in_error AS NUMERIC(15,2);
DECLARE @pct_in_error AS NUMERIC(15,2);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
		IF @nrows = 1 PRINT 'WARNING ' + CAST(@total_areas_in_error AS VARCHAR) + ' areas in error of ' + CAST(@total_areas AS VARCHAR) + 
			', ' + CAST(@pct_in_error AS VARCHAR) + 'pct';
		PRINT 'WARNING Area: ' + @areaname + ', area km2: ' + CAST(@area_km2 AS VARCHAR) +  + ', calc: ' +
			CAST(@area_km2_calc AS VARCHAR) + ', diff: ' + CAST(@pct_km2_diff AS VARCHAR);
		FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level1 no invalid areas check OK';
ELSE
	IF @pct_in_error < 10 PRINT 'WARNING Table: sahsu_grd_level1 no invalid areas check WARNING: ' + CAST(@pct_in_error AS VARCHAR) + ' invalid (<10 pct)';
	ELSE
		RAISERROR('Table: sahsu_grd_level1 no invalid areas check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 467: Test Turf and DB areas agree to within 1% (Postgres)/5% (SQL server) >>>
DECLARE c1 CURSOR FOR
/*
 * SQL statement name: 	area_check.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Check Turf araa (area_km2) compared to SQL Server calculated area (area_km2_calc)
 *						Allow for 5% error
 *						Ignore small areas <= 15 km2
 * Note:				%% becomes % after substitution
 */
	WITH a AS (
		SELECT areaname,
			   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
			   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc
		  FROM sahsu_grd_level2
	), b AS (
	SELECT a.areaname,
		   a.area_km2,
		   a.area_km2_calc,
		   CASE WHEN a.area_km2 > 0 THEN 100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2)
				WHEN a.area_km2 = a.area_km2_calc THEN 0
				ELSE NULL
		   END AS pct_km2_diff 
	  FROM a
	), c AS (
		SELECT COUNT(areaname) AS total_areas
		  FROM a
	), d AS (
		SELECT b.areaname, b.area_km2, b.area_km2_calc, b.pct_km2_diff
		  FROM b, c
		 WHERE b.pct_km2_diff > 5 /* Allow for 5% error */
		   AND b.area_km2_calc > 15 /* Ignore small areas <= 15 km2 */
	), e AS (
		SELECT COUNT(areaname) AS total_areas_in_error
		  FROM d
	)
	SELECT d.areaname, d.area_km2, d.area_km2_calc, d.pct_km2_diff, c.total_areas AS total_areas, e.total_areas_in_error AS total_areas_in_error, 
		   ROUND((100*CAST(e.total_areas_in_error AS NUMERIC)/CAST(c.total_areas AS NUMERIC)), 2) AS pct_in_error
	  FROM d, c, e;
DECLARE @areaname AS VARCHAR(30);
DECLARE @area_km2 AS NUMERIC(15,2);
DECLARE @area_km2_calc AS NUMERIC(15,2);
DECLARE @pct_km2_diff AS NUMERIC(15,2);
DECLARE @total_areas AS NUMERIC(15,2);
DECLARE @total_areas_in_error AS NUMERIC(15,2);
DECLARE @pct_in_error AS NUMERIC(15,2);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
		IF @nrows = 1 PRINT 'WARNING ' + CAST(@total_areas_in_error AS VARCHAR) + ' areas in error of ' + CAST(@total_areas AS VARCHAR) + 
			', ' + CAST(@pct_in_error AS VARCHAR) + 'pct';
		PRINT 'WARNING Area: ' + @areaname + ', area km2: ' + CAST(@area_km2 AS VARCHAR) +  + ', calc: ' +
			CAST(@area_km2_calc AS VARCHAR) + ', diff: ' + CAST(@pct_km2_diff AS VARCHAR);
		FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level2 no invalid areas check OK';
ELSE
	IF @pct_in_error < 10 PRINT 'WARNING Table: sahsu_grd_level2 no invalid areas check WARNING: ' + CAST(@pct_in_error AS VARCHAR) + ' invalid (<10 pct)';
	ELSE
		RAISERROR('Table: sahsu_grd_level2 no invalid areas check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 468: Test Turf and DB areas agree to within 1% (Postgres)/5% (SQL server) >>>
DECLARE c1 CURSOR FOR
/*
 * SQL statement name: 	area_check.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Check Turf araa (area_km2) compared to SQL Server calculated area (area_km2_calc)
 *						Allow for 5% error
 *						Ignore small areas <= 15 km2
 * Note:				%% becomes % after substitution
 */
	WITH a AS (
		SELECT areaname,
			   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
			   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc
		  FROM sahsu_grd_level3
	), b AS (
	SELECT a.areaname,
		   a.area_km2,
		   a.area_km2_calc,
		   CASE WHEN a.area_km2 > 0 THEN 100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2)
				WHEN a.area_km2 = a.area_km2_calc THEN 0
				ELSE NULL
		   END AS pct_km2_diff 
	  FROM a
	), c AS (
		SELECT COUNT(areaname) AS total_areas
		  FROM a
	), d AS (
		SELECT b.areaname, b.area_km2, b.area_km2_calc, b.pct_km2_diff
		  FROM b, c
		 WHERE b.pct_km2_diff > 5 /* Allow for 5% error */
		   AND b.area_km2_calc > 15 /* Ignore small areas <= 15 km2 */
	), e AS (
		SELECT COUNT(areaname) AS total_areas_in_error
		  FROM d
	)
	SELECT d.areaname, d.area_km2, d.area_km2_calc, d.pct_km2_diff, c.total_areas AS total_areas, e.total_areas_in_error AS total_areas_in_error, 
		   ROUND((100*CAST(e.total_areas_in_error AS NUMERIC)/CAST(c.total_areas AS NUMERIC)), 2) AS pct_in_error
	  FROM d, c, e;
DECLARE @areaname AS VARCHAR(30);
DECLARE @area_km2 AS NUMERIC(15,2);
DECLARE @area_km2_calc AS NUMERIC(15,2);
DECLARE @pct_km2_diff AS NUMERIC(15,2);
DECLARE @total_areas AS NUMERIC(15,2);
DECLARE @total_areas_in_error AS NUMERIC(15,2);
DECLARE @pct_in_error AS NUMERIC(15,2);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
		IF @nrows = 1 PRINT 'WARNING ' + CAST(@total_areas_in_error AS VARCHAR) + ' areas in error of ' + CAST(@total_areas AS VARCHAR) + 
			', ' + CAST(@pct_in_error AS VARCHAR) + 'pct';
		PRINT 'WARNING Area: ' + @areaname + ', area km2: ' + CAST(@area_km2 AS VARCHAR) +  + ', calc: ' +
			CAST(@area_km2_calc AS VARCHAR) + ', diff: ' + CAST(@pct_km2_diff AS VARCHAR);
		FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level3 no invalid areas check OK';
ELSE
	IF @pct_in_error < 10 PRINT 'WARNING Table: sahsu_grd_level3 no invalid areas check WARNING: ' + CAST(@pct_in_error AS VARCHAR) + ' invalid (<10 pct)';
	ELSE
		RAISERROR('Table: sahsu_grd_level3 no invalid areas check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;;
GO

-- SQL statement 469: Test Turf and DB areas agree to within 1% (Postgres)/5% (SQL server) >>>
DECLARE c1 CURSOR FOR
/*
 * SQL statement name: 	area_check.sql
 * Type:				Microsoft SQL Server T/sql anonymous block
 * Parameters:
 *						1: geometry column; e.g. geom_11
 *						2: table name; e.g. cb_2014_us_county_500k
 *
 * Description:			Check Turf araa (area_km2) compared to SQL Server calculated area (area_km2_calc)
 *						Allow for 5% error
 *						Ignore small areas <= 15 km2
 * Note:				%% becomes % after substitution
 */
	WITH a AS (
		SELECT areaname,
			   CAST(area_km2 AS NUMERIC(15,2)) AS area_km2,
			   CAST((geom_11.STArea()/(1000*1000)) AS NUMERIC(15,2)) AS area_km2_calc
		  FROM sahsu_grd_level4
	), b AS (
	SELECT a.areaname,
		   a.area_km2,
		   a.area_km2_calc,
		   CASE WHEN a.area_km2 > 0 THEN 100*(ABS(a.area_km2 - a.area_km2_calc)/area_km2)
				WHEN a.area_km2 = a.area_km2_calc THEN 0
				ELSE NULL
		   END AS pct_km2_diff 
	  FROM a
	), c AS (
		SELECT COUNT(areaname) AS total_areas
		  FROM a
	), d AS (
		SELECT b.areaname, b.area_km2, b.area_km2_calc, b.pct_km2_diff
		  FROM b, c
		 WHERE b.pct_km2_diff > 5 /* Allow for 5% error */
		   AND b.area_km2_calc > 15 /* Ignore small areas <= 15 km2 */
	), e AS (
		SELECT COUNT(areaname) AS total_areas_in_error
		  FROM d
	)
	SELECT d.areaname, d.area_km2, d.area_km2_calc, d.pct_km2_diff, c.total_areas AS total_areas, e.total_areas_in_error AS total_areas_in_error, 
		   ROUND((100*CAST(e.total_areas_in_error AS NUMERIC)/CAST(c.total_areas AS NUMERIC)), 2) AS pct_in_error
	  FROM d, c, e;
DECLARE @areaname AS VARCHAR(30);
DECLARE @area_km2 AS NUMERIC(15,2);
DECLARE @area_km2_calc AS NUMERIC(15,2);
DECLARE @pct_km2_diff AS NUMERIC(15,2);
DECLARE @total_areas AS NUMERIC(15,2);
DECLARE @total_areas_in_error AS NUMERIC(15,2);
DECLARE @pct_in_error AS NUMERIC(15,2);
DECLARE @nrows AS int;
SET @nrows=0;
OPEN c1;
FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
WHILE @@FETCH_STATUS = 0
BEGIN
		SET @nrows+=1;
		IF @nrows = 1 PRINT 'WARNING ' + CAST(@total_areas_in_error AS VARCHAR) + ' areas in error of ' + CAST(@total_areas AS VARCHAR) + 
			', ' + CAST(@pct_in_error AS VARCHAR) + 'pct';
		PRINT 'WARNING Area: ' + @areaname + ', area km2: ' + CAST(@area_km2 AS VARCHAR) +  + ', calc: ' +
			CAST(@area_km2_calc AS VARCHAR) + ', diff: ' + CAST(@pct_km2_diff AS VARCHAR);
		FETCH NEXT FROM c1 INTO @areaname, @area_km2, @area_km2_calc, @pct_km2_diff, @total_areas, @total_areas_in_error, @pct_in_error;
END
IF @nrows = 0
	PRINT 'Table: sahsu_grd_level4 no invalid areas check OK';
ELSE
	IF @pct_in_error < 10 PRINT 'WARNING Table: sahsu_grd_level4 no invalid areas check WARNING: ' + CAST(@pct_in_error AS VARCHAR) + ' invalid (<10 pct)';
	ELSE
		RAISERROR('Table: sahsu_grd_level4 no invalid areas check FAILED: %i invalid', 16, 1, @nrows);
CLOSE c1;
DEALLOCATE c1;;
GO


--
-- EOF
